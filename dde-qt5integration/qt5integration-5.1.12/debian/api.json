{"Filepath":"iconengineplugins/builtinengine/dbuiltiniconengine.h","Functions":[{"Uniquefunname":" DBuiltinIconEngine(const DBuiltinIconEngine \u0026 other)","Funname":"DBuiltinIconEngine","Returntype":"","Args":"const DBuiltinIconEngine \u0026 other"},{"Uniquefunname":"public DBuiltinIconEngine(const QString \u0026 iconName)","Funname":"DBuiltinIconEngine","Returntype":"public","Args":"const QString \u0026 iconName"},{"Uniquefunname":"QSize actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * clone()","Funname":"clone","Returntype":"QIconEngine *","Args":""},{"Uniquefunname":"void ensureLoaded()","Funname":"ensureLoaded","Returntype":"void","Args":""},{"Uniquefunname":"private hasIcon()","Funname":"hasIcon","Returntype":"private","Args":""},{"Uniquefunname":"QString iconName()","Funname":"iconName","Returntype":"QString","Args":""},{"Uniquefunname":"QString key()","Funname":"key","Returntype":"QString","Args":""},{"Uniquefunname":"QThemeIconInfo loadIcon(const QString \u0026 iconName,uint key)","Funname":"loadIcon","Returntype":"QThemeIconInfo","Args":"const QString \u0026 iconName,uint key"},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool read(QDataStream \u0026 in)","Funname":"read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"void virtual_hook(int id,void * data)","Funname":"virtual_hook","Returntype":"void","Args":"int id,void * data"},{"Uniquefunname":"bool write(QDataStream \u0026 out)","Funname":"write","Returntype":"bool","Args":"QDataStream \u0026 out"},{"Uniquefunname":" ~DBuiltinIconEngine()","Funname":"~DBuiltinIconEngine","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DBUILTINICONENGINE_H"]}]}
{"Filepath":"iconengineplugins/svgiconengine/qsvgiconengine.h","Functions":[{"Uniquefunname":"public QSvgIconEngine()","Funname":"QSvgIconEngine","Returntype":"public","Args":""},{"Uniquefunname":" QSvgIconEngine(const QSvgIconEngine \u0026 other)","Funname":"QSvgIconEngine","Returntype":"","Args":"const QSvgIconEngine \u0026 other"},{"Uniquefunname":"QSize actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void addFile(const QString \u0026 fileName,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"addFile","Returntype":"void","Args":"const QString \u0026 fileName,const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void addPixmap(const QPixmap \u0026 pixmap,QIcon::Mode mode,QIcon::State state)","Funname":"addPixmap","Returntype":"void","Args":"const QPixmap \u0026 pixmap,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * clone()","Funname":"clone","Returntype":"QIconEngine *","Args":""},{"Uniquefunname":"QString key()","Funname":"key","Returntype":"QString","Args":""},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool read(QDataStream \u0026 in)","Funname":"read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"bool write(QDataStream \u0026 out)","Funname":"write","Returntype":"bool","Args":"QDataStream \u0026 out"},{"Uniquefunname":" ~QSvgIconEngine()","Funname":"~QSvgIconEngine","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["QSVGICONENGINE_H"]}]}
{"Filepath":"imageformatplugins/svg/qsvgiohandler.h","Functions":[{"Uniquefunname":"public QSvgIOHandler()","Funname":"QSvgIOHandler","Returntype":"public","Args":""},{"Uniquefunname":"bool canRead(QIODevice * device)","Funname":"canRead","Returntype":"bool","Args":"QIODevice * device"},{"Uniquefunname":"virtual bool canRead()","Funname":"canRead","Returntype":"virtual bool","Args":""},{"Uniquefunname":"virtual QByteArray name()","Funname":"name","Returntype":"virtual QByteArray","Args":""},{"Uniquefunname":"virtual QVariant option(ImageOption option)","Funname":"option","Returntype":"virtual QVariant","Args":"ImageOption option"},{"Uniquefunname":"virtual bool read(QImage * image)","Funname":"read","Returntype":"virtual bool","Args":"QImage * image"},{"Uniquefunname":"virtual void setOption(ImageOption option,const QVariant \u0026 value)","Funname":"setOption","Returntype":"virtual void","Args":"ImageOption option,const QVariant \u0026 value"},{"Uniquefunname":"virtual bool supportsOption(ImageOption option)","Funname":"supportsOption","Returntype":"virtual bool","Args":"ImageOption option"},{"Uniquefunname":" ~QSvgIOHandler()","Funname":"~QSvgIOHandler","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["QSVGIOHANDLER_H"]}]}
{"Filepath":"platformthemeplugin/diconengine.h","Functions":[{"Uniquefunname":"public DIconEngine(const QString \u0026 iconName)","Funname":"DIconEngine","Returntype":"public","Args":"const QString \u0026 iconName"},{"Uniquefunname":"QSize actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * clone()","Funname":"clone","Returntype":"QIconEngine *","Args":""},{"Uniquefunname":"QString iconName()","Funname":"iconName","Returntype":"QString","Args":""},{"Uniquefunname":"QString key()","Funname":"key","Returntype":"QString","Args":""},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":" ~DIconEngine()","Funname":"~DIconEngine","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DICONENGINE_H"]}]}
{"Filepath":"platformthemeplugin/diconproxyengine.h","Functions":[{"Uniquefunname":"public DIconProxyEngine(const QIcon \u0026 proxyIcon)","Funname":"DIconProxyEngine","Returntype":"public","Args":"const QIcon \u0026 proxyIcon"},{"Uniquefunname":"QSize actualSize(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"actualSize","Returntype":"QSize","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QIconEngine * clone()","Funname":"clone","Returntype":"QIconEngine *","Args":""},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"bool read(QDataStream \u0026 in)","Funname":"read","Returntype":"bool","Args":"QDataStream \u0026 in"},{"Uniquefunname":"bool write(QDataStream \u0026 out)","Funname":"write","Returntype":"bool","Args":"QDataStream \u0026 out"}],"Records":[{"Name":"macro","Fields":["DICONPROXYENGINE_H"]}]}
{"Filepath":"platformthemeplugin/dthemesettings.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(QString iconThemeName READ iconThemeName NOTIFY iconThemeNameChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"QString iconThemeName READ iconThemeName NOTIFY iconThemeNameChanged"},{"Uniquefunname":"bool autoScaleWindow()","Funname":"autoScaleWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void autoScaleWindowChanged(bool autoScaleWindow)","Funname":"autoScaleWindowChanged","Returntype":"void","Args":"bool autoScaleWindow"},{"Uniquefunname":"bool contains(const QString \u0026 key)","Funname":"contains","Returntype":"bool","Args":"const QString \u0026 key"},{"Uniquefunname":"QString fallbackIconThemeName()","Funname":"fallbackIconThemeName","Returntype":"QString","Args":""},{"Uniquefunname":"void fallbackIconThemeNameChanged(QString fallbackIconThemeName)","Funname":"fallbackIconThemeNameChanged","Returntype":"void","Args":"QString fallbackIconThemeName"},{"Uniquefunname":"QString iconThemeName()","Funname":"iconThemeName","Returntype":"QString","Args":""},{"Uniquefunname":"void iconThemeNameChanged(QString iconThemeName)","Funname":"iconThemeNameChanged","Returntype":"void","Args":"QString iconThemeName"},{"Uniquefunname":"bool isSetFallbackIconThemeName()","Funname":"isSetFallbackIconThemeName","Returntype":"bool","Args":""},{"Uniquefunname":"bool isSetIconThemeName()","Funname":"isSetIconThemeName","Returntype":"bool","Args":""},{"Uniquefunname":"bool isSetStyleNames()","Funname":"isSetStyleNames","Returntype":"bool","Args":""},{"Uniquefunname":"bool isSetSystemFixedFont()","Funname":"isSetSystemFixedFont","Returntype":"bool","Args":""},{"Uniquefunname":"bool isSetSystemFont()","Funname":"isSetSystemFont","Returntype":"bool","Args":""},{"Uniquefunname":"bool isSetSystemFontPixelSize()","Funname":"isSetSystemFontPixelSize","Returntype":"bool","Args":""},{"Uniquefunname":"QSettings * makeSettings()","Funname":"makeSettings","Returntype":"QSettings *","Args":""},{"Uniquefunname":"void onConfigChanged()","Funname":"onConfigChanged","Returntype":"void","Args":""},{"Uniquefunname":"qreal scaleFactor()","Funname":"scaleFactor","Returntype":"qreal","Args":""},{"Uniquefunname":"void scaleFactorChanged(const qreal \u0026 scaleFactor)","Funname":"scaleFactorChanged","Returntype":"void","Args":"const qreal \u0026 scaleFactor"},{"Uniquefunname":"QPair\u003cqreal,qreal\u003e scaleLogicalDpi()","Funname":"scaleLogicalDpi","Returntype":"QPair\u003cqreal,qreal\u003e","Args":""},{"Uniquefunname":"void scaleLogicalDpiChanged(const QPair\u003cqreal,qreal\u003e scaleLogicalDpi)","Funname":"scaleLogicalDpiChanged","Returntype":"void","Args":"const QPair\u003cqreal,qreal\u003e scaleLogicalDpi"},{"Uniquefunname":"QByteArray screenScaleFactors()","Funname":"screenScaleFactors","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void screenScaleFactorsChanged(const QByteArray \u0026 screenScaleFactors)","Funname":"screenScaleFactorsChanged","Returntype":"void","Args":"const QByteArray \u0026 screenScaleFactors"},{"Uniquefunname":"QStringList styleNames()","Funname":"styleNames","Returntype":"QStringList","Args":""},{"Uniquefunname":"void styleNamesChanged(QStringList styleNames)","Funname":"styleNamesChanged","Returntype":"void","Args":"QStringList styleNames"},{"Uniquefunname":"QString systemFixedFont()","Funname":"systemFixedFont","Returntype":"QString","Args":""},{"Uniquefunname":"void systemFixedFontChanged(QString systemFixedFont)","Funname":"systemFixedFontChanged","Returntype":"void","Args":"QString systemFixedFont"},{"Uniquefunname":"QString systemFont()","Funname":"systemFont","Returntype":"QString","Args":""},{"Uniquefunname":"void systemFontChanged(QString systemFont)","Funname":"systemFontChanged","Returntype":"void","Args":"QString systemFont"},{"Uniquefunname":"qreal systemFontPointSize()","Funname":"systemFontPointSize","Returntype":"qreal","Args":""},{"Uniquefunname":"void systemFontPointSizeChanged(qreal systemFontPointSize)","Funname":"systemFontPointSizeChanged","Returntype":"void","Args":"qreal systemFontPointSize"},{"Uniquefunname":"int touchFlickBeginMoveDelay()","Funname":"touchFlickBeginMoveDelay","Returntype":"int","Args":""},{"Uniquefunname":"void touchFlickBeginMoveDelayChanged(int touchFlickBeginMoveDelay)","Funname":"touchFlickBeginMoveDelayChanged","Returntype":"void","Args":"int touchFlickBeginMoveDelay"},{"Uniquefunname":"signals valueChanged(const QString \u0026 key,const QVariant \u0026 oldValue,const QVariant \u0026 newValue)","Funname":"valueChanged","Returntype":"signals","Args":"const QString \u0026 key,const QVariant \u0026 oldValue,const QVariant \u0026 newValue"}],"Records":[{"Name":"macro","Fields":["DTHEMESETTINGS_H"]}]}
{"Filepath":"platformthemeplugin/qdeepinfiledialoghelper.h","Functions":[{"Uniquefunname":" QDeepinFileDialogHelper()","Funname":"QDeepinFileDialogHelper","Returntype":"","Args":""},{"Uniquefunname":"void applyOptions()","Funname":"applyOptions","Returntype":"void","Args":""},{"Uniquefunname":"bool defaultNameFilterDisables()","Funname":"defaultNameFilterDisables","Returntype":"bool","Args":""},{"Uniquefunname":"QUrl directory()","Funname":"directory","Returntype":"QUrl","Args":""},{"Uniquefunname":"void ensureDialog()","Funname":"ensureDialog","Returntype":"void","Args":""},{"Uniquefunname":"void exec()","Funname":"exec","Returntype":"void","Args":""},{"Uniquefunname":"void hide()","Funname":"hide","Returntype":"void","Args":""},{"Uniquefunname":"bool iAmFileDialogDBusServer()","Funname":"iAmFileDialogDBusServer","Returntype":"bool","Args":""},{"Uniquefunname":"void initDBusFileDialogManager()","Funname":"initDBusFileDialogManager","Returntype":"void","Args":""},{"Uniquefunname":"void selectFile(const QUrl \u0026 filename)","Funname":"selectFile","Returntype":"void","Args":"const QUrl \u0026 filename"},{"Uniquefunname":"void selectNameFilter(const QString \u0026 filter)","Funname":"selectNameFilter","Returntype":"void","Args":"const QString \u0026 filter"},{"Uniquefunname":"QList\u003cQUrl\u003e selectedFiles()","Funname":"selectedFiles","Returntype":"QList\u003cQUrl\u003e","Args":""},{"Uniquefunname":"QString selectedNameFilter()","Funname":"selectedNameFilter","Returntype":"QString","Args":""},{"Uniquefunname":"void setDirectory(const QUrl \u0026 directory)","Funname":"setDirectory","Returntype":"void","Args":"const QUrl \u0026 directory"},{"Uniquefunname":"void setFilter()","Funname":"setFilter","Returntype":"void","Args":""},{"Uniquefunname":"bool show(Qt::WindowFlags flags,Qt::WindowModality modality,QWindow * parent)","Funname":"show","Returntype":"bool","Args":"Qt::WindowFlags flags,Qt::WindowModality modality,QWindow * parent"},{"Uniquefunname":" ~QDeepinFileDialogHelper()","Funname":"~QDeepinFileDialogHelper","Returntype":"","Args":""}],"Records":[{"Name":"enum:CustomWidgetType","Fields":["ComboBoxType","LineEditType"]},{"Name":"macro","Fields":["QDEEPINFILEDIALOGHELPER_H"]}]}
{"Filepath":"platformthemeplugin/qdeepintheme.h","Functions":[{"Uniquefunname":"public QDeepinTheme()","Funname":"QDeepinTheme","Returntype":"public","Args":""},{"Uniquefunname":"QIconEngine * createIconEngine(const QString \u0026 iconName)","Funname":"createIconEngine","Returntype":"QIconEngine *","Args":"const QString \u0026 iconName"},{"Uniquefunname":"QPlatformDialogHelper * createPlatformDialogHelper(DialogType type)","Funname":"createPlatformDialogHelper","Returntype":"QPlatformDialogHelper *","Args":"DialogType type"},{"Uniquefunname":"const QFont * font(Font type)","Funname":"font","Returntype":"const QFont *","Args":"Font type"},{"Uniquefunname":"DThemeSettings * getSettings()","Funname":"getSettings","Returntype":"DThemeSettings *","Args":""},{"Uniquefunname":"const QPalette * palette(Palette type)","Funname":"palette","Returntype":"const QPalette *","Args":"Palette type"},{"Uniquefunname":"DThemeSettings * settings()","Funname":"settings","Returntype":"DThemeSettings *","Args":""},{"Uniquefunname":"QPixmap standardPixmap(StandardPixmap sp,const QSizeF \u0026 size)","Funname":"standardPixmap","Returntype":"QPixmap","Args":"StandardPixmap sp,const QSizeF \u0026 size"},{"Uniquefunname":"QVariant themeHint(ThemeHint hint)","Funname":"themeHint","Returntype":"QVariant","Args":"ThemeHint hint"},{"Uniquefunname":"bool usePlatformNativeDialog(DialogType type)","Funname":"usePlatformNativeDialog","Returntype":"bool","Args":"DialogType type"},{"Uniquefunname":" ~QDeepinTheme()","Funname":"~QDeepinTheme","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["QDEEPINTHEME_H"]}]}
{"Filepath":"platformthemeplugin/xdgiconenginecreator.h","Functions":[{"Uniquefunname":"public create(const QString \u0026 name)","Funname":"create","Returntype":"public","Args":"const QString \u0026 name"}],"Records":[{"Name":"macro","Fields":["XDGICONENGINECREATOR_H"]}]}
{"Filepath":"styleplugins/chameleon/chameleonstyle.h","Functions":[{"Uniquefunname":"public ChameleonStyle()","Funname":"ChameleonStyle","Returntype":"public","Args":""},{"Uniquefunname":"void _q_removeAnimation()","Funname":"_q_removeAnimation","Returntype":"void","Args":""},{"Uniquefunname":"public animation(const QObject * target)","Funname":"animation","Returntype":"public","Args":"const QObject * target"},{"Uniquefunname":"void drawBorder(QPainter * p,const QStyleOption * opt,const QWidget * w)","Funname":"drawBorder","Returntype":"void","Args":"QPainter * p,const QStyleOption * opt,const QWidget * w"},{"Uniquefunname":"void drawButtonBoxButton(const DStyleOptionButtonBoxButton * btnopt,QPainter * p,const QRect \u0026 rect,int radius)","Funname":"drawButtonBoxButton","Returntype":"void","Args":"const DStyleOptionButtonBoxButton * btnopt,QPainter * p,const QRect \u0026 rect,int radius"},{"Uniquefunname":"QRect drawButtonDownArrow(const QStyleOption * opt,QPainter * p,const QWidget * w)","Funname":"drawButtonDownArrow","Returntype":"QRect","Args":"const QStyleOption * opt,QPainter * p,const QWidget * w"},{"Uniquefunname":"void drawCalenderEllipse(QPainter * p,const QRect \u0026 rect,int offset)","Funname":"drawCalenderEllipse","Returntype":"void","Args":"QPainter * p,const QRect \u0026 rect,int offset"},{"Uniquefunname":"bool drawComboBox(QPainter * painter,const QStyleOptionComboBox * comboBox,const QWidget * widget)","Funname":"drawComboBox","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionComboBox * comboBox,const QWidget * widget"},{"Uniquefunname":"bool drawComboBoxLabel(QPainter * painter,const QStyleOptionComboBox * comboBox,const QWidget * widget)","Funname":"drawComboBoxLabel","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionComboBox * comboBox,const QWidget * widget"},{"Uniquefunname":"bool drawMenuBarItem(const QStyleOptionMenuItem * option,QRect \u0026 rect,QPainter * painter,const QWidget * widget)","Funname":"drawMenuBarItem","Returntype":"bool","Args":"const QStyleOptionMenuItem * option,QRect \u0026 rect,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawMenuItem(const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget)","Funname":"drawMenuItem","Returntype":"bool","Args":"const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"void drawMenuItemBackground(const QStyleOption * option,QPainter * painter,QStyleOptionMenuItem::MenuItemType type)","Funname":"drawMenuItemBackground","Returntype":"void","Args":"const QStyleOption * option,QPainter * painter,QStyleOptionMenuItem::MenuItemType type"},{"Uniquefunname":"protected drawMenuItemRedPoint(const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget)","Funname":"drawMenuItemRedPoint","Returntype":"protected","Args":"const QStyleOptionMenuItem * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"void drawRoundedShadow(QPainter * p,const QRect \u0026 rect,const QColor \u0026 color,int frame_radius)","Funname":"drawRoundedShadow","Returntype":"void","Args":"QPainter * p,const QRect \u0026 rect,const QColor \u0026 color,int frame_radius"},{"Uniquefunname":"private drawShadow(QPainter * p,const QRect \u0026 rect,const QColor \u0026 color)","Funname":"drawShadow","Returntype":"private","Args":"QPainter * p,const QRect \u0026 rect,const QColor \u0026 color"},{"Uniquefunname":"void drawSliderHandle(const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w)","Funname":"drawSliderHandle","Returntype":"void","Args":"const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w"},{"Uniquefunname":"void drawSliderHandleFocus(const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w)","Funname":"drawSliderHandleFocus","Returntype":"void","Args":"const QStyleOptionComplex * opt,QRectF \u0026 rectHandle,QPainter * p,const QWidget * w"},{"Uniquefunname":"bool drawSpinBox(const QStyleOptionSpinBox * opt,QPainter * p,const QWidget * w)","Funname":"drawSpinBox","Returntype":"bool","Args":"const QStyleOptionSpinBox * opt,QPainter * p,const QWidget * w"},{"Uniquefunname":"bool drawTabBar(QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget)","Funname":"drawTabBar","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget"},{"Uniquefunname":"bool drawTabBarCloseButton(QPainter * painter,const QStyleOption * tab,const QWidget * widget)","Funname":"drawTabBarCloseButton","Returntype":"bool","Args":"QPainter * painter,const QStyleOption * tab,const QWidget * widget"},{"Uniquefunname":"bool drawTabBarLabel(QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget)","Funname":"drawTabBarLabel","Returntype":"bool","Args":"QPainter * painter,const QStyleOptionTab * tab,const QWidget * widget"},{"Uniquefunname":"bool drawTabBarScrollButton(QPainter * painter,const QStyleOption * opt,const QWidget * buttonWidget)","Funname":"drawTabBarScrollButton","Returntype":"bool","Args":"QPainter * painter,const QStyleOption * opt,const QWidget * buttonWidget"},{"Uniquefunname":"QMargins frameExtentMargins()","Funname":"frameExtentMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"QBrush generatedBrush(StateFlags flags,const QBrush \u0026 base,QPalette::ColorGroup cg,QPalette::ColorRole role,const QStyleOption * option)","Funname":"generatedBrush","Returntype":"QBrush","Args":"StateFlags flags,const QBrush \u0026 base,QPalette::ColorGroup cg,QPalette::ColorRole role,const QStyleOption * option"},{"Uniquefunname":"QColor getColor(const QStyleOption * option,DPalette::ColorType type,const QWidget * widget)","Funname":"getColor","Returntype":"QColor","Args":"const QStyleOption * option,DPalette::ColorType type,const QWidget * widget"},{"Uniquefunname":"QColor getColor(const QStyleOption * option,QPalette::ColorRole role)","Funname":"getColor","Returntype":"QColor","Args":"const QStyleOption * option,QPalette::ColorRole role"},{"Uniquefunname":"bool isNoticks(const QStyleOptionSlider * slider,QPainter * p,const QWidget * w)","Funname":"isNoticks","Returntype":"bool","Args":"const QStyleOptionSlider * slider,QPainter * p,const QWidget * w"},{"Uniquefunname":"void polish(QWidget * w)","Funname":"polish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"void tabLayout(const QStyleOptionTab * opt,const QWidget * widget,QRect * textRect,QRect * iconRect)","Funname":"tabLayout","Returntype":"void","Args":"const QStyleOptionTab * opt,const QWidget * widget,QRect * textRect,QRect * iconRect"},{"Uniquefunname":"void unpolish(QApplication * application)","Funname":"unpolish","Returntype":"void","Args":"QApplication * application"},{"Uniquefunname":"void unpolish(QWidget * w)","Funname":"unpolish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"void updateSpinBoxButtonState(const QStyleOptionSpinBox * opt,QStyleOptionButton \u0026 button,bool isActive,bool isEnabled)","Funname":"updateSpinBoxButtonState","Returntype":"void","Args":"const QStyleOptionSpinBox * opt,QStyleOptionButton \u0026 button,bool isActive,bool isEnabled"}],"Records":[{"Name":"macro","Fields":["CHAMELEONSTYLE_H"]}]}
{"Filepath":"styleplugins/chameleon/common.h","Functions":null,"Records":[{"Name":"enum:Corner","Fields":["AllCorners","CornerBottomLeft","CornerBottomRight","CornerTopLeft","CornerTopRight","CornersBottom","CornersLeft","CornersRight","CornersTop"]},{"Name":"enum:Metrics","Fields":["Button_ItemSpacing","Button_MarginWidth","Button_MinWidth","CheckBox_FocusMarginWidth","CheckBox_FrameWidth","CheckBox_ItemSpacing","CheckBox_Size","ComboBox_ArrowButtonWidth","ComboBox_FrameWidth","Frame_BorderSpacing","Frame_FrameRadius","Frame_FrameWidth","GroupBox_TitleMarginWidth","GroupBox_TopMargin","Header_ArrowSize","Header_ItemSpacing","Header_MarginWidth","Icon_Margins","Icon_Size","ItemView_ArrowSize","ItemView_ItemMarginWidth","Layout_ChildMarginWidth","Layout_DefaultSpacing","Layout_TopLevelMarginWidth","LineEdit_FrameWidth","LineEdit_LeftMargin","MenuBarItem_MarginHeight","MenuBarItem_MarginWidth","MenuBar_ItemSpacing","MenuButton_IndicatorMargin","MenuItem_AcceleratorSpace","MenuItem_ItemSpacing","MenuItem_MarginWidth","MenuItem_TabSpacing","Menu_ArrowHMargin","Menu_CheckMarkWidth","Menu_FrameWidth","Menu_HMargin","Menu_ItemFrameWidth","Menu_ItemHMargin","Menu_ItemHTextMargin","Menu_ItemVMargin","Menu_ItemVTextMargin","Menu_PanelRightPadding","Menu_RightBorder","Menu_SeparatorItemHMargin","Menu_VMargin","Painter_PenWidth","ProgressBar_BorderWidth","ProgressBar_BusyIndicatorSize","ProgressBar_ItemSpacing","ProgressBar_MinimumStyleHeight","ProgressBar_Radius","ScrollBar_DoubleButtonHeight","ScrollBar_Extend","ScrollBar_MinSliderHeight","ScrollBar_NoButtonHeight","ScrollBar_SingleButtonHeight","ScrollBar_SliderMinWidget","ScrollBar_SliderWidth","Shadow_Overlap","Shadow_Radius","Shadow_XOffset","Shadow_YOffset","SidePanel_ItemMarginWidth","Slider_ControlThickness","Slider_GrooveThickness","Slider_TickLength","Slider_TickMarginWidth","Slider_TickmarkOffset","SpinBox_ArrowButtonWidth","SpinBox_ButtonIconWidth","SpinBox_FrameWidth","SpinBox_MiniHeight","Splitter_SplitterWidth","TabBar_BaseOverlap","TabBar_TabItemSpacing","TabBar_TabMargin","TabBar_TabMarginHeight","TabBar_TabMarginWidth","TabBar_TabMinHeight","TabBar_TabMinWidth","TabBar_TabOverlap","TabWidget_MarginWidth","TitleBar_MarginWidth","ToolBar_ExtensionWidth","ToolBar_FrameWidth","ToolBar_HandleExtent","ToolBar_HandleWidth","ToolBar_ItemSpacing","ToolBar_SeparatorWidth","ToolBox_TabItemSpacing","ToolBox_TabMarginWidth","ToolBox_TabMinWidth","ToolButton_AlignCenterPadding","ToolButton_AlignLeftMargin","ToolButton_AlignLeftPadding","ToolButton_AlignRightPadding","ToolButton_InlineIndicatorWidth","ToolButton_ItemSpacing","ToolButton_MarginWidth","ToolTip_FrameWidth"]},{"Name":"macro","Fields":["COMMON_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/colorutils.h","Functions":[{"Uniquefunname":"public alphaColor(QColor color,qreal alpha)","Funname":"alphaColor","Returntype":"public","Args":"QColor color,qreal alpha"}],"Records":[{"Name":"macro","Fields":["COLORUTILS_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/common.h","Functions":null,"Records":[{"Name":"enum:Corner","Fields":["AllCorners","CornerBottomLeft","CornerBottomRight","CornerTopLeft","CornerTopRight","CornersBottom","CornersLeft","CornersRight","CornersTop"]},{"Name":"enum:Metrics","Fields":["Button_ItemSpacing","Button_MarginWidth","Button_MinWidth","CheckBox_FocusMarginWidth","CheckBox_ItemSpacing","CheckBox_Size","ComboBox_FrameWidth","Frame_FrameRadius","Frame_FrameWidth","GroupBox_TitleMarginWidth","GroupBox_TopMargin","Header_ArrowSize","Header_ItemSpacing","Header_MarginWidth","ItemView_ArrowSize","ItemView_ItemMarginWidth","Layout_ChildMarginWidth","Layout_DefaultSpacing","Layout_TopLevelMarginWidth","LineEdit_FrameWidth","LineEdit_LeftMargin","MenuBarItem_MarginHeight","MenuBarItem_MarginWidth","MenuBar_ItemSpacing","MenuButton_IndicatorWidth","MenuItem_AcceleratorSpace","MenuItem_ItemSpacing","MenuItem_MarginWidth","Menu_ArrowHMargin","Menu_CheckMarkWidth","Menu_FrameWidth","Menu_HMargin","Menu_ItemFrameWidth","Menu_ItemHMargin","Menu_ItemHTextMargin","Menu_ItemVMargin","Menu_ItemVTextMargin","Menu_PanelRightPadding","Menu_RightBorder","Menu_SeparatorItemHMargin","Menu_VMargin","Painter_PenWidth","ProgressBar_BorderWidth","ProgressBar_BusyIndicatorSize","ProgressBar_ItemSpacing","ProgressBar_Radius","ScrollBar_DoubleButtonHeight","ScrollBar_Extend","ScrollBar_MinSliderHeight","ScrollBar_NoButtonHeight","ScrollBar_SingleButtonHeight","ScrollBar_SliderWidth","Shadow_Overlap","SidePanel_ItemMarginWidth","Slider_ControlThickness","Slider_GrooveThickness","Slider_TickLength","Slider_TickMarginWidth","SpinBox_ArrowButtonWidth","SpinBox_FrameWidth","Splitter_SplitterWidth","TabBar_BaseOverlap","TabBar_TabItemSpacing","TabBar_TabMarginHeight","TabBar_TabMarginWidth","TabBar_TabMinHeight","TabBar_TabMinWidth","TabBar_TabOverlap","TabWidget_MarginWidth","TitleBar_MarginWidth","ToolBar_ExtensionWidth","ToolBar_FrameWidth","ToolBar_HandleExtent","ToolBar_HandleWidth","ToolBar_ItemSpacing","ToolBar_SeparatorWidth","ToolBox_TabItemSpacing","ToolBox_TabMarginWidth","ToolBox_TabMinWidth","ToolButton_InlineIndicatorWidth","ToolButton_ItemSpacing","ToolButton_MarginWidth","ToolTip_FrameWidth"]},{"Name":"macro","Fields":["COMMON_H"]},{"Name":"enum:StyleType","Fields":["StyleDark","StyleLight","StyleSemiDark","StyleSemiLight"]}]}
{"Filepath":"styleplugins/dstyleplugin/commonhelper.h","Functions":[{"Uniquefunname":"public renderFrame(QPainter * painter,const QRect \u0026 rect,const QBrush \u0026 brush,const QBrush \u0026 outline)","Funname":"renderFrame","Returntype":"public","Args":"QPainter * painter,const QRect \u0026 rect,const QBrush \u0026 brush,const QBrush \u0026 outline"},{"Uniquefunname":"Style * widgetStyle(const QWidget * widget)","Funname":"widgetStyle","Returntype":"Style *","Args":"const QWidget * widget"}],"Records":[{"Name":"macro","Fields":["COMMONHELPER_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/dstyleanimation.h","Functions":[{"Uniquefunname":" DBlendStyleAnimation(Type type,QObject * target)","Funname":"DBlendStyleAnimation","Returntype":"","Args":"Type type,QObject * target"},{"Uniquefunname":"Q_OBJECT public DNumberStyleAnimation(QObject * target)","Funname":"DNumberStyleAnimation","Returntype":"Q_OBJECT public","Args":"QObject * target"},{"Uniquefunname":"Q_OBJECT public DProgressStyleAnimation(int speed,QObject * target)","Funname":"DProgressStyleAnimation","Returntype":"Q_OBJECT public","Args":"int speed,QObject * target"},{"Uniquefunname":" DScrollbarStyleAnimation(Mode mode,QObject * target)","Funname":"DScrollbarStyleAnimation","Returntype":"","Args":"Mode mode,QObject * target"},{"Uniquefunname":"Q_OBJECT public DStyleAnimation(QObject * target)","Funname":"DStyleAnimation","Returntype":"Q_OBJECT public","Args":"QObject * target"},{"Uniquefunname":"int animationStep()","Funname":"animationStep","Returntype":"int","Args":""},{"Uniquefunname":"QImage currentImage()","Funname":"currentImage","Returntype":"QImage","Args":""},{"Uniquefunname":"qreal currentValue()","Funname":"currentValue","Returntype":"qreal","Args":""},{"Uniquefunname":"int delay()","Funname":"delay","Returntype":"int","Args":""},{"Uniquefunname":"int duration()","Funname":"duration","Returntype":"int","Args":""},{"Uniquefunname":"QImage endImage()","Funname":"endImage","Returntype":"QImage","Args":""},{"Uniquefunname":"qreal endValue()","Funname":"endValue","Returntype":"qreal","Args":""},{"Uniquefunname":"FrameRate frameRate()","Funname":"frameRate","Returntype":"FrameRate","Args":""},{"Uniquefunname":"protected isUpdateNeeded()","Funname":"isUpdateNeeded","Returntype":"protected","Args":""},{"Uniquefunname":"protected isUpdateNeeded()","Funname":"isUpdateNeeded","Returntype":"protected","Args":""},{"Uniquefunname":"Mode mode()","Funname":"mode","Returntype":"Mode","Args":""},{"Uniquefunname":"int progressStep(int width)","Funname":"progressStep","Returntype":"int","Args":"int width"},{"Uniquefunname":"void setActive(bool active)","Funname":"setActive","Returntype":"void","Args":"bool active"},{"Uniquefunname":"void setDelay(int delay)","Funname":"setDelay","Returntype":"void","Args":"int delay"},{"Uniquefunname":"void setDuration(int duration)","Funname":"setDuration","Returntype":"void","Args":"int duration"},{"Uniquefunname":"void setEndImage(const QImage \u0026 image)","Funname":"setEndImage","Returntype":"void","Args":"const QImage \u0026 image"},{"Uniquefunname":"void setEndValue(qreal value)","Funname":"setEndValue","Returntype":"void","Args":"qreal value"},{"Uniquefunname":"void setFrameRate(FrameRate fps)","Funname":"setFrameRate","Returntype":"void","Args":"FrameRate fps"},{"Uniquefunname":"void setSpeed(int speed)","Funname":"setSpeed","Returntype":"void","Args":"int speed"},{"Uniquefunname":"void setStartImage(const QImage \u0026 image)","Funname":"setStartImage","Returntype":"void","Args":"const QImage \u0026 image"},{"Uniquefunname":"void setStartTime(const QTime \u0026 time)","Funname":"setStartTime","Returntype":"void","Args":"const QTime \u0026 time"},{"Uniquefunname":"void setStartValue(qreal value)","Funname":"setStartValue","Returntype":"void","Args":"qreal value"},{"Uniquefunname":"int speed()","Funname":"speed","Returntype":"int","Args":""},{"Uniquefunname":"public Q_SLOTS start()","Funname":"start","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"QImage startImage()","Funname":"startImage","Returntype":"QImage","Args":""},{"Uniquefunname":"QTime startTime()","Funname":"startTime","Returntype":"QTime","Args":""},{"Uniquefunname":"qreal startValue()","Funname":"startValue","Returntype":"qreal","Args":""},{"Uniquefunname":"QObject * target()","Funname":"target","Returntype":"QObject *","Args":""},{"Uniquefunname":"protected updateCurrentTime(int time)","Funname":"updateCurrentTime","Returntype":"protected","Args":"int time"},{"Uniquefunname":"virtual void updateCurrentTime(int time)","Funname":"updateCurrentTime","Returntype":"virtual void","Args":"int time"},{"Uniquefunname":"void updateTarget()","Funname":"updateTarget","Returntype":"void","Args":""},{"Uniquefunname":"bool wasActive()","Funname":"wasActive","Returntype":"bool","Args":""},{"Uniquefunname":"virtual ~DStyleAnimation()","Funname":"~DStyleAnimation","Returntype":"virtual","Args":""}],"Records":[{"Name":"enum:Mode","Fields":["Activating","Deactivating"]},{"Name":"enum:FrameRate","Fields":["DefaultFps","SixtyFps","ThirtyFps","TwentyFps"]},{"Name":"enum:Type","Fields":["Pulse","Transition"]},{"Name":"macro","Fields":["QSTYLEANIMATION"]}]}
{"Filepath":"styleplugins/dstyleplugin/dstyleplugin.h","Functions":[{"Uniquefunname":"QStyle * create(const QString \u0026 key)","Funname":"create","Returntype":"QStyle *","Args":"const QString \u0026 key"}],"Records":[{"Name":"macro","Fields":["DStylePlugin_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/geometryutils.h","Functions":[{"Uniquefunname":"public centerRect(const QRect \u0026 rect,const QSize \u0026 size)","Funname":"centerRect","Returntype":"public","Args":"const QRect \u0026 rect,const QSize \u0026 size"},{"Uniquefunname":"QRect centerRect(const QRect \u0026 rect,int width,int height)","Funname":"centerRect","Returntype":"QRect","Args":"const QRect \u0026 rect,int width,int height"},{"Uniquefunname":"QRect insideMargin(const QRect \u0026 r,int margin)","Funname":"insideMargin","Returntype":"QRect","Args":"const QRect \u0026 r,int margin"},{"Uniquefunname":"QRect insideMargin(const QRect \u0026 r,int marginWidth,int marginHeight)","Funname":"insideMargin","Returntype":"QRect","Args":"const QRect \u0026 r,int marginWidth,int marginHeight"},{"Uniquefunname":"    static QRectF shadowRect( const QRectF\u0026 rect )","Funname":"shadowRect","Returntype":"QRectF","Args":"const QRectF \u0026 rect"}],"Records":[{"Name":"macro","Fields":["GEOMETRYUTILS_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/hidpihelper.h","Functions":null,"Records":[{"Name":"macro","Fields":["HIDPIHELPER_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/painterhelper.h","Functions":[{"Uniquefunname":"QColor colorBlend(const QColor \u0026 color1,const QColor \u0026 color2)","Funname":"colorBlend","Returntype":"QColor","Args":"const QColor \u0026 color1,const QColor \u0026 color2"},{"Uniquefunname":"QPainterPath roundedPath(const QRectF \u0026 rect,Corners corners,qreal radius)","Funname":"roundedPath","Returntype":"QPainterPath","Args":"const QRectF \u0026 rect,Corners corners,qreal radius"}],"Records":[{"Name":"macro","Fields":["PAINTERHELPER_H"]}]}
{"Filepath":"styleplugins/dstyleplugin/paletteextended.h","Functions":[{"Uniquefunname":"private init(StyleType type)","Funname":"init","Returntype":"private","Args":"StyleType type"},{"Uniquefunname":"Q_OBJECT public instance(StyleType type)","Funname":"instance","Returntype":"Q_OBJECT public","Args":"StyleType type"},{"Uniquefunname":"void polish(QPalette \u0026 p)","Funname":"polish","Returntype":"void","Args":"QPalette \u0026 p"},{"Uniquefunname":" ~PaletteExtended()","Funname":"~PaletteExtended","Returntype":"","Args":""}],"Records":[{"Name":"enum:BrushName","Fields":["CheckBox_BackgroundBrush","HeaderView_ArrowIndicatorDownIcon","HeaderView_ArrowIndicatorUpIcon","LineEdit_AlertBorderBrush","LineEdit_BackgroundBrush","LineEdit_BorderBrush","Menu_BackgroundBrush","Menu_BorderColor","Menu_SeparatorColor","ProgressBar_ContentBackground","ProgressBar_ContentBorder","ProgressBar_GrooveBackground","ProgressBar_GrooveBorder","PushButton_BackgroundBrush","PushButton_BorderBrush","PushButton_SuggestButtonColor","PushButton_SuggestTextColor","PushButton_TextColor","QPalette_Base","QPalette_Button","QPalette_ButtonText","QPalette_Highlight","QPalette_HighlightedText","QPalette_Text","QPalette_Window","QPalette_WindowText","RadioButton_BackgroundBrush","RubberBand_BackgroundBrush","RubberBand_BorderBrush","ScrollBar_HandleBorderBrush","ScrollBar_HandleBrush","Slider_GrooveColor","Slider_GrooveHighlightColor","Slider_HandleBorderColor","Slider_HandleBrush","Slider_TickmarkColor","Slider_VernierHandleBrush","SpinBox_BorderColor","SpinBox_DownBrush","SpinBox_MinusBrush","SpinBox_PlusBrush","SpinBox_UpBrush","TabBarAddButton_BackgroundBrush","TabBarAddButton_Icon","TabBarScrollButton_BackgroundBrush","TabBarScrollButton_DownIcon","TabBarScrollButton_UpIcon","TabBarTab_ActiveColor","TabBarTab_BackgroundBrush","TabBarTab_BorderBrush","TabBarTab_CloseIcon","TabBarTab_CloseIconBackground","TabBarTab_TextColor","TabBar_BackgroundBrush","TabBar_BorderBrush"]},{"Name":"macro","Fields":["PALETTEEXTENDED_H"]},{"Name":"enum:PseudoClassType","Fields":["PseudoClass_Active","PseudoClass_Alternate","PseudoClass_Any","PseudoClass_Bottom","PseudoClass_Checked","PseudoClass_Children","PseudoClass_Closable","PseudoClass_Closed","PseudoClass_Default","PseudoClass_Disabled","PseudoClass_EditFocus","PseudoClass_Editable","PseudoClass_Enabled","PseudoClass_Exclusive","PseudoClass_First","PseudoClass_Flat","PseudoClass_Floatable","PseudoClass_Focus","PseudoClass_Frameless","PseudoClass_Horizontal","PseudoClass_Hover","PseudoClass_Indeterminate","PseudoClass_Item","PseudoClass_Last","PseudoClass_Left","PseudoClass_Maximized","PseudoClass_Middle","PseudoClass_Minimized","PseudoClass_Movable","PseudoClass_NextSelected","PseudoClass_NonExclusive","PseudoClass_Off","PseudoClass_On","PseudoClass_OnlyOne","PseudoClass_Open","PseudoClass_Pressed","PseudoClass_PreviousSelected","PseudoClass_ReadOnly","PseudoClass_Right","PseudoClass_Selected","PseudoClass_Sibling","PseudoClass_Top","PseudoClass_Unchecked","PseudoClass_Unknown","PseudoClass_Unspecified","PseudoClass_Vertical","PseudoClass_Window"]}]}
{"Filepath":"styleplugins/dstyleplugin/style.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PUBLIC(Style)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"Style"},{"Uniquefunname":"Q_OBJECT public Style(StyleType type)","Funname":"Style","Returntype":"Q_OBJECT public","Args":"StyleType type"},{"Uniquefunname":"void _q_removeAnimation()","Funname":"_q_removeAnimation","Returntype":"void","Args":""},{"Uniquefunname":"void _q_updateAppFont()","Funname":"_q_updateAppFont","Returntype":"void","Args":""},{"Uniquefunname":"DStyleAnimation * animation(const QObject * target)","Funname":"animation","Returntype":"DStyleAnimation *","Args":"const QObject * target"},{"Uniquefunname":"QColor backgroundColor(const QPalette \u0026 pal,const QWidget * widget)","Funname":"backgroundColor","Returntype":"QColor","Args":"const QPalette \u0026 pal,const QWidget * widget"},{"Uniquefunname":"QColor buttonColor(const QPalette \u0026 pal)","Funname":"buttonColor","Returntype":"QColor","Args":"const QPalette \u0026 pal"},{"Uniquefunname":"QRect comboBoxSubControlRect(const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget)","Funname":"comboBoxSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget"},{"Uniquefunname":"QColor darkShade()","Funname":"darkShade","Returntype":"QColor","Args":""},{"Uniquefunname":"bool drawComboBox(const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget)","Funname":"drawComboBox","Returntype":"bool","Args":"const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawComboBoxLabelControl(const QStyleOption * option,QPainter * painter,const QWidget *)","Funname":"drawComboBoxLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget *"},{"Uniquefunname":"void drawComboBoxPopupFramePrimitive(const QStyleOption * option,QPainter * painter)","Funname":"drawComboBoxPopupFramePrimitive","Returntype":"void","Args":"const QStyleOption * option,QPainter * painter"},{"Uniquefunname":"void drawComplexControl(ComplexControl cc,const QStyleOptionComplex * opt,QPainter * p,const QWidget * w)","Funname":"drawComplexControl","Returntype":"void","Args":"ComplexControl cc,const QStyleOptionComplex * opt,QPainter * p,const QWidget * w"},{"Uniquefunname":"void drawControl(ControlElement element,const QStyleOption * opt,QPainter * p,const QWidget * w)","Funname":"drawControl","Returntype":"void","Args":"ControlElement element,const QStyleOption * opt,QPainter * p,const QWidget * w"},{"Uniquefunname":"void drawDeepinStyleIcon(const QString \u0026 name,const QStyleOption * opt,QPainter * p,const QWidget * widget)","Funname":"drawDeepinStyleIcon","Returntype":"void","Args":"const QString \u0026 name,const QStyleOption * opt,QPainter * p,const QWidget * widget"},{"Uniquefunname":"bool drawFrameFocusRectPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawFrameFocusRectPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawFrameLineEditPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawFrameLineEditPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawFramePrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawFramePrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawFrameTabBarBasePrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawFrameTabBarBasePrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawFrameTabWidgetPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawFrameTabWidgetPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawIndicatorCheckBoxPrimitive(const QStyleOption *,QPainter *,const QWidget * widget)","Funname":"drawIndicatorCheckBoxPrimitive","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget * widget"},{"Uniquefunname":"bool drawIndicatorHeaderArrowPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawIndicatorHeaderArrowPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawIndicatorTabClosePrimitive(const QStyleOption * opt,QPainter * p,const QWidget * widget)","Funname":"drawIndicatorTabClosePrimitive","Returntype":"bool","Args":"const QStyleOption * opt,QPainter * p,const QWidget * widget"},{"Uniquefunname":"void drawItemPixmap(QPainter * painter,const QRect \u0026 rect,int alignment,const QPixmap \u0026 pixmap)","Funname":"drawItemPixmap","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,int alignment,const QPixmap \u0026 pixmap"},{"Uniquefunname":"bool drawMenuBarItemControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawMenuBarItemControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawMenuItemControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawMenuItemControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawPanelButtonToolPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawPanelButtonToolPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"void drawPrimitive(PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w)","Funname":"drawPrimitive","Returntype":"void","Args":"PrimitiveElement pe,const QStyleOption * opt,QPainter * p,const QWidget * w"},{"Uniquefunname":"bool drawProgressBarContentsControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawProgressBarContentsControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawProgressBarControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawProgressBarControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawProgressBarGrooveControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawProgressBarGrooveControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawProgressBarLabelControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawProgressBarLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawPushButtonBevel(const QStyleOption *,QPainter *,const QWidget *)","Funname":"drawPushButtonBevel","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget *"},{"Uniquefunname":"bool drawPushButtonLabel(const QStyleOption *,QPainter *,const QWidget *)","Funname":"drawPushButtonLabel","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget *"},{"Uniquefunname":"bool drawRubberBandControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawRubberBandControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawScrollBarSliderControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawScrollBarSliderControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawScrollButtonLabelControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawScrollButtonLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawScrollButtonPrimitive(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawScrollButtonPrimitive","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawShapedFrameControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawShapedFrameControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawSlider(const QStyleOptionComplex * opt,QPainter * p,const QWidget * w)","Funname":"drawSlider","Returntype":"bool","Args":"const QStyleOptionComplex * opt,QPainter * p,const QWidget * w"},{"Uniquefunname":"void drawSliderGroove(QPainter *,const QRect \u0026,const QBrush \u0026 brush)","Funname":"drawSliderGroove","Returntype":"void","Args":"QPainter *,const QRect \u0026,const QBrush \u0026 brush"},{"Uniquefunname":"void drawSliderHandle(QPainter * painter,const QStyleOptionSlider * option,const QRect \u0026 rect,const QString \u0026 type)","Funname":"drawSliderHandle","Returntype":"void","Args":"QPainter * painter,const QStyleOptionSlider * option,const QRect \u0026 rect,const QString \u0026 type"},{"Uniquefunname":"bool drawSliderTickmarkLabels(const QStyleOption *,QPainter *,const QWidget *)","Funname":"drawSliderTickmarkLabels","Returntype":"bool","Args":"const QStyleOption *,QPainter *,const QWidget *"},{"Uniquefunname":"bool drawSpinBoxComplexControl(const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget)","Funname":"drawSpinBoxComplexControl","Returntype":"bool","Args":"const QStyleOptionComplex * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"void drawStandardIcon(QStyle::StandardPixmap sp,const QStyleOption * opt,QPainter * p,const QWidget * widget)","Funname":"drawStandardIcon","Returntype":"void","Args":"QStyle::StandardPixmap sp,const QStyleOption * opt,QPainter * p,const QWidget * widget"},{"Uniquefunname":"bool drawTabBarAddButtonControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawTabBarAddButtonControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawTabBarTabLabelControl(const QStyleOption * option,QPainter * p,const QWidget * widget)","Funname":"drawTabBarTabLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * p,const QWidget * widget"},{"Uniquefunname":"bool drawTabBarTabShapeControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawTabBarTabShapeControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"bool drawToolButtonLabelControl(const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawToolButtonLabelControl","Returntype":"bool","Args":"const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"QRect headerArrowRect(const QStyleOption * opt,const QWidget * widget)","Funname":"headerArrowRect","Returntype":"QRect","Args":"const QStyleOption * opt,const QWidget * widget"},{"Uniquefunname":"QColor highlight(const QPalette \u0026 pal)","Funname":"highlight","Returntype":"QColor","Args":"const QPalette \u0026 pal"},{"Uniquefunname":"QColor highlightedOutline(const QPalette \u0026 pal)","Funname":"highlightedOutline","Returntype":"QColor","Args":"const QPalette \u0026 pal"},{"Uniquefunname":"QColor innerContrastLine()","Funname":"innerContrastLine","Returntype":"QColor","Args":""},{"Uniquefunname":"private isTabBarToolButton(const QWidget * button)","Funname":"isTabBarToolButton","Returntype":"private","Args":"const QWidget * button"},{"Uniquefunname":"bool isVisibleMenuCheckBox()","Funname":"isVisibleMenuCheckBox","Returntype":"bool","Args":""},{"Uniquefunname":"bool isVisibleMenuIcon()","Funname":"isVisibleMenuIcon","Returntype":"bool","Args":""},{"Uniquefunname":"bool isVisibleMenuShortText()","Funname":"isVisibleMenuShortText","Returntype":"bool","Args":""},{"Uniquefunname":"QColor lightShade()","Funname":"lightShade","Returntype":"QColor","Args":""},{"Uniquefunname":"public outline(const QPalette \u0026 pal)","Funname":"outline","Returntype":"public","Args":"const QPalette \u0026 pal"},{"Uniquefunname":"void polish(QApplication * app)","Funname":"polish","Returntype":"void","Args":"QApplication * app"},{"Uniquefunname":"void polish(QPalette \u0026 p)","Funname":"polish","Returntype":"void","Args":"QPalette \u0026 p"},{"Uniquefunname":"void polish(QWidget * w)","Funname":"polish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"QRect progressBarContentsRect(const QStyleOption * opt,const QWidget * widget)","Funname":"progressBarContentsRect","Returntype":"QRect","Args":"const QStyleOption * opt,const QWidget * widget"},{"Uniquefunname":"QRect progressBarGrooveRect(const QStyleOption * opt,const QWidget * widget)","Funname":"progressBarGrooveRect","Returntype":"QRect","Args":"const QStyleOption * opt,const QWidget * widget"},{"Uniquefunname":"QRect progressBarLabelRect(const QStyleOption * opt,const QWidget * widget)","Funname":"progressBarLabelRect","Returntype":"QRect","Args":"const QStyleOption * opt,const QWidget * widget"},{"Uniquefunname":"QWindow * qt_getWindow(const QWidget * widget)","Funname":"qt_getWindow","Returntype":"QWindow *","Args":"const QWidget * widget"},{"Uniquefunname":"QRect scrollbarSubControlRect(const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget)","Funname":"scrollbarSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget"},{"Uniquefunname":"QSize sizeFromContents(ContentsType type,const QStyleOption * option,const QSize \u0026 size,const QWidget * widget)","Funname":"sizeFromContents","Returntype":"QSize","Args":"ContentsType type,const QStyleOption * option,const QSize \u0026 size,const QWidget * widget"},{"Uniquefunname":"QRect sliderSubControlRect(const QStyleOptionComplex * option,SubControl subControl,const QWidget * widget)","Funname":"sliderSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * option,SubControl subControl,const QWidget * widget"},{"Uniquefunname":"QRect spinboxSubControlRect(const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget)","Funname":"spinboxSubControlRect","Returntype":"QRect","Args":"const QStyleOptionComplex * opt,SubControl sc,const QWidget * widget"},{"Uniquefunname":"QIcon standardIcon(StandardPixmap standardIcon,const QStyleOption * opt,const QWidget * widget)","Funname":"standardIcon","Returntype":"QIcon","Args":"StandardPixmap standardIcon,const QStyleOption * opt,const QWidget * widget"},{"Uniquefunname":"void startAnimation(DStyleAnimation * animation)","Funname":"startAnimation","Returntype":"void","Args":"DStyleAnimation * animation"},{"Uniquefunname":"void stopAnimation(const QObject * target)","Funname":"stopAnimation","Returntype":"void","Args":"const QObject * target"},{"Uniquefunname":"QRect subControlRect(ComplexControl cc,const QStyleOptionComplex * opt,SubControl sc,const QWidget * w)","Funname":"subControlRect","Returntype":"QRect","Args":"ComplexControl cc,const QStyleOptionComplex * opt,SubControl sc,const QWidget * w"},{"Uniquefunname":"QRect subElementRect(SubElement r,const QStyleOption * opt,const QWidget * widget)","Funname":"subElementRect","Returntype":"QRect","Args":"SubElement r,const QStyleOption * opt,const QWidget * widget"},{"Uniquefunname":"void unpolish(QApplication * app)","Funname":"unpolish","Returntype":"void","Args":"QApplication * app"},{"Uniquefunname":"void unpolish(QWidget * w)","Funname":"unpolish","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"bool widgetIsComboBoxPopupFramePrimitive(const QWidget * w)","Funname":"widgetIsComboBoxPopupFramePrimitive","Returntype":"bool","Args":"const QWidget * w"},{"Uniquefunname":" ~Style()","Funname":"~Style","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["STYLE_H"]}]}
{"Filepath":"styles/norwegianwoodstyle.h","Functions":[{"Uniquefunname":"Q_OBJECT public NorwegianWoodStyle()","Funname":"NorwegianWoodStyle","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"void drawControl(ControlElement control,const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawControl","Returntype":"void","Args":"ControlElement control,const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"void drawPrimitive(PrimitiveElement element,const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawPrimitive","Returntype":"void","Args":"PrimitiveElement element,const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"int pixelMetric(PixelMetric metric,const QStyleOption * option,const QWidget * widget)","Funname":"pixelMetric","Returntype":"int","Args":"PixelMetric metric,const QStyleOption * option,const QWidget * widget"},{"Uniquefunname":"void polish(QPalette \u0026 palette)","Funname":"polish","Returntype":"void","Args":"QPalette \u0026 palette"},{"Uniquefunname":"void polish(QWidget * widget)","Funname":"polish","Returntype":"void","Args":"QWidget * widget"},{"Uniquefunname":"QPainterPath roundRectPath(const QRect \u0026 rect)","Funname":"roundRectPath","Returntype":"QPainterPath","Args":"const QRect \u0026 rect"},{"Uniquefunname":"private setTexture(QPalette \u0026 palette,QPalette::ColorRole role,const QPixmap \u0026 pixmap)","Funname":"setTexture","Returntype":"private","Args":"QPalette \u0026 palette,QPalette::ColorRole role,const QPixmap \u0026 pixmap"},{"Uniquefunname":"int styleHint(StyleHint hint,const QStyleOption * option,const QWidget * widget,QStyleHintReturn * returnData)","Funname":"styleHint","Returntype":"int","Args":"StyleHint hint,const QStyleOption * option,const QWidget * widget,QStyleHintReturn * returnData"},{"Uniquefunname":"void unpolish(QWidget * widget)","Funname":"unpolish","Returntype":"void","Args":"QWidget * widget"}],"Records":[{"Name":"macro","Fields":["NORWEGIANWOODSTYLE_H"]}]}
{"Filepath":"styles/widgetgallery.h","Functions":[{"Uniquefunname":"void advanceProgressBar()","Funname":"advanceProgressBar","Returntype":"void","Args":""},{"Uniquefunname":"void changePalette()","Funname":"changePalette","Returntype":"void","Args":""},{"Uniquefunname":"private slots changeStyle(const QString \u0026 styleName)","Funname":"changeStyle","Returntype":"private slots","Args":"const QString \u0026 styleName"},{"Uniquefunname":"void createBottomLeftTabWidget()","Funname":"createBottomLeftTabWidget","Returntype":"void","Args":""},{"Uniquefunname":"void createBottomRightGroupBox()","Funname":"createBottomRightGroupBox","Returntype":"void","Args":""},{"Uniquefunname":"void createProgressBar()","Funname":"createProgressBar","Returntype":"void","Args":""},{"Uniquefunname":"private createTopLeftGroupBox()","Funname":"createTopLeftGroupBox","Returntype":"private","Args":""},{"Uniquefunname":"void createTopRightGroupBox()","Funname":"createTopRightGroupBox","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["WIDGETGALLERY_H"]}]}
