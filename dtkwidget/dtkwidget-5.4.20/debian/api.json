{"Filepath":"examples/dwidget-examples/collections/buttonexample.h","Functions":[{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["BUTTONEXAMPLE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/dialogexample.h","Functions":[{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["DIALOGEXAMPLE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/editexample.h","Functions":[{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["EDITEXAMPLE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/examplewindowinterface.h","Functions":[{"Uniquefunname":"public ExampleWindowInterface(QWidget * parent)","Funname":"ExampleWindowInterface","Returntype":"public","Args":"QWidget * parent"},{"Uniquefunname":"virtual QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"virtual QString","Args":""},{"Uniquefunname":"virtual int getFixedHeight()","Funname":"getFixedHeight","Returntype":"virtual int","Args":""},{"Uniquefunname":"public getTitleName()","Funname":"getTitleName","Returntype":"public","Args":""},{"Uniquefunname":"virtual ~ExampleWindowInterface()","Funname":"~ExampleWindowInterface","Returntype":"virtual","Args":""}],"Records":[{"Name":"macro","Fields":["EXAMPLEWINDOWINTERFACE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/layoutexample.h","Functions":[{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["LAYOUTEXAMPLE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/lcdnumberexample.h","Functions":[{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["LCDNUMBEREXAMPLE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/listviewexample.h","Functions":[{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["LISTVIEWEXAMPLE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/mainwindow.h","Functions":[{"Uniquefunname":"private initModel()","Funname":"initModel","Returntype":"private","Args":""},{"Uniquefunname":"protected Q_SLOTS menuItemInvoked(QAction * action)","Funname":"menuItemInvoked","Returntype":"protected Q_SLOTS","Args":"QAction * action"},{"Uniquefunname":"void onCurrentIndexChanged(const QModelIndex \u0026 index)","Funname":"onCurrentIndexChanged","Returntype":"void","Args":"const QModelIndex \u0026 index"},{"Uniquefunname":" ~MainWindow()","Funname":"~MainWindow","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["MAINWINDOW_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/menuexample.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(QColor aColor READ getAColor WRITE setAColor)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"QColor aColor READ getAColor WRITE setAColor"},{"Uniquefunname":"protected eventFilter(QObject * watched,QEvent * event)","Funname":"eventFilter","Returntype":"protected","Args":"QObject * watched,QEvent * event"},{"Uniquefunname":"QColor getAColor()","Funname":"getAColor","Returntype":"QColor","Args":""},{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""},{"Uniquefunname":"void paintRegion()","Funname":"paintRegion","Returntype":"void","Args":""},{"Uniquefunname":"void restoreAnimation()","Funname":"restoreAnimation","Returntype":"void","Args":""},{"Uniquefunname":"void setAColor(const QColor \u0026 color)","Funname":"setAColor","Returntype":"void","Args":"const QColor \u0026 color"}],"Records":[{"Name":"macro","Fields":["MENUEXAMPLE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/pagewindowinterface.h","Functions":[{"Uniquefunname":"public PageWindowInterface(QWidget * parent)","Funname":"PageWindowInterface","Returntype":"public","Args":"QWidget * parent"},{"Uniquefunname":"void addExampleWindow(ExampleWindowInterface * pExample)","Funname":"addExampleWindow","Returntype":"void","Args":"ExampleWindowInterface * pExample"},{"Uniquefunname":"virtual QWidget * doLayout(ExampleWindowInterface * pExample)","Funname":"doLayout","Returntype":"virtual QWidget *","Args":"ExampleWindowInterface * pExample"},{"Uniquefunname":"public initPageWindow()","Funname":"initPageWindow","Returntype":"public","Args":""},{"Uniquefunname":"protected mouseMoveEvent(QMouseEvent * event)","Funname":"mouseMoveEvent","Returntype":"protected","Args":"QMouseEvent * event"},{"Uniquefunname":"virtual ~PageWindowInterface()","Funname":"~PageWindowInterface","Returntype":"virtual","Args":""}],"Records":[{"Name":"macro","Fields":["PAGEWINDOWINTERFACE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/progressbarexample.h","Functions":[{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["PROGRESSBAREXAMPLE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/rubberbandexample.h","Functions":[{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""},{"Uniquefunname":"void mouseMoveEvent(QMouseEvent * event)","Funname":"mouseMoveEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"protected mousePressEvent(QMouseEvent * event)","Funname":"mousePressEvent","Returntype":"protected","Args":"QMouseEvent * event"},{"Uniquefunname":"void mouseReleaseEvent(QMouseEvent * event)","Funname":"mouseReleaseEvent","Returntype":"void","Args":"QMouseEvent * event"}],"Records":[{"Name":"macro","Fields":["RUBBERBANDEXAMPLE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/scrollbarexample.h","Functions":[{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["SCROLLBAREXAMPLE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/sliderexample.h","Functions":[{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["SLIDEREXAMPLE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/spinnerexample.h","Functions":[{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["SPINNEREXAMPLE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/tooltipexample.h","Functions":[{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["TOOLTIPEXAMPLE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/widgetexample.h","Functions":[{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["WIDGETEXAMPLE_H"]}]}
{"Filepath":"examples/dwidget-examples/collections/windowexample.h","Functions":[{"Uniquefunname":"QString getDescriptionInfo()","Funname":"getDescriptionInfo","Returntype":"QString","Args":""},{"Uniquefunname":"int getFixedHeight()","Funname":"getFixedHeight","Returntype":"int","Args":""},{"Uniquefunname":"QString getTitleName()","Funname":"getTitleName","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["WINDOWEXAMPLE_H"]}]}
{"Filepath":"src/dtkwidget_global.h","Functions":[{"Uniquefunname":"void inline dtk_windget_init_resource()","Funname":"dtk_windget_init_resource","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DTKWIDGET_DECL_DEPRECATED","DTK_WIDGET_NAMESPACE","DWIDGET_BEGIN_NAMESPACE","DWIDGET_END_NAMESPACE","DWIDGET_INIT_RESOURCE()","DWIDGET_NAMESPACE","DWIDGET_USE_NAMESPACE","D_THEME_INIT_WIDGET(className,...)","LIBDTKWIDGETSHARED_EXPORT","LIBDTKWIDGETSHARED_EXPORT"]}]}
{"Filepath":"src/platforms/mac/osxwindow.h","Functions":[{"Uniquefunname":"void HideWindowTitlebar(long winid)","Funname":"HideWindowTitlebar","Returntype":"void","Args":"long winid"}],"Records":null}
{"Filepath":"src/platforms/windows/popupmenustyle.h","Functions":[{"Uniquefunname":"Q_OBJECT public PopupMenuStyle()","Funname":"PopupMenuStyle","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"void drawControl(ControlElement control,const QStyleOption * option,QPainter * painter,const QWidget * widget)","Funname":"drawControl","Returntype":"void","Args":"ControlElement control,const QStyleOption * option,QPainter * painter,const QWidget * widget"},{"Uniquefunname":"void drawMenuItem(const QStyleOption * option,QPainter * painter)","Funname":"drawMenuItem","Returntype":"void","Args":"const QStyleOption * option,QPainter * painter"},{"Uniquefunname":"void drawMenuItemCheckedIcon(const QStyleOptionMenuItem * menuItem,QPainter * painter)","Funname":"drawMenuItemCheckedIcon","Returntype":"void","Args":"const QStyleOptionMenuItem * menuItem,QPainter * painter"},{"Uniquefunname":"void drawMenuItemIcon(const QStyleOptionMenuItem * menuItem,QPainter * painter)","Funname":"drawMenuItemIcon","Returntype":"void","Args":"const QStyleOptionMenuItem * menuItem,QPainter * painter"},{"Uniquefunname":"void drawMenuItemSubIcon(const QStyleOptionMenuItem * menuItem,QPainter * painter)","Funname":"drawMenuItemSubIcon","Returntype":"void","Args":"const QStyleOptionMenuItem * menuItem,QPainter * painter"},{"Uniquefunname":"void drawMenuItemText(const QStyleOptionMenuItem * menuItem,QPainter * painter)","Funname":"drawMenuItemText","Returntype":"void","Args":"const QStyleOptionMenuItem * menuItem,QPainter * painter"},{"Uniquefunname":"private drawScroller(const QStyleOption * option,QPainter * painter)","Funname":"drawScroller","Returntype":"private","Args":"const QStyleOption * option,QPainter * painter"},{"Uniquefunname":"void drawSeparator(const QStyleOptionMenuItem * menuItem,QPainter * painter)","Funname":"drawSeparator","Returntype":"void","Args":"const QStyleOptionMenuItem * menuItem,QPainter * painter"},{"Uniquefunname":"QPixmap getIconPixmap(const QStyle::State state,const QIcon \u0026 icon,const QSize \u0026 size)","Funname":"getIconPixmap","Returntype":"QPixmap","Args":"const QStyle::State state,const QIcon \u0026 icon,const QSize \u0026 size"},{"Uniquefunname":"QColor getItemBGColor(const QStyle::State state)","Funname":"getItemBGColor","Returntype":"QColor","Args":"const QStyle::State state"},{"Uniquefunname":"QSize getItemSize(const QStyleOption * option,const QSize \u0026 size)","Funname":"getItemSize","Returntype":"QSize","Args":"const QStyleOption * option,const QSize \u0026 size"},{"Uniquefunname":"QPixmap getSubMenuPixmap(const QStyle::State state)","Funname":"getSubMenuPixmap","Returntype":"QPixmap","Args":"const QStyle::State state"}],"Records":[{"Name":"macro","Fields":["POPUPMENUSTYLEH"]}]}
{"Filepath":"src/platforms/x11/xutil.h","Functions":[{"Uniquefunname":"D_DECL_DEPRECATED void CancelMoveWindow(const QWidget * widget,Qt::MouseButton qbutton)","Funname":"CancelMoveWindow","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget,Qt::MouseButton qbutton"},{"Uniquefunname":"D_DECL_DEPRECATED void ChangeWindowMaximizedState(const QWidget * widget,int wm_state)","Funname":"ChangeWindowMaximizedState","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget,int wm_state"},{"Uniquefunname":"D_DECL_DEPRECATED void DisableResize(const QWidget * w)","Funname":"DisableResize","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * w"},{"Uniquefunname":"D_DECL_DEPRECATED CornerEdge GetCornerEdge(const QWidget * widget,int x,int y,const QMargins \u0026 margins,int border_width)","Funname":"GetCornerEdge","Returntype":"D_DECL_DEPRECATED CornerEdge","Args":"const QWidget * widget,int x,int y,const QMargins \u0026 margins,int border_width"},{"Uniquefunname":"D_DECL_DEPRECATED bool IsCornerEdget(const QWidget * widget,int x,int y,const QMargins \u0026 margins,int border_width)","Funname":"IsCornerEdget","Returntype":"D_DECL_DEPRECATED bool","Args":"const QWidget * widget,int x,int y,const QMargins \u0026 margins,int border_width"},{"Uniquefunname":"D_DECL_DEPRECATED void MoveResizeWindow(const QWidget * widget,Qt::MouseButton qbutton,int x,int y,const QMargins \u0026 margins,int border_width)","Funname":"MoveResizeWindow","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget,Qt::MouseButton qbutton,int x,int y,const QMargins \u0026 margins,int border_width"},{"Uniquefunname":"D_DECL_DEPRECATED void MoveWindow(const QWidget * widget,Qt::MouseButton qbutton)","Funname":"MoveWindow","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget,Qt::MouseButton qbutton"},{"Uniquefunname":"D_DECL_DEPRECATED void PropagateSizeHints(const QWidget * w)","Funname":"PropagateSizeHints","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * w"},{"Uniquefunname":"D_DECL_DEPRECATED void ResetCursorShape(const QWidget * widget)","Funname":"ResetCursorShape","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget"},{"Uniquefunname":"D_DECL_DEPRECATED void SendMoveResizeMessage(const QWidget * widget,Qt::MouseButton qbutton,int action)","Funname":"SendMoveResizeMessage","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget,Qt::MouseButton qbutton,int action"},{"Uniquefunname":"D_DECL_DEPRECATED bool SetCursorShape(const QWidget * widget,int cursor_id)","Funname":"SetCursorShape","Returntype":"D_DECL_DEPRECATED bool","Args":"const QWidget * widget,int cursor_id"},{"Uniquefunname":"D_DECL_DEPRECATED void SetMouseTransparent(const QWidget * widget,bool on)","Funname":"SetMouseTransparent","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget,bool on"},{"Uniquefunname":"D_DECL_DEPRECATED void SetStayOnTop(const QWidget * widget,bool on)","Funname":"SetStayOnTop","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget,bool on"},{"Uniquefunname":"D_DECL_DEPRECATED void SetWindowExtents(const QWidget * widget,const QMargins \u0026 margins,const int resizeHandlSize)","Funname":"SetWindowExtents","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget,const QMargins \u0026 margins,const int resizeHandlSize"},{"Uniquefunname":"D_DECL_DEPRECATED void SetWindowExtents(uint wid,const QRect \u0026 windowRect,const QMargins \u0026 margins,const int resizeHandleSize)","Funname":"SetWindowExtents","Returntype":"D_DECL_DEPRECATED void","Args":"uint wid,const QRect \u0026 windowRect,const QMargins \u0026 margins,const int resizeHandleSize"},{"Uniquefunname":"D_DECL_DEPRECATED void ShowFullscreenWindow(const QWidget * widget,bool is_fullscreen)","Funname":"ShowFullscreenWindow","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget,bool is_fullscreen"},{"Uniquefunname":"D_DECL_DEPRECATED void ShowMaximizedWindow(const QWidget * widget)","Funname":"ShowMaximizedWindow","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget"},{"Uniquefunname":"D_DECL_DEPRECATED void ShowMinimizedWindow(const QWidget * widget,bool minimized)","Funname":"ShowMinimizedWindow","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget,bool minimized"},{"Uniquefunname":"D_DECL_DEPRECATED void ShowNormalWindow(const QWidget * widget)","Funname":"ShowNormalWindow","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget"},{"Uniquefunname":"D_DECL_DEPRECATED void SkipTaskbarPager(const QWidget * widget)","Funname":"SkipTaskbarPager","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget"},{"Uniquefunname":"D_DECL_DEPRECATED void StartResizing(const QWidget * w,const QPoint \u0026 globalPoint,const CornerEdge \u0026 ce)","Funname":"StartResizing","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * w,const QPoint \u0026 globalPoint,const CornerEdge \u0026 ce"},{"Uniquefunname":"D_DECL_DEPRECATED void ToggleMaximizedWindow(const QWidget * widget)","Funname":"ToggleMaximizedWindow","Returntype":"D_DECL_DEPRECATED void","Args":"const QWidget * widget"},{"Uniquefunname":"D_DECL_DEPRECATED bool UpdateCursorShape(const QWidget * widget,int x,int y,const QMargins \u0026 margins,int border_width)","Funname":"UpdateCursorShape","Returntype":"D_DECL_DEPRECATED bool","Args":"const QWidget * widget,int x,int y,const QMargins \u0026 margins,int border_width"}],"Records":[{"Name":"enum:XCursorType","Fields":["kArrow","kBottom","kBottomLeft","kBottomRight","kInvalid","kLeft","kRight","kTop","kTopLeft","kTopRight"]},{"Name":"enum:CornerEdge","Fields":["kBottom","kBottomLeft","kBottomRight","kInvalid","kLeft","kRight","kTop","kTopLeft","kTopRight"]}]}
{"Filepath":"src/util/dapplicationsettings.h","Functions":[{"Uniquefunname":"    D_DECLARE_PRIVATE(DApplicationSettings)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DApplicationSettings"}],"Records":[{"Name":"macro","Fields":["DAPPLICATIONSETTINGS_H"]}]}
{"Filepath":"src/util/ddesktopservices.h","Functions":[{"Uniquefunname":"QString errorMessage()","Funname":"errorMessage","Returntype":"QString","Args":""},{"Uniquefunname":"QString getNameByEffectType(const SystemSoundEffect \u0026 effect)","Funname":"getNameByEffectType","Returntype":"QString","Args":"const SystemSoundEffect \u0026 effect"},{"Uniquefunname":"bool playSystemSoundEffect(const QString \u0026 name)","Funname":"playSystemSoundEffect","Returntype":"bool","Args":"const QString \u0026 name"},{"Uniquefunname":"bool playSystemSoundEffect(const SystemSoundEffect \u0026 effect)","Funname":"playSystemSoundEffect","Returntype":"bool","Args":"const SystemSoundEffect \u0026 effect"},{"Uniquefunname":"bool previewSystemSoundEffect(const QString \u0026 name)","Funname":"previewSystemSoundEffect","Returntype":"bool","Args":"const QString \u0026 name"},{"Uniquefunname":"bool previewSystemSoundEffect(const SystemSoundEffect \u0026 effect)","Funname":"previewSystemSoundEffect","Returntype":"bool","Args":"const SystemSoundEffect \u0026 effect"},{"Uniquefunname":"bool trash(QString localFilePath)","Funname":"trash","Returntype":"bool","Args":"QString localFilePath"},{"Uniquefunname":"bool trash(QUrl urlstartupId)","Funname":"trash","Returntype":"bool","Args":"QUrl urlstartupId"},{"Uniquefunname":"bool trash(const QList\u003cQString\u003e localFilePaths)","Funname":"trash","Returntype":"bool","Args":"const QList\u003cQString\u003e localFilePaths"},{"Uniquefunname":"bool trash(const QList\u003cQUrl\u003e urls)","Funname":"trash","Returntype":"bool","Args":"const QList\u003cQUrl\u003e urls"}],"Records":[{"Name":"macro","Fields":["DDESKTOPSERVICES_H"]},{"Name":"enum:SystemSoundEffect","Fields":["SEE_Screenshot","SSE_BootUp","SSE_DeviceAdded","SSE_DeviceRemoved","SSE_EmptyTrash","SSE_Error","SSE_Logout","SSE_LowBattery","SSE_Notifications","SSE_PlugIn","SSE_PlugOut","SSE_SendFileComplete","SSE_Shutdown","SSE_VolumeChange","SSE_WakeUp"]}]}
{"Filepath":"src/util/dfileiconprovider.h","Functions":[{"Uniquefunname":"public DFileIconProvider()","Funname":"DFileIconProvider","Returntype":"public","Args":""},{"Uniquefunname":"DFileIconProvider * globalProvider()","Funname":"globalProvider","Returntype":"DFileIconProvider *","Args":""},{"Uniquefunname":"QIcon icon(const QFileInfo \u0026 info)","Funname":"icon","Returntype":"QIcon","Args":"const QFileInfo \u0026 info"},{"Uniquefunname":"QIcon icon(const QFileInfo \u0026 info,const QIcon \u0026 feedback)","Funname":"icon","Returntype":"QIcon","Args":"const QFileInfo \u0026 info,const QIcon \u0026 feedback"},{"Uniquefunname":"virtual ~DFileIconProvider()","Funname":"~DFileIconProvider","Returntype":"virtual","Args":""}],"Records":[{"Name":"macro","Fields":["DFILEICONPROVIDER_H"]}]}
{"Filepath":"src/util/dhidpihelper.h","Functions":[{"Uniquefunname":"public loadNxPixmap(const QString \u0026 fileName)","Funname":"loadNxPixmap","Returntype":"public","Args":"const QString \u0026 fileName"}],"Records":[{"Name":"macro","Fields":["DHIDPIHELPER_H"]}]}
{"Filepath":"src/util/dregionmonitor.h","Functions":[{"Uniquefunname":"    D_DECLARE_PRIVATE(DRegionMonitor)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DRegionMonitor"},{"Uniquefunname":"    Q_ENUM(CoordinateType)","Funname":"Q_ENUM","Returntype":"","Args":"CoordinateType"},{"Uniquefunname":"Q_SIGNALS buttonPress(const QPoint \u0026 p,const int flag)","Funname":"buttonPress","Returntype":"Q_SIGNALS","Args":"const QPoint \u0026 p,const int flag"},{"Uniquefunname":"void buttonRelease(const QPoint \u0026 p,const int flag)","Funname":"buttonRelease","Returntype":"void","Args":"const QPoint \u0026 p,const int flag"},{"Uniquefunname":"CoordinateType coordinateType()","Funname":"coordinateType","Returntype":"CoordinateType","Args":""},{"Uniquefunname":"void coordinateTypeChanged(CoordinateType type)","Funname":"coordinateTypeChanged","Returntype":"void","Args":"CoordinateType type"},{"Uniquefunname":"void cursorMove(const QPoint \u0026 p)","Funname":"cursorMove","Returntype":"void","Args":"const QPoint \u0026 p"},{"Uniquefunname":"void keyPress(const QString \u0026 keyname)","Funname":"keyPress","Returntype":"void","Args":"const QString \u0026 keyname"},{"Uniquefunname":"void keyRelease(const QString \u0026 keyname)","Funname":"keyRelease","Returntype":"void","Args":"const QString \u0026 keyname"},{"Uniquefunname":"    inline void registerRegion(const QRegion \u0026region)","Funname":"registerRegion","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"public Q_SLOTS registerRegion()","Funname":"registerRegion","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"void setCoordinateType(CoordinateType type)","Funname":"setCoordinateType","Returntype":"void","Args":"CoordinateType type"},{"Uniquefunname":"void setWatchedRegion(const QRegion \u0026 region)","Funname":"setWatchedRegion","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void unregisterRegion()","Funname":"unregisterRegion","Returntype":"void","Args":""},{"Uniquefunname":"QRegion watchedRegion()","Funname":"watchedRegion","Returntype":"QRegion","Args":""}],"Records":[{"Name":"enum:WatchedFlags","Fields":["Button_Left","Button_Right"]},{"Name":"macro","Fields":["DREGIONMONITOR_H_DWIDGET"]},{"Name":"enum:CoordinateType","Fields":["Original","ScaleRatio"]}]}
{"Filepath":"src/util/dthumbnailprovider.h","Functions":[{"Uniquefunname":"QString createThumbnail(const QFileInfo \u0026 info,Size size)","Funname":"createThumbnail","Returntype":"QString","Args":"const QFileInfo \u0026 info,Size size"},{"Uniquefunname":"void createThumbnailFailed(const QString \u0026 sourceFilePath)","Funname":"createThumbnailFailed","Returntype":"void","Args":"const QString \u0026 sourceFilePath"},{"Uniquefunname":"void createThumbnailFinished(const QString \u0026 sourceFilePath,const QString \u0026 thumbnailPath)","Funname":"createThumbnailFinished","Returntype":"void","Args":"const QString \u0026 sourceFilePath,const QString \u0026 thumbnailPath"},{"Uniquefunname":"qint64 defaultSizeLimit()","Funname":"defaultSizeLimit","Returntype":"qint64","Args":""},{"Uniquefunname":"QString errorString()","Funname":"errorString","Returntype":"QString","Args":""},{"Uniquefunname":"bool hasThumbnail(const QFileInfo \u0026 info)","Funname":"hasThumbnail","Returntype":"bool","Args":"const QFileInfo \u0026 info"},{"Uniquefunname":"bool hasThumbnail(const QMimeType \u0026 mimeType)","Funname":"hasThumbnail","Returntype":"bool","Args":"const QMimeType \u0026 mimeType"},{"Uniquefunname":"DThumbnailProvider * instance()","Funname":"instance","Returntype":"DThumbnailProvider *","Args":""},{"Uniquefunname":"void removeInProduceQueue(const QFileInfo \u0026 info,Size size)","Funname":"removeInProduceQueue","Returntype":"void","Args":"const QFileInfo \u0026 info,Size size"},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"void setDefaultSizeLimit(qint64 size)","Funname":"setDefaultSizeLimit","Returntype":"void","Args":"qint64 size"},{"Uniquefunname":"void setSizeLimit(const QMimeType \u0026 mimeType,qint64 size)","Funname":"setSizeLimit","Returntype":"void","Args":"const QMimeType \u0026 mimeType,qint64 size"},{"Uniquefunname":"qint64 sizeLimit(const QMimeType \u0026 mimeType)","Funname":"sizeLimit","Returntype":"qint64","Args":"const QMimeType \u0026 mimeType"},{"Uniquefunname":"Q_SIGNALS thumbnailChanged(const QString \u0026 sourceFilePath,const QString \u0026 thumbnailPath)","Funname":"thumbnailChanged","Returntype":"Q_SIGNALS","Args":"const QString \u0026 sourceFilePath,const QString \u0026 thumbnailPath"},{"Uniquefunname":"QString thumbnailFilePath(const QFileInfo \u0026 info,Size size)","Funname":"thumbnailFilePath","Returntype":"QString","Args":"const QFileInfo \u0026 info,Size size"},{"Uniquefunname":" ~DThumbnailProvider()","Funname":"~DThumbnailProvider","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DFILETHUMBNAILPROVIDER_H"]},{"Name":"enum:Size","Fields":["Large","Normal","Small"]}]}
{"Filepath":"src/util/dtrashmanager.h","Functions":[{"Uniquefunname":"protected DTrashManager()","Funname":"DTrashManager","Returntype":"protected","Args":""},{"Uniquefunname":"bool cleanTrash()","Funname":"cleanTrash","Returntype":"bool","Args":""},{"Uniquefunname":"public instance()","Funname":"instance","Returntype":"public","Args":""},{"Uniquefunname":"bool trashIsEmpty()","Funname":"trashIsEmpty","Returntype":"bool","Args":""}],"Records":[{"Name":"macro","Fields":["DTRASHMANAGER_H"]}]}
{"Filepath":"src/util/dwidgetutil.h","Functions":[{"Uniquefunname":"void moveToCenter(QWidget * w)","Funname":"moveToCenter","Returntype":"void","Args":"QWidget * w"}],"Records":[{"Name":"macro","Fields":["DUTILITY_H"]}]}
{"Filepath":"src/util/private/dregionmonitor_p.h","Functions":[{"Uniquefunname":"virtual ~DRegionMonitorPrivate()","Funname":"~DRegionMonitorPrivate","Returntype":"virtual","Args":""}],"Records":[{"Name":"macro","Fields":["DREGIONMONITOR_P_H_DWIDGET"]}]}
{"Filepath":"src/widgets/daboutdialog.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(QString windowTitle READ windowTitle WRITE setWindowTitle)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"QString windowTitle READ windowTitle WRITE setWindowTitle"},{"Uniquefunname":"QString acknowledgementLink()","Funname":"acknowledgementLink","Returntype":"QString","Args":""},{"Uniquefunname":"const QPixmap * companyLogo()","Funname":"companyLogo","Returntype":"const QPixmap *","Args":""},{"Uniquefunname":"QString description()","Funname":"description","Returntype":"QString","Args":""},{"Uniquefunname":"protected keyPressEvent(QKeyEvent * event)","Funname":"keyPressEvent","Returntype":"protected","Args":"QKeyEvent * event"},{"Uniquefunname":"QString license()","Funname":"license","Returntype":"QString","Args":""},{"Uniquefunname":"QString productName()","Funname":"productName","Returntype":"QString","Args":""},{"Uniquefunname":"void setAcknowledgementLink(const QString \u0026 acknowledgementLink)","Funname":"setAcknowledgementLink","Returntype":"void","Args":"const QString \u0026 acknowledgementLink"},{"Uniquefunname":"void setAcknowledgementVisible(bool visible)","Funname":"setAcknowledgementVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setCompanyLogo(const QPixmap \u0026 companyLogo)","Funname":"setCompanyLogo","Returntype":"void","Args":"const QPixmap \u0026 companyLogo"},{"Uniquefunname":"void setDescription(const QString \u0026 description)","Funname":"setDescription","Returntype":"void","Args":"const QString \u0026 description"},{"Uniquefunname":"void setLicense(const QString \u0026 license)","Funname":"setLicense","Returntype":"void","Args":"const QString \u0026 license"},{"Uniquefunname":"void setProductIcon(const QIcon \u0026 icon)","Funname":"setProductIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setProductName(const QString \u0026 productName)","Funname":"setProductName","Returntype":"void","Args":"const QString \u0026 productName"},{"Uniquefunname":"void setVersion(const QString \u0026 version)","Funname":"setVersion","Returntype":"void","Args":"const QString \u0026 version"},{"Uniquefunname":"void setWebsiteLink(const QString \u0026 websiteLink)","Funname":"setWebsiteLink","Returntype":"void","Args":"const QString \u0026 websiteLink"},{"Uniquefunname":"void setWebsiteName(const QString \u0026 websiteName)","Funname":"setWebsiteName","Returntype":"void","Args":"const QString \u0026 websiteName"},{"Uniquefunname":"public Q_SLOTS setWindowTitle(const QString \u0026 windowTitle)","Funname":"setWindowTitle","Returntype":"public Q_SLOTS","Args":"const QString \u0026 windowTitle"},{"Uniquefunname":"void showEvent(QShowEvent * event)","Funname":"showEvent","Returntype":"void","Args":"QShowEvent * event"},{"Uniquefunname":"QString version()","Funname":"version","Returntype":"QString","Args":""},{"Uniquefunname":"QString websiteLink()","Funname":"websiteLink","Returntype":"QString","Args":""},{"Uniquefunname":"QString websiteName()","Funname":"websiteName","Returntype":"QString","Args":""},{"Uniquefunname":"QString windowTitle()","Funname":"windowTitle","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["DABOUTDIALOG_H"]}]}
{"Filepath":"src/widgets/dabstractdialog.h","Functions":[{"Uniquefunname":"    Q_ENUMS(DisplayPostion)","Funname":"Q_ENUMS","Returntype":"DisplayPosition","Args":"DisplayPostion"},{"Uniquefunname":"DisplayPosition displayPosition()","Funname":"displayPosition","Returntype":"DisplayPosition","Args":""},{"Uniquefunname":"protected mouseMoveEvent(QMouseEvent * event)","Funname":"mouseMoveEvent","Returntype":"protected","Args":"QMouseEvent * event"},{"Uniquefunname":"void mousePressEvent(QMouseEvent * event)","Funname":"mousePressEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"void mouseReleaseEvent(QMouseEvent * event)","Funname":"mouseReleaseEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"    inline void move(int x, int y)","Funname":"move","Returntype":"void","Args":"int x,int y"},{"Uniquefunname":"void move(const QPoint \u0026 pos)","Funname":"move","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"public Q_SLOTS moveToCenter()","Funname":"moveToCenter","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"void moveToCenterByRect(const QRect \u0026 rect)","Funname":"moveToCenterByRect","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void moveToTopRight()","Funname":"moveToTopRight","Returntype":"void","Args":""},{"Uniquefunname":"void moveToTopRightByRect(const QRect \u0026 rect)","Funname":"moveToTopRightByRect","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void resizeEvent(QResizeEvent * event)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * event"},{"Uniquefunname":"void setDisplayPosition(DisplayPosition displayPosition)","Funname":"setDisplayPosition","Returntype":"void","Args":"DisplayPosition displayPosition"},{"Uniquefunname":"    inline void setGeometry(int x, int y, int width, int height)","Funname":"setGeometry","Returntype":"void","Args":"int x,int y,int width,int height"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"void showEvent(QShowEvent * event)","Funname":"showEvent","Returntype":"void","Args":"QShowEvent * event"},{"Uniquefunname":"Q_SIGNALS sizeChanged(QSize size)","Funname":"sizeChanged","Returntype":"Q_SIGNALS","Args":"QSize size"}],"Records":[{"Name":"enum:DisplayPosition","Fields":["Center","TopRight"]},{"Name":"macro","Fields":["DABSTRACTDIALOG_H"]},{"Name":"enum:DisplayPostion","Fields":["DisplayCenter","DisplayTopRight"]}]}
{"Filepath":"src/widgets/dalertcontrol.h","Functions":[{"Uniquefunname":"protected DAlertControl(DAlertControlPrivate \u0026 d,QObject * parent)","Funname":"DAlertControl","Returntype":"protected","Args":"DAlertControlPrivate \u0026 d,QObject * parent"},{"Uniquefunname":"    Q_DISABLE_COPY(DAlertControl)","Funname":"Q_DISABLE_COPY","Returntype":"Q_OBJECT","Args":"DAlertControl"},{"Uniquefunname":"Q_SIGNALS alertChanged(bool alert)","Funname":"alertChanged","Returntype":"Q_SIGNALS","Args":"bool alert"},{"Uniquefunname":"QColor alertColor()","Funname":"alertColor","Returntype":"QColor","Args":""},{"Uniquefunname":"QColor defaultAlertColor()","Funname":"defaultAlertColor","Returntype":"QColor","Args":""},{"Uniquefunname":"bool eventFilter(QObject * watched,QEvent * event)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * watched,QEvent * event"},{"Uniquefunname":"void hideAlertMessage()","Funname":"hideAlertMessage","Returntype":"void","Args":""},{"Uniquefunname":"bool isAlert()","Funname":"isAlert","Returntype":"bool","Args":""},{"Uniquefunname":"Qt messageAlignment()","Funname":"messageAlignment","Returntype":"Qt","Args":""},{"Uniquefunname":"void setAlert(bool isAlert)","Funname":"setAlert","Returntype":"void","Args":"bool isAlert"},{"Uniquefunname":"void setAlertColor(QColor c)","Funname":"setAlertColor","Returntype":"void","Args":"QColor c"},{"Uniquefunname":"void setMessageAlignment(Qt::Alignment alignment)","Funname":"setMessageAlignment","Returntype":"void","Args":"Qt::Alignment alignment"}],"Records":[{"Name":"macro","Fields":["DALERTCONTROL_H"]}]}
{"Filepath":"src/widgets/danchors.h","Functions":[{"Uniquefunname":" DAnchorInfo(DAnchorsBase * b,const Qt::AnchorPoint \u0026 t)","Funname":"DAnchorInfo","Returntype":"","Args":"DAnchorsBase * b,const Qt::AnchorPoint \u0026 t"},{"Uniquefunname":" DAnchorInfo::DAnchorInfo(DAnchorsBase * b,const Qt::AnchorPoint \u0026 t)","Funname":"DAnchorInfo::DAnchorInfo","Returntype":"","Args":"DAnchorsBase * b,const Qt::AnchorPoint \u0026 t"},{"Uniquefunname":"public DAnchors()","Funname":"DAnchors","Returntype":"public","Args":""},{"Uniquefunname":" DAnchors(T * w)","Funname":"DAnchors","Returntype":"","Args":"T * w"},{"Uniquefunname":" DAnchors(const DAnchors \u0026 me)","Funname":"DAnchors","Returntype":"","Args":"const DAnchors \u0026 me"},{"Uniquefunname":"private DAnchorsBase(QWidget * w,bool)","Funname":"DAnchorsBase","Returntype":"private","Args":"QWidget * w,bool"},{"Uniquefunname":"    Q_PROPERTY(QWidget *target READ target CONSTANT)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"QWidget * target READ target CONSTANT"},{"Uniquefunname":"int alignWhenCentered()","Funname":"alignWhenCentered","Returntype":"int","Args":""},{"Uniquefunname":"void alignWhenCenteredChanged(bool alignWhenCentered)","Funname":"alignWhenCenteredChanged","Returntype":"void","Args":"bool alignWhenCentered"},{"Uniquefunname":"const DAnchorsBase * anchors()","Funname":"anchors","Returntype":"const DAnchorsBase *","Args":""},{"Uniquefunname":"const DAnchorInfo * bottom()","Funname":"bottom","Returntype":"const DAnchorInfo *","Args":""},{"Uniquefunname":"void bottomChanged(const DAnchorInfo * bottom)","Funname":"bottomChanged","Returntype":"void","Args":"const DAnchorInfo * bottom"},{"Uniquefunname":"int bottomMargin()","Funname":"bottomMargin","Returntype":"int","Args":""},{"Uniquefunname":"void bottomMarginChanged(int bottomMargin)","Funname":"bottomMarginChanged","Returntype":"void","Args":"int bottomMargin"},{"Uniquefunname":"QWidget * centerIn()","Funname":"centerIn","Returntype":"QWidget *","Args":""},{"Uniquefunname":"void centerInChanged(QWidget * centerIn)","Funname":"centerInChanged","Returntype":"void","Args":"QWidget * centerIn"},{"Uniquefunname":"void clearAnchors(const QWidget * w)","Funname":"clearAnchors","Returntype":"void","Args":"const QWidget * w"},{"Uniquefunname":"bool enabled()","Funname":"enabled","Returntype":"bool","Args":""},{"Uniquefunname":"Q_SIGNALS enabledChanged(bool enabled)","Funname":"enabledChanged","Returntype":"Q_SIGNALS","Args":"bool enabled"},{"Uniquefunname":"DEnhancedWidget * enhancedWidget()","Funname":"enhancedWidget","Returntype":"DEnhancedWidget *","Args":""},{"Uniquefunname":"AnchorError errorCode()","Funname":"errorCode","Returntype":"AnchorError","Args":""},{"Uniquefunname":"QString errorString()","Funname":"errorString","Returntype":"QString","Args":""},{"Uniquefunname":"QWidget * fill()","Funname":"fill","Returntype":"QWidget *","Args":""},{"Uniquefunname":"void fillChanged(QWidget * fill)","Funname":"fillChanged","Returntype":"void","Args":"QWidget * fill"},{"Uniquefunname":"DAnchorsBase * getAnchorBaseByWidget(const QWidget * w)","Funname":"getAnchorBaseByWidget","Returntype":"DAnchorsBase *","Args":"const QWidget * w"},{"Uniquefunname":"const DAnchorInfo * horizontalCenter()","Funname":"horizontalCenter","Returntype":"const DAnchorInfo *","Args":""},{"Uniquefunname":"void horizontalCenterChanged(const DAnchorInfo * horizontalCenter)","Funname":"horizontalCenterChanged","Returntype":"void","Args":"const DAnchorInfo * horizontalCenter"},{"Uniquefunname":"int horizontalCenterOffset()","Funname":"horizontalCenterOffset","Returntype":"int","Args":""},{"Uniquefunname":"void horizontalCenterOffsetChanged(int horizontalCenterOffset)","Funname":"horizontalCenterOffsetChanged","Returntype":"void","Args":"int horizontalCenterOffset"},{"Uniquefunname":" init(m_widget)","Funname":"init","Returntype":"","Args":"m_widget"},{"Uniquefunname":" init(w)","Funname":"init","Returntype":"","Args":"w"},{"Uniquefunname":"protected init(QWidget * w)","Funname":"init","Returntype":"protected","Args":"QWidget * w"},{"Uniquefunname":"bool isBinding(const DAnchorInfo * info)","Funname":"isBinding","Returntype":"bool","Args":"const DAnchorInfo * info"},{"Uniquefunname":"const DAnchorInfo * left()","Funname":"left","Returntype":"const DAnchorInfo *","Args":""},{"Uniquefunname":"void leftChanged(const DAnchorInfo * left)","Funname":"leftChanged","Returntype":"void","Args":"const DAnchorInfo * left"},{"Uniquefunname":"int leftMargin()","Funname":"leftMargin","Returntype":"int","Args":""},{"Uniquefunname":"void leftMarginChanged(int leftMargin)","Funname":"leftMarginChanged","Returntype":"void","Args":"int leftMargin"},{"Uniquefunname":"int margins()","Funname":"margins","Returntype":"int","Args":""},{"Uniquefunname":"void marginsChanged(int margins)","Funname":"marginsChanged","Returntype":"void","Args":"int margins"},{"Uniquefunname":"void moveBottom(int arg)","Funname":"moveBottom","Returntype":"void","Args":"int arg"},{"Uniquefunname":"void moveCenter(const QPoint \u0026 arg)","Funname":"moveCenter","Returntype":"void","Args":"const QPoint \u0026 arg"},{"Uniquefunname":"void moveHorizontalCenter(int arg)","Funname":"moveHorizontalCenter","Returntype":"void","Args":"int arg"},{"Uniquefunname":"void moveLeft(int arg)","Funname":"moveLeft","Returntype":"void","Args":"int arg"},{"Uniquefunname":"void moveRight(int arg)","Funname":"moveRight","Returntype":"void","Args":"int arg"},{"Uniquefunname":"void moveTop(int arg)","Funname":"moveTop","Returntype":"void","Args":"int arg"},{"Uniquefunname":"void moveVerticalCenter(int arg)","Funname":"moveVerticalCenter","Returntype":"void","Args":"int arg"},{"Uniquefunname":"const DAnchorInfo * right()","Funname":"right","Returntype":"const DAnchorInfo *","Args":""},{"Uniquefunname":"void rightChanged(const DAnchorInfo * right)","Funname":"rightChanged","Returntype":"void","Args":"const DAnchorInfo * right"},{"Uniquefunname":"int rightMargin()","Funname":"rightMargin","Returntype":"int","Args":""},{"Uniquefunname":"void rightMarginChanged(int rightMargin)","Funname":"rightMarginChanged","Returntype":"void","Args":"int rightMargin"},{"Uniquefunname":"void setAlignWhenCentered(bool alignWhenCentered)","Funname":"setAlignWhenCentered","Returntype":"void","Args":"bool alignWhenCentered"},{"Uniquefunname":"bool setAnchor(const Qt::AnchorPoint \u0026 p,QWidget * target,const Qt::AnchorPoint \u0026 point)","Funname":"setAnchor","Returntype":"bool","Args":"const Qt::AnchorPoint \u0026 p,QWidget * target,const Qt::AnchorPoint \u0026 point"},{"Uniquefunname":"bool setAnchor(QWidget * w,const Qt::AnchorPoint \u0026 p,QWidget * target,const Qt::AnchorPoint \u0026 point)","Funname":"setAnchor","Returntype":"bool","Args":"QWidget * w,const Qt::AnchorPoint \u0026 p,QWidget * target,const Qt::AnchorPoint \u0026 point"},{"Uniquefunname":"bool setBottom(const DAnchorInfo * bottom)","Funname":"setBottom","Returntype":"bool","Args":"const DAnchorInfo * bottom"},{"Uniquefunname":"void setBottom(int arg,Qt::AnchorPoint point)","Funname":"setBottom","Returntype":"void","Args":"int arg,Qt::AnchorPoint point"},{"Uniquefunname":"void setBottomMargin(int bottomMargin)","Funname":"setBottomMargin","Returntype":"void","Args":"int bottomMargin"},{"Uniquefunname":"bool setCenterIn(DAnchorsBase * centerIn)","Funname":"setCenterIn","Returntype":"bool","Args":"DAnchorsBase * centerIn"},{"Uniquefunname":"bool setCenterIn(QWidget * centerIn)","Funname":"setCenterIn","Returntype":"bool","Args":"QWidget * centerIn"},{"Uniquefunname":"public Q_SLOTS setEnabled(bool enabled)","Funname":"setEnabled","Returntype":"public Q_SLOTS","Args":"bool enabled"},{"Uniquefunname":"bool setFill(DAnchorsBase * fill)","Funname":"setFill","Returntype":"bool","Args":"DAnchorsBase * fill"},{"Uniquefunname":"bool setFill(QWidget * fill)","Funname":"setFill","Returntype":"bool","Args":"QWidget * fill"},{"Uniquefunname":"bool setHorizontalCenter(const DAnchorInfo * horizontalCenter)","Funname":"setHorizontalCenter","Returntype":"bool","Args":"const DAnchorInfo * horizontalCenter"},{"Uniquefunname":"void setHorizontalCenter(int arg,Qt::AnchorPoint point)","Funname":"setHorizontalCenter","Returntype":"void","Args":"int arg,Qt::AnchorPoint point"},{"Uniquefunname":"void setHorizontalCenterOffset(int horizontalCenterOffset)","Funname":"setHorizontalCenterOffset","Returntype":"void","Args":"int horizontalCenterOffset"},{"Uniquefunname":"bool setLeft(const DAnchorInfo * left)","Funname":"setLeft","Returntype":"bool","Args":"const DAnchorInfo * left"},{"Uniquefunname":"void setLeft(int arg,Qt::AnchorPoint point)","Funname":"setLeft","Returntype":"void","Args":"int arg,Qt::AnchorPoint point"},{"Uniquefunname":"void setLeftMargin(int leftMargin)","Funname":"setLeftMargin","Returntype":"void","Args":"int leftMargin"},{"Uniquefunname":"void setMargins(int margins)","Funname":"setMargins","Returntype":"void","Args":"int margins"},{"Uniquefunname":"bool setRight(const DAnchorInfo * right)","Funname":"setRight","Returntype":"bool","Args":"const DAnchorInfo * right"},{"Uniquefunname":"void setRight(int arg,Qt::AnchorPoint point)","Funname":"setRight","Returntype":"void","Args":"int arg,Qt::AnchorPoint point"},{"Uniquefunname":"void setRightMargin(int rightMargin)","Funname":"setRightMargin","Returntype":"void","Args":"int rightMargin"},{"Uniquefunname":"bool setTop(const DAnchorInfo * top)","Funname":"setTop","Returntype":"bool","Args":"const DAnchorInfo * top"},{"Uniquefunname":"void setTop(int arg,Qt::AnchorPoint point)","Funname":"setTop","Returntype":"void","Args":"int arg,Qt::AnchorPoint point"},{"Uniquefunname":"void setTopMargin(int topMargin)","Funname":"setTopMargin","Returntype":"void","Args":"int topMargin"},{"Uniquefunname":"bool setVerticalCenter(const DAnchorInfo * verticalCenter)","Funname":"setVerticalCenter","Returntype":"bool","Args":"const DAnchorInfo * verticalCenter"},{"Uniquefunname":"void setVerticalCenter(int arg,Qt::AnchorPoint point)","Funname":"setVerticalCenter","Returntype":"void","Args":"int arg,Qt::AnchorPoint point"},{"Uniquefunname":"void setVerticalCenterOffset(int verticalCenterOffset)","Funname":"setVerticalCenterOffset","Returntype":"void","Args":"int verticalCenterOffset"},{"Uniquefunname":"QWidget * target()","Funname":"target","Returntype":"QWidget *","Args":""},{"Uniquefunname":"const DAnchorInfo * top()","Funname":"top","Returntype":"const DAnchorInfo *","Args":""},{"Uniquefunname":"void topChanged(const DAnchorInfo * top)","Funname":"topChanged","Returntype":"void","Args":"const DAnchorInfo * top"},{"Uniquefunname":"int topMargin()","Funname":"topMargin","Returntype":"int","Args":""},{"Uniquefunname":"void topMarginChanged(int topMargin)","Funname":"topMarginChanged","Returntype":"void","Args":"int topMargin"},{"Uniquefunname":"void updateCenterIn()","Funname":"updateCenterIn","Returntype":"void","Args":""},{"Uniquefunname":"void updateFill()","Funname":"updateFill","Returntype":"void","Args":""},{"Uniquefunname":"void updateHorizontal()","Funname":"updateHorizontal","Returntype":"void","Args":""},{"Uniquefunname":"private Q_SLOTS updateVertical()","Funname":"updateVertical","Returntype":"private Q_SLOTS","Args":""},{"Uniquefunname":"const DAnchorInfo * verticalCenter()","Funname":"verticalCenter","Returntype":"const DAnchorInfo *","Args":""},{"Uniquefunname":"void verticalCenterChanged(const DAnchorInfo * verticalCenter)","Funname":"verticalCenterChanged","Returntype":"void","Args":"const DAnchorInfo * verticalCenter"},{"Uniquefunname":"int verticalCenterOffset()","Funname":"verticalCenterOffset","Returntype":"int","Args":""},{"Uniquefunname":"void verticalCenterOffsetChanged(int verticalCenterOffset)","Funname":"verticalCenterOffsetChanged","Returntype":"void","Args":"int verticalCenterOffset"},{"Uniquefunname":"T * widget()","Funname":"widget","Returntype":"T *","Args":""},{"Uniquefunname":" ~DAnchorsBase()","Funname":"~DAnchorsBase","Returntype":"","Args":""}],"Records":[{"Name":"enum:AnchorError","Fields":["Conflict","LoopBind","NoError","PointInvalid","TargetInvalid"]},{"Name":"macro","Fields":["DANCHORS_H"]},{"Name":"struct:DAnchorInfo","Fields":["DAnchorsBase * DAnchorInfo::base","const DAnchorInfo * DAnchorInfo::targetInfo","Qt::AnchorPoint DAnchorInfo::type"]}]}
{"Filepath":"src/widgets/dapplication.h","Functions":[{"Uniquefunname":" DApplication(int \u0026 argc,char ** argv)","Funname":"DApplication","Returntype":"","Args":"int \u0026 argc,char ** argv"},{"Uniquefunname":"    D_DECLARE_PRIVATE(DApplication)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DApplication"},{"Uniquefunname":"public _DtkBuildVersion()","Funname":"_DtkBuildVersion","Returntype":"public","Args":""},{"Uniquefunname":"DAboutDialog * aboutDialog()","Funname":"aboutDialog","Returntype":"DAboutDialog *","Args":""},{"Uniquefunname":"QString applicationAcknowledgementPage()","Funname":"applicationAcknowledgementPage","Returntype":"QString","Args":""},{"Uniquefunname":"bool applicationAcknowledgementVisible()","Funname":"applicationAcknowledgementVisible","Returntype":"bool","Args":""},{"Uniquefunname":"QString applicationDescription()","Funname":"applicationDescription","Returntype":"QString","Args":""},{"Uniquefunname":"QString applicationHomePage()","Funname":"applicationHomePage","Returntype":"QString","Args":""},{"Uniquefunname":"QString applicationLicense()","Funname":"applicationLicense","Returntype":"QString","Args":""},{"Uniquefunname":"bool autoActivateWindows()","Funname":"autoActivateWindows","Returntype":"bool","Args":""},{"Uniquefunname":"int buildDtkVersion()","Funname":"buildDtkVersion","Returntype":"int","Args":""},{"Uniquefunname":"    static inline QString buildVersion(const QString \u0026fallbackVersion)","Funname":"buildVersion","Returntype":"QString","Args":"const QString \u0026 fallbackVersion"},{"Uniquefunname":"void customQtThemeConfigPath(const QString \u0026 path)","Funname":"customQtThemeConfigPath","Returntype":"void","Args":"const QString \u0026 path"},{"Uniquefunname":"void customQtThemeConfigPathByUserHome(const QString \u0026 home)","Funname":"customQtThemeConfigPathByUserHome","Returntype":"void","Args":"const QString \u0026 home"},{"Uniquefunname":"QString customizedQtThemeConfigPath()","Funname":"customizedQtThemeConfigPath","Returntype":"QString","Args":""},{"Uniquefunname":"virtual void handleAboutAction()","Funname":"handleAboutAction","Returntype":"virtual void","Args":""},{"Uniquefunname":"protected handleHelpAction()","Funname":"handleHelpAction","Returntype":"protected","Args":""},{"Uniquefunname":"virtual void handleQuitAction()","Funname":"handleQuitAction","Returntype":"virtual void","Args":""},{"Uniquefunname":"void iconThemeChanged()","Funname":"iconThemeChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool isDXcbPlatform()","Funname":"isDXcbPlatform","Returntype":"bool","Args":""},{"Uniquefunname":"D_DECL_DEPRECATED bool loadDXcbPlugin()","Funname":"loadDXcbPlugin","Returntype":"D_DECL_DEPRECATED bool","Args":""},{"Uniquefunname":"Q_SIGNALS newInstanceStarted()","Funname":"newInstanceStarted","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"public notify(QObject * obj,QEvent * event)","Funname":"notify","Returntype":"public","Args":"QObject * obj,QEvent * event"},{"Uniquefunname":"const QIcon \u0026 productIcon()","Funname":"productIcon","Returntype":"const QIcon \u0026","Args":""},{"Uniquefunname":"QString productName()","Funname":"productName","Returntype":"QString","Args":""},{"Uniquefunname":"void registerDDESession()","Funname":"registerDDESession","Returntype":"void","Args":""},{"Uniquefunname":"int runtimeDtkVersion()","Funname":"runtimeDtkVersion","Returntype":"int","Args":""},{"Uniquefunname":"void screenDevicePixelRatioChanged(QScreen * screen)","Funname":"screenDevicePixelRatioChanged","Returntype":"void","Args":"QScreen * screen"},{"Uniquefunname":"void setAboutDialog(DAboutDialog * aboutDialog)","Funname":"setAboutDialog","Returntype":"void","Args":"DAboutDialog * aboutDialog"},{"Uniquefunname":"void setApplicationAcknowledgementPage(const QString \u0026 link)","Funname":"setApplicationAcknowledgementPage","Returntype":"void","Args":"const QString \u0026 link"},{"Uniquefunname":"void setApplicationAcknowledgementVisible(bool visible)","Funname":"setApplicationAcknowledgementVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setApplicationDescription(const QString \u0026 description)","Funname":"setApplicationDescription","Returntype":"void","Args":"const QString \u0026 description"},{"Uniquefunname":"void setApplicationHomePage(const QString \u0026 link)","Funname":"setApplicationHomePage","Returntype":"void","Args":"const QString \u0026 link"},{"Uniquefunname":"void setApplicationLicense(const QString \u0026 license)","Funname":"setApplicationLicense","Returntype":"void","Args":"const QString \u0026 license"},{"Uniquefunname":"void setAutoActivateWindows(bool autoActivateWindows)","Funname":"setAutoActivateWindows","Returntype":"void","Args":"bool autoActivateWindows"},{"Uniquefunname":"void setOOMScoreAdj(const int score)","Funname":"setOOMScoreAdj","Returntype":"void","Args":"const int score"},{"Uniquefunname":"void setProductIcon(const QIcon \u0026 productIcon)","Funname":"setProductIcon","Returntype":"void","Args":"const QIcon \u0026 productIcon"},{"Uniquefunname":"void setProductName(const QString \u0026 productName)","Funname":"setProductName","Returntype":"void","Args":"const QString \u0026 productName"},{"Uniquefunname":"bool setSingleInstance(const QString \u0026 key)","Funname":"setSingleInstance","Returntype":"bool","Args":"const QString \u0026 key"},{"Uniquefunname":"bool setSingleInstance(const QString \u0026 key,SingleScope singleScope)","Funname":"setSingleInstance","Returntype":"bool","Args":"const QString \u0026 key,SingleScope singleScope"},{"Uniquefunname":"D_DECL_DEPRECATED void setTheme(const QString \u0026 theme)","Funname":"setTheme","Returntype":"D_DECL_DEPRECATED void","Args":"const QString \u0026 theme"},{"Uniquefunname":"void setVisibleMenuCheckboxWidget(bool value)","Funname":"setVisibleMenuCheckboxWidget","Returntype":"void","Args":"bool value"},{"Uniquefunname":"void setVisibleMenuIcon(bool value)","Funname":"setVisibleMenuIcon","Returntype":"void","Args":"bool value"},{"Uniquefunname":"void setVisibleMenuShortcutText(bool value)","Funname":"setVisibleMenuShortcutText","Returntype":"void","Args":"bool value"},{"Uniquefunname":"D_DECL_DEPRECATED QString theme()","Funname":"theme","Returntype":"D_DECL_DEPRECATED QString","Args":""},{"Uniquefunname":"bool visibleMenuCheckboxWidget()","Funname":"visibleMenuCheckboxWidget","Returntype":"bool","Args":""},{"Uniquefunname":"bool visibleMenuIcon()","Funname":"visibleMenuIcon","Returntype":"bool","Args":""},{"Uniquefunname":"bool visibleMenuShortcutText()","Funname":"visibleMenuShortcutText","Returntype":"bool","Args":""}],"Records":[{"Name":"macro","Fields":["DAPPLICATION_H","DAPPLICATION_STRING(s)","DAPPLICATION_XSTRING(s)","qApp"]},{"Name":"enum:SingleScope","Fields":["SystemScope","UserScope"]}]}
{"Filepath":"src/widgets/dapplicationhelper.h","Functions":[{"Uniquefunname":"private DApplicationHelper()","Funname":"DApplicationHelper","Returntype":"private","Args":""},{"Uniquefunname":"bool event(QEvent * event)","Funname":"event","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"bool eventFilter(QObject * watched,QEvent * event)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * watched,QEvent * event"},{"Uniquefunname":"Q_OBJECT public instance()","Funname":"instance","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"void resetPalette(QWidget * widget)","Funname":"resetPalette","Returntype":"void","Args":"QWidget * widget"},{"Uniquefunname":"void setPalette(QWidget * widget,const DPalette \u0026 palette)","Funname":"setPalette","Returntype":"void","Args":"QWidget * widget,const DPalette \u0026 palette"},{"Uniquefunname":" ~DApplicationHelper()","Funname":"~DApplicationHelper","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DAPPLICATIONHELPER_H"]}]}
{"Filepath":"src/widgets/darrowbutton.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(int arrowButtonDirection READ arrowDirection)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"int arrowButtonDirection READ arrowDirection"},{"Uniquefunname":"int arrowDirection()","Funname":"arrowDirection","Returntype":"int","Args":""},{"Uniquefunname":"int buttonState()","Funname":"buttonState","Returntype":"int","Args":""},{"Uniquefunname":"void enterEvent(QEvent *)","Funname":"enterEvent","Returntype":"void","Args":"QEvent *"},{"Uniquefunname":"private initButtonState()","Funname":"initButtonState","Returntype":"private","Args":""},{"Uniquefunname":"void leaveEvent(QEvent *)","Funname":"leaveEvent","Returntype":"void","Args":"QEvent *"},{"Uniquefunname":"void mouseEnter()","Funname":"mouseEnter","Returntype":"void","Args":""},{"Uniquefunname":"void mouseLeave()","Funname":"mouseLeave","Returntype":"void","Args":""},{"Uniquefunname":"Q_SIGNALS mousePress()","Funname":"mousePress","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"protected mousePressEvent(QMouseEvent * event)","Funname":"mousePressEvent","Returntype":"protected","Args":"QMouseEvent * event"},{"Uniquefunname":"void mouseRelease()","Funname":"mouseRelease","Returntype":"void","Args":""},{"Uniquefunname":"void mouseReleaseEvent(QMouseEvent * event)","Funname":"mouseReleaseEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"void setArrowDirection(ArrowDirection direction)","Funname":"setArrowDirection","Returntype":"void","Args":"ArrowDirection direction"},{"Uniquefunname":"void setArrowDirection(int direction)","Funname":"setArrowDirection","Returntype":"void","Args":"int direction"},{"Uniquefunname":"void setButtonState(ArrowButtonState state)","Funname":"setButtonState","Returntype":"void","Args":"ArrowButtonState state"},{"Uniquefunname":"void setButtonState(int state)","Funname":"setButtonState","Returntype":"void","Args":"int state"},{"Uniquefunname":"void updateIconDirection(ArrowDirection direction)","Funname":"updateIconDirection","Returntype":"void","Args":"ArrowDirection direction"},{"Uniquefunname":"void updateIconState(ArrowButtonState state)","Funname":"updateIconState","Returntype":"void","Args":"ArrowButtonState state"}],"Records":[{"Name":"enum:ArrowDirection","Fields":["ArrowDown","ArrowLeft","ArrowRight","ArrowUp"]},{"Name":"enum:ArrowButtonState","Fields":["ArrowStateHover","ArrowStateNormal","ArrowStatePress"]},{"Name":"macro","Fields":["DARROWBUTTON_H"]}]}
{"Filepath":"src/widgets/darrowlinedrawer.h","Functions":[{"Uniquefunname":"    D_DECLARE_PRIVATE(DArrowLineDrawer)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DArrowLineDrawer"},{"Uniquefunname":"D_DECL_DEPRECATED DBaseLine * headerLine()","Funname":"headerLine","Returntype":"D_DECL_DEPRECATED DBaseLine *","Args":""},{"Uniquefunname":"void resizeEvent(QResizeEvent * e)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * e"},{"Uniquefunname":"void setExpand(bool value)","Funname":"setExpand","Returntype":"void","Args":"bool value"},{"Uniquefunname":"private setHeader(QWidget * header)","Funname":"setHeader","Returntype":"private","Args":"QWidget * header"},{"Uniquefunname":"void setTitle(const QString \u0026 title)","Funname":"setTitle","Returntype":"void","Args":"const QString \u0026 title"}],"Records":[{"Name":"macro","Fields":["DARROWLINEDRAWER_H"]}]}
{"Filepath":"src/widgets/darrowlineexpand.h","Functions":[{"Uniquefunname":"DBaseLine * headerLine()","Funname":"headerLine","Returntype":"DBaseLine *","Args":""},{"Uniquefunname":"void mouseMoveEvent(QMouseEvent *)","Funname":"mouseMoveEvent","Returntype":"void","Args":"QMouseEvent *"},{"Uniquefunname":"Q_SIGNALS mousePress()","Funname":"mousePress","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"protected mousePressEvent(QMouseEvent *)","Funname":"mousePressEvent","Returntype":"protected","Args":"QMouseEvent *"},{"Uniquefunname":"void resizeEvent(QResizeEvent * e)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * e"},{"Uniquefunname":"private reverseArrowDirection()","Funname":"reverseArrowDirection","Returntype":"private","Args":""},{"Uniquefunname":"void setExpand(bool value)","Funname":"setExpand","Returntype":"void","Args":"bool value"},{"Uniquefunname":"private setHeader(QWidget * header)","Funname":"setHeader","Returntype":"private","Args":"QWidget * header"},{"Uniquefunname":"void setTitle(const QString \u0026 title)","Funname":"setTitle","Returntype":"void","Args":"const QString \u0026 title"}],"Records":[{"Name":"macro","Fields":["DARROWLINEEXPAND_H"]}]}
{"Filepath":"src/widgets/darrowrectangle.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(QColor borderColor READ borderColor WRITE setBorderColor)","Funname":"Q_PROPERTY","Returntype":"","Args":"QColor borderColor READ borderColor WRITE setBorderColor"},{"Uniquefunname":"ArrowDirection arrowDirection()","Funname":"arrowDirection","Returntype":"ArrowDirection","Args":""},{"Uniquefunname":"int arrowHeight()","Funname":"arrowHeight","Returntype":"int","Args":""},{"Uniquefunname":"int arrowWidth()","Funname":"arrowWidth","Returntype":"int","Args":""},{"Uniquefunname":"int arrowX()","Funname":"arrowX","Returntype":"int","Args":""},{"Uniquefunname":"int arrowY()","Funname":"arrowY","Returntype":"int","Args":""},{"Uniquefunname":"QColor backgroundColor()","Funname":"backgroundColor","Returntype":"QColor","Args":""},{"Uniquefunname":"QColor borderColor()","Funname":"borderColor","Returntype":"QColor","Args":""},{"Uniquefunname":"int borderWidth()","Funname":"borderWidth","Returntype":"int","Args":""},{"Uniquefunname":"bool event(QEvent * e)","Funname":"event","Returntype":"bool","Args":"QEvent * e"},{"Uniquefunname":"QWidget * getContent()","Funname":"getContent","Returntype":"QWidget *","Args":""},{"Uniquefunname":"QSize getFixedSize()","Funname":"getFixedSize","Returntype":"QSize","Args":""},{"Uniquefunname":"int margin()","Funname":"margin","Returntype":"int","Args":""},{"Uniquefunname":"void move(int x,int y)","Funname":"move","Returntype":"void","Args":"int x,int y"},{"Uniquefunname":"protected paintEvent(QPaintEvent *)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent *"},{"Uniquefunname":"void resizeEvent(QResizeEvent * e)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * e"},{"Uniquefunname":"void resizeWithContent()","Funname":"resizeWithContent","Returntype":"void","Args":""},{"Uniquefunname":"void setArrowDirection(ArrowDirection value)","Funname":"setArrowDirection","Returntype":"void","Args":"ArrowDirection value"},{"Uniquefunname":"void setArrowHeight(int value)","Funname":"setArrowHeight","Returntype":"void","Args":"int value"},{"Uniquefunname":"void setArrowWidth(int value)","Funname":"setArrowWidth","Returntype":"void","Args":"int value"},{"Uniquefunname":"void setArrowX(int value)","Funname":"setArrowX","Returntype":"void","Args":"int value"},{"Uniquefunname":"void setArrowY(int value)","Funname":"setArrowY","Returntype":"void","Args":"int value"},{"Uniquefunname":"void setBackgroundColor(DBlurEffectWidget::MaskColorType type)","Funname":"setBackgroundColor","Returntype":"void","Args":"DBlurEffectWidget::MaskColorType type"},{"Uniquefunname":"void setBackgroundColor(const QColor \u0026 backgroundColor)","Funname":"setBackgroundColor","Returntype":"void","Args":"const QColor \u0026 backgroundColor"},{"Uniquefunname":"void setBorderColor(const QColor \u0026 borderColor)","Funname":"setBorderColor","Returntype":"void","Args":"const QColor \u0026 borderColor"},{"Uniquefunname":"void setBorderWidth(int borderWidth)","Funname":"setBorderWidth","Returntype":"void","Args":"int borderWidth"},{"Uniquefunname":"void setContent(QWidget * content)","Funname":"setContent","Returntype":"void","Args":"QWidget * content"},{"Uniquefunname":"void setHeight(int value)","Funname":"setHeight","Returntype":"void","Args":"int value"},{"Uniquefunname":"void setLeftRightRadius(bool enable)","Funname":"setLeftRightRadius","Returntype":"void","Args":"bool enable"},{"Uniquefunname":"void setMargin(int value)","Funname":"setMargin","Returntype":"void","Args":"int value"},{"Uniquefunname":"void setRadius(int value)","Funname":"setRadius","Returntype":"void","Args":"int value"},{"Uniquefunname":"void setRadiusArrowStyleEnable(bool enable)","Funname":"setRadiusArrowStyleEnable","Returntype":"void","Args":"bool enable"},{"Uniquefunname":"void setShadowBlurRadius(const qreal \u0026 shadowBlurRadius)","Funname":"setShadowBlurRadius","Returntype":"void","Args":"const qreal \u0026 shadowBlurRadius"},{"Uniquefunname":"void setShadowXOffset(const qreal \u0026 shadowXOffset)","Funname":"setShadowXOffset","Returntype":"void","Args":"const qreal \u0026 shadowXOffset"},{"Uniquefunname":"void setShadowYOffset(const qreal \u0026 shadowYOffset)","Funname":"setShadowYOffset","Returntype":"void","Args":"const qreal \u0026 shadowYOffset"},{"Uniquefunname":"void setWidth(int value)","Funname":"setWidth","Returntype":"void","Args":"int value"},{"Uniquefunname":"qreal shadowBlurRadius()","Funname":"shadowBlurRadius","Returntype":"qreal","Args":""},{"Uniquefunname":"qreal shadowXOffset()","Funname":"shadowXOffset","Returntype":"qreal","Args":""},{"Uniquefunname":"qreal shadowYOffset()","Funname":"shadowYOffset","Returntype":"qreal","Args":""},{"Uniquefunname":"virtual void show(int x,int y)","Funname":"show","Returntype":"virtual void","Args":"int x,int y"},{"Uniquefunname":"Q_SIGNALS windowDeactivate()","Funname":"windowDeactivate","Returntype":"Q_SIGNALS","Args":""}],"Records":[{"Name":"enum:ArrowDirection","Fields":["ArrowBottom","ArrowLeft","ArrowRight","ArrowTop"]},{"Name":"macro","Fields":["DARROWRECTANGLE_H"]},{"Name":"enum:FloatMode","Fields":["FloatWidget","FloatWindow"]}]}
{"Filepath":"src/widgets/dbackgroundgroup.h","Functions":[{"Uniquefunname":"    D_DECLARE_PRIVATE(DBackgroundGroup)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DBackgroundGroup"},{"Uniquefunname":"bool event(QEvent * event)","Funname":"event","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"QMargins itemMargins()","Funname":"itemMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"protected paintEvent(QPaintEvent * event)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent * event"},{"Uniquefunname":"public Q_SLOTS setItemMargins(QMargins itemMargins)","Funname":"setItemMargins","Returntype":"public Q_SLOTS","Args":"QMargins itemMargins"},{"Uniquefunname":"void setItemSpacing(int spacing)","Funname":"setItemSpacing","Returntype":"void","Args":"int spacing"},{"Uniquefunname":"void setLayout(QLayout * layout)","Funname":"setLayout","Returntype":"void","Args":"QLayout * layout"},{"Uniquefunname":"void setUseWidgetBackground(bool useWidgetBackground)","Funname":"setUseWidgetBackground","Returntype":"void","Args":"bool useWidgetBackground"},{"Uniquefunname":"bool useWidgetBackground()","Funname":"useWidgetBackground","Returntype":"bool","Args":""},{"Uniquefunname":"Q_SIGNALS useWidgetBackgroundChanged(bool useWidgetBackground)","Funname":"useWidgetBackgroundChanged","Returntype":"Q_SIGNALS","Args":"bool useWidgetBackground"}],"Records":[{"Name":"macro","Fields":["DBACKGROUNDGROUP_H"]}]}
{"Filepath":"src/widgets/dbaseexpand.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(int height READ height WRITE setFixedHeight)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"int height READ height WRITE setFixedHeight"},{"Uniquefunname":"bool expand()","Funname":"expand","Returntype":"bool","Args":""},{"Uniquefunname":"Q_SIGNALS expandChange(bool e)","Funname":"expandChange","Returntype":"Q_SIGNALS","Args":"bool e"},{"Uniquefunname":"QWidget * getContent()","Funname":"getContent","Returntype":"QWidget *","Args":""},{"Uniquefunname":"protected resizeEvent(QResizeEvent * e)","Funname":"resizeEvent","Returntype":"protected","Args":"QResizeEvent * e"},{"Uniquefunname":"void setAnimationDuration(int duration)","Funname":"setAnimationDuration","Returntype":"void","Args":"int duration"},{"Uniquefunname":"void setAnimationEasingCurve(QEasingCurve curve)","Funname":"setAnimationEasingCurve","Returntype":"void","Args":"QEasingCurve curve"},{"Uniquefunname":"virtual void setExpand(bool value)","Funname":"setExpand","Returntype":"virtual void","Args":"bool value"},{"Uniquefunname":"void setExpandedSeparatorVisible(bool arg)","Funname":"setExpandedSeparatorVisible","Returntype":"void","Args":"bool arg"},{"Uniquefunname":"void setHeader(QWidget * header)","Funname":"setHeader","Returntype":"void","Args":"QWidget * header"},{"Uniquefunname":"void setHeaderHeight(int height)","Funname":"setHeaderHeight","Returntype":"void","Args":"int height"},{"Uniquefunname":"void setSeparatorVisible(bool arg)","Funname":"setSeparatorVisible","Returntype":"void","Args":"bool arg"},{"Uniquefunname":"void sizeChanged(QSize s)","Funname":"sizeChanged","Returntype":"void","Args":"QSize s"}],"Records":[{"Name":"macro","Fields":["DBASEEXPAND_H"]}]}
{"Filepath":"src/widgets/dbaseline.h","Functions":[{"Uniquefunname":"QBoxLayout * leftLayout()","Funname":"leftLayout","Returntype":"QBoxLayout *","Args":""},{"Uniquefunname":"int leftMargin()","Funname":"leftMargin","Returntype":"int","Args":""},{"Uniquefunname":"QBoxLayout * rightLayout()","Funname":"rightLayout","Returntype":"QBoxLayout *","Args":""},{"Uniquefunname":"int rightMargin()","Funname":"rightMargin","Returntype":"int","Args":""},{"Uniquefunname":"void setLeftContent(QWidget * content)","Funname":"setLeftContent","Returntype":"void","Args":"QWidget * content"},{"Uniquefunname":"void setLeftMargin(int margin)","Funname":"setLeftMargin","Returntype":"void","Args":"int margin"},{"Uniquefunname":"void setRightContent(QWidget * content)","Funname":"setRightContent","Returntype":"void","Args":"QWidget * content"},{"Uniquefunname":"void setRightMargin(int margin)","Funname":"setRightMargin","Returntype":"void","Args":"int margin"}],"Records":[{"Name":"macro","Fields":["DBASELINE_H"]}]}
{"Filepath":"src/widgets/dblureffectwidget.h","Functions":[{"Uniquefunname":"    Q_ENUMS(MaskColorType)","Funname":"Q_ENUMS","Returntype":"","Args":"MaskColorType"},{"Uniquefunname":"BlendMode blendMode()","Funname":"blendMode","Returntype":"BlendMode","Args":""},{"Uniquefunname":"void blendModeChanged(BlendMode blendMode)","Funname":"blendModeChanged","Returntype":"void","Args":"BlendMode blendMode"},{"Uniquefunname":"bool blurEnabled()","Funname":"blurEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"void blurEnabledChanged(bool blurEnabled)","Funname":"blurEnabledChanged","Returntype":"void","Args":"bool blurEnabled"},{"Uniquefunname":"int blurRectXRadius()","Funname":"blurRectXRadius","Returntype":"int","Args":""},{"Uniquefunname":"void blurRectXRadiusChanged(int blurRectXRadius)","Funname":"blurRectXRadiusChanged","Returntype":"void","Args":"int blurRectXRadius"},{"Uniquefunname":"int blurRectYRadius()","Funname":"blurRectYRadius","Returntype":"int","Args":""},{"Uniquefunname":"void blurRectYRadiusChanged(int blurRectYRadius)","Funname":"blurRectYRadiusChanged","Returntype":"void","Args":"int blurRectYRadius"},{"Uniquefunname":"void blurSourceImageDirtied()","Funname":"blurSourceImageDirtied","Returntype":"void","Args":""},{"Uniquefunname":"void changeEvent(QEvent * event)","Funname":"changeEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"bool eventFilter(QObject * watched,QEvent * event)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * watched,QEvent * event"},{"Uniquefunname":"void fullChanged(bool full)","Funname":"fullChanged","Returntype":"void","Args":"bool full"},{"Uniquefunname":"void hideEvent(QHideEvent * event)","Funname":"hideEvent","Returntype":"void","Args":"QHideEvent * event"},{"Uniquefunname":"bool isFull()","Funname":"isFull","Returntype":"bool","Args":""},{"Uniquefunname":"quint8 maskAlpha()","Funname":"maskAlpha","Returntype":"quint8","Args":""},{"Uniquefunname":"void maskAlphaChanged(quint8 alpha)","Funname":"maskAlphaChanged","Returntype":"void","Args":"quint8 alpha"},{"Uniquefunname":"QColor maskColor()","Funname":"maskColor","Returntype":"QColor","Args":""},{"Uniquefunname":"void maskColorChanged(QColor maskColor)","Funname":"maskColorChanged","Returntype":"void","Args":"QColor maskColor"},{"Uniquefunname":"BlurMode mode()","Funname":"mode","Returntype":"BlurMode","Args":""},{"Uniquefunname":"void modeChanged(BlurMode mode)","Funname":"modeChanged","Returntype":"void","Args":"BlurMode mode"},{"Uniquefunname":"void moveEvent(QMoveEvent * event)","Funname":"moveEvent","Returntype":"void","Args":"QMoveEvent * event"},{"Uniquefunname":"void paintEvent(QPaintEvent * event)","Funname":"paintEvent","Returntype":"void","Args":"QPaintEvent * event"},{"Uniquefunname":"int radius()","Funname":"radius","Returntype":"int","Args":""},{"Uniquefunname":"Q_SIGNALS radiusChanged(int radius)","Funname":"radiusChanged","Returntype":"Q_SIGNALS","Args":"int radius"},{"Uniquefunname":"void resizeEvent(QResizeEvent * event)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * event"},{"Uniquefunname":"void setBlendMode(BlendMode blendMode)","Funname":"setBlendMode","Returntype":"void","Args":"BlendMode blendMode"},{"Uniquefunname":"void setBlurEnabled(bool blurEnabled)","Funname":"setBlurEnabled","Returntype":"void","Args":"bool blurEnabled"},{"Uniquefunname":"void setBlurRectXRadius(int blurRectXRadius)","Funname":"setBlurRectXRadius","Returntype":"void","Args":"int blurRectXRadius"},{"Uniquefunname":"void setBlurRectYRadius(int blurRectYRadius)","Funname":"setBlurRectYRadius","Returntype":"void","Args":"int blurRectYRadius"},{"Uniquefunname":"void setFull(bool full)","Funname":"setFull","Returntype":"void","Args":"bool full"},{"Uniquefunname":"void setMaskAlpha(quint8 alpha)","Funname":"setMaskAlpha","Returntype":"void","Args":"quint8 alpha"},{"Uniquefunname":"void setMaskColor(MaskColorType type)","Funname":"setMaskColor","Returntype":"void","Args":"MaskColorType type"},{"Uniquefunname":"void setMaskColor(QColor maskColor)","Funname":"setMaskColor","Returntype":"void","Args":"QColor maskColor"},{"Uniquefunname":"void setMaskPath(const QPainterPath \u0026 path)","Funname":"setMaskPath","Returntype":"void","Args":"const QPainterPath \u0026 path"},{"Uniquefunname":"void setMode(BlurMode mode)","Funname":"setMode","Returntype":"void","Args":"BlurMode mode"},{"Uniquefunname":"public Q_SLOTS setRadius(int radius)","Funname":"setRadius","Returntype":"public Q_SLOTS","Args":"int radius"},{"Uniquefunname":"void showEvent(QShowEvent * event)","Funname":"showEvent","Returntype":"void","Args":"QShowEvent * event"},{"Uniquefunname":"void updateBlurSourceImage(const QRegion \u0026 ren)","Funname":"updateBlurSourceImage","Returntype":"void","Args":"const QRegion \u0026 ren"},{"Uniquefunname":" ~DBlurEffectWidget()","Funname":"~DBlurEffectWidget","Returntype":"","Args":""}],"Records":[{"Name":"enum:MaskColorType","Fields":["AutoColor","CustomColor","DarkColor","LightColor"]},{"Name":"enum:BlendMode","Fields":["BehindWindowBlend","InWidgetBlend","InWindowBlend"]},{"Name":"macro","Fields":["DBLUREFFECTWIDGET_H"]},{"Name":"enum:BlurMode","Fields":["GaussianBlur"]}]}
{"Filepath":"src/widgets/dboxwidget.h","Functions":[{"Uniquefunname":"Q_OBJECT Q_PROPERTY(QBoxLayout::Direction direction READ direction WRITE setDirection NOTIFY directionChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"QBoxLayout::Direction direction READ direction WRITE setDirection NOTIFY directionChanged"},{"Uniquefunname":"void addWidget(QWidget * widget)","Funname":"addWidget","Returntype":"void","Args":"QWidget * widget"},{"Uniquefunname":"QBoxLayout direction()","Funname":"direction","Returntype":"QBoxLayout","Args":""},{"Uniquefunname":"void directionChanged(QBoxLayout::Direction direction)","Funname":"directionChanged","Returntype":"void","Args":"QBoxLayout::Direction direction"},{"Uniquefunname":"bool event(QEvent * ee)","Funname":"event","Returntype":"bool","Args":"QEvent * ee"},{"Uniquefunname":"QBoxLayout * layout()","Funname":"layout","Returntype":"QBoxLayout *","Args":""},{"Uniquefunname":"public Q_SLOTS setDirection(QBoxLayout::Direction direction)","Funname":"setDirection","Returntype":"public Q_SLOTS","Args":"QBoxLayout::Direction direction"},{"Uniquefunname":"Q_SIGNALS sizeChanged(QSize size)","Funname":"sizeChanged","Returntype":"Q_SIGNALS","Args":"QSize size"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""},{"Uniquefunname":"protected updateSize(const QSize \u0026 size)","Funname":"updateSize","Returntype":"protected","Args":"const QSize \u0026 size"}],"Records":[{"Name":"macro","Fields":["DBOXWIDGET_H"]}]}
{"Filepath":"src/widgets/dbuttonbox.h","Functions":[{"Uniquefunname":"    D_DECLARE_PRIVATE(DButtonBox)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DButtonBox"},{"Uniquefunname":"    D_DECLARE_PRIVATE(DButtonBoxButton)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DButtonBoxButton"},{"Uniquefunname":"QAbstractButton * button(int id)","Funname":"button","Returntype":"QAbstractButton *","Args":"int id"},{"Uniquefunname":"Q_SIGNALS buttonClicked(QAbstractButton *)","Funname":"buttonClicked","Returntype":"Q_SIGNALS","Args":"QAbstractButton *"},{"Uniquefunname":"QList\u003cQAbstractButton * \u003e buttonList()","Funname":"buttonList","Returntype":"QList\u003cQAbstractButton * \u003e","Args":""},{"Uniquefunname":"void buttonPressed(QAbstractButton *)","Funname":"buttonPressed","Returntype":"void","Args":"QAbstractButton *"},{"Uniquefunname":"void buttonReleased(QAbstractButton *)","Funname":"buttonReleased","Returntype":"void","Args":"QAbstractButton *"},{"Uniquefunname":"void buttonToggled(QAbstractButton *,bool)","Funname":"buttonToggled","Returntype":"void","Args":"QAbstractButton *,bool"},{"Uniquefunname":"QAbstractButton * checkedButton()","Funname":"checkedButton","Returntype":"QAbstractButton *","Args":""},{"Uniquefunname":"int checkedId()","Funname":"checkedId","Returntype":"int","Args":""},{"Uniquefunname":"bool event(QEvent * e)","Funname":"event","Returntype":"bool","Args":"QEvent * e"},{"Uniquefunname":"QSize iconSize()","Funname":"iconSize","Returntype":"QSize","Args":""},{"Uniquefunname":"int id(QAbstractButton * button)","Funname":"id","Returntype":"int","Args":"QAbstractButton * button"},{"Uniquefunname":"private initStyleOption(DStyleOptionButtonBoxButton * option)","Funname":"initStyleOption","Returntype":"private","Args":"DStyleOptionButtonBoxButton * option"},{"Uniquefunname":"void keyPressEvent(QKeyEvent * event)","Funname":"keyPressEvent","Returntype":"void","Args":"QKeyEvent * event"},{"Uniquefunname":"QSize minimumSizeHint()","Funname":"minimumSizeHint","Returntype":"QSize","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"private paintEvent(QPaintEvent * e)","Funname":"paintEvent","Returntype":"private","Args":"QPaintEvent * e"},{"Uniquefunname":"void paintEvent(QPaintEvent * e)","Funname":"paintEvent","Returntype":"void","Args":"QPaintEvent * e"},{"Uniquefunname":"void setButtonList(const QList\u003cDButtonBoxButton * \u003e \u0026 list,bool checkable)","Funname":"setButtonList","Returntype":"void","Args":"const QList\u003cDButtonBoxButton * \u003e \u0026 list,bool checkable"},{"Uniquefunname":"void setIcon(DStyle::StandardPixmap iconType)","Funname":"setIcon","Returntype":"void","Args":"DStyle::StandardPixmap iconType"},{"Uniquefunname":"void setIcon(QStyle::StandardPixmap iconType)","Funname":"setIcon","Returntype":"void","Args":"QStyle::StandardPixmap iconType"},{"Uniquefunname":"void setIcon(const QIcon \u0026 icon)","Funname":"setIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setId(QAbstractButton * button,int id)","Funname":"setId","Returntype":"void","Args":"QAbstractButton * button,int id"},{"Uniquefunname":"void setOrientation(Qt::Orientation orientation)","Funname":"setOrientation","Returntype":"void","Args":"Qt::Orientation orientation"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DBUTTONBOX_H"]}]}
{"Filepath":"src/widgets/dcircleprogress.h","Functions":[{"Uniquefunname":"Q_OBJECT Q_PROPERTY(QColor backgroundColor READ backgroundColor WRITE setBackgroundColor DESIGNABLE true)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"QColor backgroundColor READ backgroundColor WRITE setBackgroundColor DESIGNABLE true"},{"Uniquefunname":"const QColor backgroundColor()","Funname":"backgroundColor","Returntype":"const QColor","Args":""},{"Uniquefunname":"QLabel * bottomLabel()","Funname":"bottomLabel","Returntype":"QLabel *","Args":""},{"Uniquefunname":"const QColor chunkColor()","Funname":"chunkColor","Returntype":"const QColor","Args":""},{"Uniquefunname":"void enterEvent(QEvent * e)","Funname":"enterEvent","Returntype":"void","Args":"QEvent * e"},{"Uniquefunname":"void leaveEvent(QEvent * e)","Funname":"leaveEvent","Returntype":"void","Args":"QEvent * e"},{"Uniquefunname":"int lineWidth()","Funname":"lineWidth","Returntype":"int","Args":""},{"Uniquefunname":"void mouseEntered()","Funname":"mouseEntered","Returntype":"void","Args":""},{"Uniquefunname":"void mouseLeaved()","Funname":"mouseLeaved","Returntype":"void","Args":""},{"Uniquefunname":"void mouseReleaseEvent(QMouseEvent * e)","Funname":"mouseReleaseEvent","Returntype":"void","Args":"QMouseEvent * e"},{"Uniquefunname":"protected paintEvent(QPaintEvent * e)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent * e"},{"Uniquefunname":"void setBackgroundColor(const QColor \u0026 color)","Funname":"setBackgroundColor","Returntype":"void","Args":"const QColor \u0026 color"},{"Uniquefunname":"void setChunkColor(const QColor \u0026 color)","Funname":"setChunkColor","Returntype":"void","Args":"const QColor \u0026 color"},{"Uniquefunname":"void setLineWidth(const int width)","Funname":"setLineWidth","Returntype":"void","Args":"const int width"},{"Uniquefunname":"void setText(const QString \u0026 text)","Funname":"setText","Returntype":"void","Args":"const QString \u0026 text"},{"Uniquefunname":"void setValue(int value)","Funname":"setValue","Returntype":"void","Args":"int value"},{"Uniquefunname":"const QString text()","Funname":"text","Returntype":"const QString","Args":""},{"Uniquefunname":"QLabel * topLabel()","Funname":"topLabel","Returntype":"QLabel *","Args":""},{"Uniquefunname":"int value()","Funname":"value","Returntype":"int","Args":""},{"Uniquefunname":"Q_SIGNALS valueChanged(const int value)","Funname":"valueChanged","Returntype":"Q_SIGNALS","Args":"const int value"}],"Records":[{"Name":"macro","Fields":["DCIRCLEPROGRESS_H"]}]}
{"Filepath":"src/widgets/dclipeffectwidget.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(QMargins margins READ margins WRITE setMargins NOTIFY marginsChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"QMargins margins READ margins WRITE setMargins NOTIFY marginsChanged"},{"Uniquefunname":"QPainterPath clipPath()","Funname":"clipPath","Returntype":"QPainterPath","Args":""},{"Uniquefunname":"void clipPathChanged(QPainterPath clipPath)","Funname":"clipPathChanged","Returntype":"void","Args":"QPainterPath clipPath"},{"Uniquefunname":"protected eventFilter(QObject * watched,QEvent * event)","Funname":"eventFilter","Returntype":"protected","Args":"QObject * watched,QEvent * event"},{"Uniquefunname":"void hideEvent(QHideEvent * event)","Funname":"hideEvent","Returntype":"void","Args":"QHideEvent * event"},{"Uniquefunname":"QMargins margins()","Funname":"margins","Returntype":"QMargins","Args":""},{"Uniquefunname":"Q_SIGNALS marginsChanged(QMargins margins)","Funname":"marginsChanged","Returntype":"Q_SIGNALS","Args":"QMargins margins"},{"Uniquefunname":"void paintEvent(QPaintEvent * event)","Funname":"paintEvent","Returntype":"void","Args":"QPaintEvent * event"},{"Uniquefunname":"void resizeEvent(QResizeEvent * event)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * event"},{"Uniquefunname":"void setClipPath(const QPainterPath \u0026 path)","Funname":"setClipPath","Returntype":"void","Args":"const QPainterPath \u0026 path"},{"Uniquefunname":"public Q_SLOTS setMargins(QMargins margins)","Funname":"setMargins","Returntype":"public Q_SLOTS","Args":"QMargins margins"},{"Uniquefunname":"void showEvent(QShowEvent * event)","Funname":"showEvent","Returntype":"void","Args":"QShowEvent * event"}],"Records":[{"Name":"macro","Fields":["DCLIPEFFECTWIDGET_H"]}]}
{"Filepath":"src/widgets/dcoloredprogressbar.h","Functions":[{"Uniquefunname":"void addThreshold(int threshold,QBrush brush)","Funname":"addThreshold","Returntype":"void","Args":"int threshold,QBrush brush"},{"Uniquefunname":"protected paintEvent(QPaintEvent *)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent *"},{"Uniquefunname":"void removeThreshold(int threshold)","Funname":"removeThreshold","Returntype":"void","Args":"int threshold"},{"Uniquefunname":"QList\u003cint\u003e thresholds()","Funname":"thresholds","Returntype":"QList\u003cint\u003e","Args":""}],"Records":null}
{"Filepath":"src/widgets/dcommandlinkbutton.h","Functions":[{"Uniquefunname":"protected initStyleOption(DStyleOptionButton * option)","Funname":"initStyleOption","Returntype":"protected","Args":"DStyleOptionButton * option"},{"Uniquefunname":"void paintEvent(QPaintEvent * e)","Funname":"paintEvent","Returntype":"void","Args":"QPaintEvent * e"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DCOMMANDLINKBUTTON_H"]}]}
{"Filepath":"src/widgets/dconstants.h","Functions":null,"Records":[{"Name":"macro","Fields":["DCONSTANTS_H"]}]}
{"Filepath":"src/widgets/dcrumbedit.h","Functions":[{"Uniquefunname":"public DCrumbTextFormat()","Funname":"DCrumbTextFormat","Returntype":"public","Args":""},{"Uniquefunname":"protected DCrumbTextFormat(int objectType)","Funname":"DCrumbTextFormat","Returntype":"protected","Args":"int objectType"},{"Uniquefunname":"explicit DCrumbTextFormat(const QTextFormat \u0026 fmt)","Funname":"DCrumbTextFormat","Returntype":"explicit","Args":"const QTextFormat \u0026 fmt"},{"Uniquefunname":"bool appendCrumb(const DCrumbTextFormat \u0026 format)","Funname":"appendCrumb","Returntype":"bool","Args":"const DCrumbTextFormat \u0026 format"},{"Uniquefunname":"bool appendCrumb(const QString \u0026 text)","Funname":"appendCrumb","Returntype":"bool","Args":"const QString \u0026 text"},{"Uniquefunname":"QBrush background()","Funname":"background","Returntype":"QBrush","Args":""},{"Uniquefunname":"int backgroundRadius()","Funname":"backgroundRadius","Returntype":"int","Args":""},{"Uniquefunname":"bool canInsertFromMimeData(const QMimeData * source)","Funname":"canInsertFromMimeData","Returntype":"bool","Args":"const QMimeData * source"},{"Uniquefunname":"bool containCrumb(const QString \u0026 text)","Funname":"containCrumb","Returntype":"bool","Args":"const QString \u0026 text"},{"Uniquefunname":"QMimeData * createMimeDataFromSelection()","Funname":"createMimeDataFromSelection","Returntype":"QMimeData *","Args":""},{"Uniquefunname":"Q_SIGNALS crumbAdded(const QString \u0026 text)","Funname":"crumbAdded","Returntype":"Q_SIGNALS","Args":"const QString \u0026 text"},{"Uniquefunname":"QStringList crumbList()","Funname":"crumbList","Returntype":"QStringList","Args":""},{"Uniquefunname":"void crumbListChanged()","Funname":"crumbListChanged","Returntype":"void","Args":""},{"Uniquefunname":"int crumbRadius()","Funname":"crumbRadius","Returntype":"int","Args":""},{"Uniquefunname":"bool crumbReadOnly()","Funname":"crumbReadOnly","Returntype":"bool","Args":""},{"Uniquefunname":"void crumbRemoved(const QString \u0026 text)","Funname":"crumbRemoved","Returntype":"void","Args":"const QString \u0026 text"},{"Uniquefunname":"DCrumbTextFormat crumbTextFormat(const QString \u0026 text)","Funname":"crumbTextFormat","Returntype":"DCrumbTextFormat","Args":"const QString \u0026 text"},{"Uniquefunname":"bool dualClickMakeCrumb()","Funname":"dualClickMakeCrumb","Returntype":"bool","Args":""},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"void focusOutEvent(QFocusEvent * event)","Funname":"focusOutEvent","Returntype":"void","Args":"QFocusEvent * event"},{"Uniquefunname":"void insertFromMimeData(const QMimeData * source)","Funname":"insertFromMimeData","Returntype":"void","Args":"const QMimeData * source"},{"Uniquefunname":"void keyPressEvent(QKeyEvent * event)","Funname":"keyPressEvent","Returntype":"void","Args":"QKeyEvent * event"},{"Uniquefunname":"DCrumbTextFormat makeTextFormat()","Funname":"makeTextFormat","Returntype":"DCrumbTextFormat","Args":""},{"Uniquefunname":"DCrumbTextFormat makeTextFormat(CrumbType type)","Funname":"makeTextFormat","Returntype":"DCrumbTextFormat","Args":"CrumbType type"},{"Uniquefunname":"void mouseDoubleClickEvent(QMouseEvent * event)","Funname":"mouseDoubleClickEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"void paintEvent(QPaintEvent * event)","Funname":"paintEvent","Returntype":"void","Args":"QPaintEvent * event"},{"Uniquefunname":"void setBackground(const QBrush \u0026 background)","Funname":"setBackground","Returntype":"void","Args":"const QBrush \u0026 background"},{"Uniquefunname":"void setBackgroundRadius(int radius)","Funname":"setBackgroundRadius","Returntype":"void","Args":"int radius"},{"Uniquefunname":"void setCrumbRadius(int crumbRadius)","Funname":"setCrumbRadius","Returntype":"void","Args":"int crumbRadius"},{"Uniquefunname":"public Q_SLOTS setCrumbReadOnly(bool crumbReadOnly)","Funname":"setCrumbReadOnly","Returntype":"public Q_SLOTS","Args":"bool crumbReadOnly"},{"Uniquefunname":"void setDualClickMakeCrumb(bool flag)","Funname":"setDualClickMakeCrumb","Returntype":"void","Args":"bool flag"},{"Uniquefunname":"void setSplitter(const QString \u0026 splitter)","Funname":"setSplitter","Returntype":"void","Args":"const QString \u0026 splitter"},{"Uniquefunname":"void setTagColor(const QColor \u0026 color)","Funname":"setTagColor","Returntype":"void","Args":"const QColor \u0026 color"},{"Uniquefunname":"void setText(const QString \u0026 text)","Funname":"setText","Returntype":"void","Args":"const QString \u0026 text"},{"Uniquefunname":"void setTextColor(const QColor \u0026 color)","Funname":"setTextColor","Returntype":"void","Args":"const QColor \u0026 color"},{"Uniquefunname":"QString splitter()","Funname":"splitter","Returntype":"QString","Args":""},{"Uniquefunname":"QColor tagColor()","Funname":"tagColor","Returntype":"QColor","Args":""},{"Uniquefunname":"QString text()","Funname":"text","Returntype":"QString","Args":""},{"Uniquefunname":"QColor textColor()","Funname":"textColor","Returntype":"QColor","Args":""}],"Records":[{"Name":"macro","Fields":["DCRUMBEDIT_H"]},{"Name":"enum:CrumbType","Fields":["black","blue","cyan","darkBlue","darkCyan","darkGray","darkGreen","darkMagenta","darkRed","darkYellow","gray","green","lightGray","magenta","red","white","yellow"]}]}
{"Filepath":"src/widgets/ddialog.h","Functions":[{"Uniquefunname":"Q_SIGNALS aboutToClose()","Funname":"aboutToClose","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"int addButtons(const QStringList \u0026 text)","Funname":"addButtons","Returntype":"int","Args":"const QStringList \u0026 text"},{"Uniquefunname":"void addSpacing(int spacing)","Funname":"addSpacing","Returntype":"void","Args":"int spacing"},{"Uniquefunname":"void buttonClicked(int index,const QString \u0026 text)","Funname":"buttonClicked","Returntype":"void","Args":"int index,const QString \u0026 text"},{"Uniquefunname":"int buttonCount()","Funname":"buttonCount","Returntype":"int","Args":""},{"Uniquefunname":"void childEvent(QChildEvent * event)","Funname":"childEvent","Returntype":"void","Args":"QChildEvent * event"},{"Uniquefunname":"void clearButtons()","Funname":"clearButtons","Returntype":"void","Args":""},{"Uniquefunname":"void clearSpacing()","Funname":"clearSpacing","Returntype":"void","Args":""},{"Uniquefunname":"bool closeButtonVisible()","Funname":"closeButtonVisible","Returntype":"bool","Args":""},{"Uniquefunname":"void closeEvent(QCloseEvent * event)","Funname":"closeEvent","Returntype":"void","Args":"QCloseEvent * event"},{"Uniquefunname":"void closed()","Funname":"closed","Returntype":"void","Args":""},{"Uniquefunname":"int contentCount()","Funname":"contentCount","Returntype":"int","Args":""},{"Uniquefunname":"QMargins contentLayoutContentsMargins()","Funname":"contentLayoutContentsMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"bool eventFilter(QObject * watched,QEvent * event)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * watched,QEvent * event"},{"Uniquefunname":"int exec()","Funname":"exec","Returntype":"int","Args":""},{"Uniquefunname":"QAbstractButton * getButton(int index)","Funname":"getButton","Returntype":"QAbstractButton *","Args":"int index"},{"Uniquefunname":"int getButtonIndexByText(const QString \u0026 text)","Funname":"getButtonIndexByText","Returntype":"int","Args":"const QString \u0026 text"},{"Uniquefunname":"QList\u003cQAbstractButton * \u003e getButtons()","Funname":"getButtons","Returntype":"QList\u003cQAbstractButton * \u003e","Args":""},{"Uniquefunname":"QWidget * getContent(int index)","Funname":"getContent","Returntype":"QWidget *","Args":"int index"},{"Uniquefunname":"QList\u003cQWidget * \u003e getContents()","Funname":"getContents","Returntype":"QList\u003cQWidget * \u003e","Args":""},{"Uniquefunname":"void hideEvent(QHideEvent * event)","Funname":"hideEvent","Returntype":"void","Args":"QHideEvent * event"},{"Uniquefunname":"QIcon icon()","Funname":"icon","Returntype":"QIcon","Args":""},{"Uniquefunname":"D_DECL_DEPRECATED QPixmap iconPixmap()","Funname":"iconPixmap","Returntype":"D_DECL_DEPRECATED QPixmap","Args":""},{"Uniquefunname":"void insertButtons(int index,const QStringList \u0026 text)","Funname":"insertButtons","Returntype":"void","Args":"int index,const QStringList \u0026 text"},{"Uniquefunname":"void insertSpacing(int index,int spacing)","Funname":"insertSpacing","Returntype":"void","Args":"int index,int spacing"},{"Uniquefunname":"void keyPressEvent(QKeyEvent * event)","Funname":"keyPressEvent","Returntype":"void","Args":"QKeyEvent * event"},{"Uniquefunname":"QString message()","Funname":"message","Returntype":"QString","Args":""},{"Uniquefunname":"void messageChanged(QString massage)","Funname":"messageChanged","Returntype":"void","Args":"QString massage"},{"Uniquefunname":"bool onButtonClickedClose()","Funname":"onButtonClickedClose","Returntype":"bool","Args":""},{"Uniquefunname":"void removeButton(QAbstractButton * button)","Funname":"removeButton","Returntype":"void","Args":"QAbstractButton * button"},{"Uniquefunname":"void removeButton(int index)","Funname":"removeButton","Returntype":"void","Args":"int index"},{"Uniquefunname":"void removeButtonByText(const QString \u0026 text)","Funname":"removeButtonByText","Returntype":"void","Args":"const QString \u0026 text"},{"Uniquefunname":"void resizeEvent(QResizeEvent * event)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * event"},{"Uniquefunname":"void setButtonIcon(int index,const QIcon \u0026 icon)","Funname":"setButtonIcon","Returntype":"void","Args":"int index,const QIcon \u0026 icon"},{"Uniquefunname":"void setButtonText(int index,const QString \u0026 text)","Funname":"setButtonText","Returntype":"void","Args":"int index,const QString \u0026 text"},{"Uniquefunname":"void setCloseButtonVisible(bool closeButtonVisible)","Funname":"setCloseButtonVisible","Returntype":"void","Args":"bool closeButtonVisible"},{"Uniquefunname":"void setContentLayoutContentsMargins(const QMargins \u0026 margins)","Funname":"setContentLayoutContentsMargins","Returntype":"void","Args":"const QMargins \u0026 margins"},{"Uniquefunname":"bool setDefaultButton(const QString \u0026 str)","Funname":"setDefaultButton","Returntype":"bool","Args":"const QString \u0026 str"},{"Uniquefunname":"bool setDefaultButton(int index)","Funname":"setDefaultButton","Returntype":"bool","Args":"int index"},{"Uniquefunname":"void setDefaultButton(QAbstractButton * button)","Funname":"setDefaultButton","Returntype":"void","Args":"QAbstractButton * button"},{"Uniquefunname":"D_DECL_DEPRECATED void setIcon(const QIcon \u0026 icon,const QSize \u0026 expectedSize)","Funname":"setIcon","Returntype":"D_DECL_DEPRECATED void","Args":"const QIcon \u0026 icon,const QSize \u0026 expectedSize"},{"Uniquefunname":"void setIcon(const QIcon \u0026 icon)","Funname":"setIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"D_DECL_DEPRECATED void setIconPixmap(const QPixmap \u0026 iconPixmap)","Funname":"setIconPixmap","Returntype":"D_DECL_DEPRECATED void","Args":"const QPixmap \u0026 iconPixmap"},{"Uniquefunname":"void setMessage(const QString \u0026 message)","Funname":"setMessage","Returntype":"void","Args":"const QString \u0026 message"},{"Uniquefunname":"void setOnButtonClickedClose(bool onButtonClickedClose)","Funname":"setOnButtonClickedClose","Returntype":"void","Args":"bool onButtonClickedClose"},{"Uniquefunname":"void setSpacing(int spacing)","Funname":"setSpacing","Returntype":"void","Args":"int spacing"},{"Uniquefunname":"void setTextFormat(Qt::TextFormat textFormat)","Funname":"setTextFormat","Returntype":"void","Args":"Qt::TextFormat textFormat"},{"Uniquefunname":"void setTitle(const QString \u0026 title)","Funname":"setTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setWordWrapMessage(bool wordWrap)","Funname":"setWordWrapMessage","Returntype":"void","Args":"bool wordWrap"},{"Uniquefunname":"void setWordWrapTitle(bool wordWrap)","Funname":"setWordWrapTitle","Returntype":"void","Args":"bool wordWrap"},{"Uniquefunname":"void showEvent(QShowEvent * event)","Funname":"showEvent","Returntype":"void","Args":"QShowEvent * event"},{"Uniquefunname":"void sizeChanged(QSize size)","Funname":"sizeChanged","Returntype":"void","Args":"QSize size"},{"Uniquefunname":"Qt textFormat()","Funname":"textFormat","Returntype":"Qt","Args":""},{"Uniquefunname":"void textFormatChanged(Qt::TextFormat textFormat)","Funname":"textFormatChanged","Returntype":"void","Args":"Qt::TextFormat textFormat"},{"Uniquefunname":"QString title()","Funname":"title","Returntype":"QString","Args":""},{"Uniquefunname":"void titleChanged(QString title)","Funname":"titleChanged","Returntype":"void","Args":"QString title"},{"Uniquefunname":"void visibleChanged(bool visible)","Funname":"visibleChanged","Returntype":"void","Args":"bool visible"}],"Records":[{"Name":"enum:ButtonType","Fields":["ButtonNormal","ButtonRecommend","ButtonWarning"]},{"Name":"macro","Fields":["DDIALOG_H"]}]}
{"Filepath":"src/widgets/ddialogclosebutton.h","Functions":null,"Records":[{"Name":"macro","Fields":["DDIALOGCLOSEBUTTON_H"]}]}
{"Filepath":"src/widgets/ddrawer.h","Functions":[{"Uniquefunname":"    D_DECLARE_PRIVATE(DDrawer)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DDrawer"},{"Uniquefunname":"bool expand()","Funname":"expand","Returntype":"bool","Args":""},{"Uniquefunname":"Q_SIGNALS expandChange(bool e)","Funname":"expandChange","Returntype":"Q_SIGNALS","Args":"bool e"},{"Uniquefunname":"QWidget * getContent()","Funname":"getContent","Returntype":"QWidget *","Args":""},{"Uniquefunname":"void resizeEvent(QResizeEvent * e)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * e"},{"Uniquefunname":"void setAnimationDuration(int duration)","Funname":"setAnimationDuration","Returntype":"void","Args":"int duration"},{"Uniquefunname":"void setAnimationEasingCurve(QEasingCurve curve)","Funname":"setAnimationEasingCurve","Returntype":"void","Args":"QEasingCurve curve"},{"Uniquefunname":"virtual void setExpand(bool value)","Funname":"setExpand","Returntype":"virtual void","Args":"bool value"},{"Uniquefunname":"void setExpandedSeparatorVisible(bool arg)","Funname":"setExpandedSeparatorVisible","Returntype":"void","Args":"bool arg"},{"Uniquefunname":"void setHeader(QWidget * header)","Funname":"setHeader","Returntype":"void","Args":"QWidget * header"},{"Uniquefunname":"void setHeaderHeight(int height)","Funname":"setHeaderHeight","Returntype":"void","Args":"int height"},{"Uniquefunname":"void setSeparatorVisible(bool arg)","Funname":"setSeparatorVisible","Returntype":"void","Args":"bool arg"},{"Uniquefunname":"void sizeChanged(QSize s)","Funname":"sizeChanged","Returntype":"void","Args":"QSize s"}],"Records":[{"Name":"macro","Fields":["DDRAWER_H"]}]}
{"Filepath":"src/widgets/ddrawergroup.h","Functions":[{"Uniquefunname":"    D_DECLARE_PRIVATE(DDrawerGroup)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DDrawerGroup"},{"Uniquefunname":"DDrawer * checkedExpand()","Funname":"checkedExpand","Returntype":"DDrawer *","Args":""},{"Uniquefunname":"int checkedId()","Funname":"checkedId","Returntype":"int","Args":""},{"Uniquefunname":"DDrawer * expand(int id)","Funname":"expand","Returntype":"DDrawer *","Args":"int id"},{"Uniquefunname":"QList\u003cDDrawer * \u003e expands()","Funname":"expands","Returntype":"QList\u003cDDrawer * \u003e","Args":""},{"Uniquefunname":"int id(DDrawer * expand)","Funname":"id","Returntype":"int","Args":"DDrawer * expand"},{"Uniquefunname":"private onExpandChanged(bool v)","Funname":"onExpandChanged","Returntype":"private","Args":"bool v"},{"Uniquefunname":"void removeExpand(DDrawer * expand)","Funname":"removeExpand","Returntype":"void","Args":"DDrawer * expand"},{"Uniquefunname":"void setId(DDrawer * expand,int id)","Funname":"setId","Returntype":"void","Args":"DDrawer * expand,int id"}],"Records":[{"Name":"macro","Fields":["DDRAWERGROUP_H"]}]}
{"Filepath":"src/widgets/denhancedwidget.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(QWidget *target READ target WRITE setTarget NOTIFY targetChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"QWidget * target READ target WRITE setTarget NOTIFY targetChanged"},{"Uniquefunname":"bool enabled()","Funname":"enabled","Returntype":"bool","Args":""},{"Uniquefunname":"void enabledChanged(bool enabled)","Funname":"enabledChanged","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"protected eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"protected","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"void heightChanged(int height)","Funname":"heightChanged","Returntype":"void","Args":"int height"},{"Uniquefunname":"void positionChanged(const QPoint \u0026 point)","Funname":"positionChanged","Returntype":"void","Args":"const QPoint \u0026 point"},{"Uniquefunname":"void setEnabled(bool enabled)","Funname":"setEnabled","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"public Q_SLOTS setTarget(QWidget * target)","Funname":"setTarget","Returntype":"public Q_SLOTS","Args":"QWidget * target"},{"Uniquefunname":"void showed()","Funname":"showed","Returntype":"void","Args":""},{"Uniquefunname":"void sizeChanged(const QSize \u0026 size)","Funname":"sizeChanged","Returntype":"void","Args":"const QSize \u0026 size"},{"Uniquefunname":"QWidget * target()","Funname":"target","Returntype":"QWidget *","Args":""},{"Uniquefunname":"void targetChanged(QWidget * target)","Funname":"targetChanged","Returntype":"void","Args":"QWidget * target"},{"Uniquefunname":"void widthChanged(int width)","Funname":"widthChanged","Returntype":"void","Args":"int width"},{"Uniquefunname":"Q_SIGNALS xChanged(int x)","Funname":"xChanged","Returntype":"Q_SIGNALS","Args":"int x"},{"Uniquefunname":"void yChanged(int y)","Funname":"yChanged","Returntype":"void","Args":"int y"},{"Uniquefunname":" ~DEnhancedWidget()","Funname":"~DEnhancedWidget","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DENHANCEDWIDGET_H"]}]}
{"Filepath":"src/widgets/dexpandgroup.h","Functions":[{"Uniquefunname":"DBaseExpand * checkedExpand()","Funname":"checkedExpand","Returntype":"DBaseExpand *","Args":""},{"Uniquefunname":"int checkedId()","Funname":"checkedId","Returntype":"int","Args":""},{"Uniquefunname":"DBaseExpand * expand(int id)","Funname":"expand","Returntype":"DBaseExpand *","Args":"int id"},{"Uniquefunname":"QList\u003cDBaseExpand * \u003e expands()","Funname":"expands","Returntype":"QList\u003cDBaseExpand * \u003e","Args":""},{"Uniquefunname":"int id(DBaseExpand * expand)","Funname":"id","Returntype":"int","Args":"DBaseExpand * expand"},{"Uniquefunname":"private onExpandChanged(bool v)","Funname":"onExpandChanged","Returntype":"private","Args":"bool v"},{"Uniquefunname":"void removeExpand(DBaseExpand * expand)","Funname":"removeExpand","Returntype":"void","Args":"DBaseExpand * expand"},{"Uniquefunname":"void setId(DBaseExpand * expand,int id)","Funname":"setId","Returntype":"void","Args":"DBaseExpand * expand,int id"}],"Records":[{"Name":"macro","Fields":["EXPANDGROUP_H"]}]}
{"Filepath":"src/widgets/dfilechooseredit.h","Functions":[{"Uniquefunname":"void dialogClosed(int code)","Funname":"dialogClosed","Returntype":"void","Args":"int code"},{"Uniquefunname":"DFileChooserEdit dialogDisplayPosition()","Funname":"dialogDisplayPosition","Returntype":"DFileChooserEdit","Args":""},{"Uniquefunname":"void dialogOpened()","Funname":"dialogOpened","Returntype":"void","Args":""},{"Uniquefunname":"QUrl directoryUrl()","Funname":"directoryUrl","Returntype":"QUrl","Args":""},{"Uniquefunname":"Q_SIGNALS fileChoosed(const QString \u0026 fileName)","Funname":"fileChoosed","Returntype":"Q_SIGNALS","Args":"const QString \u0026 fileName"},{"Uniquefunname":"QFileDialog * fileDialog()","Funname":"fileDialog","Returntype":"QFileDialog *","Args":""},{"Uniquefunname":"QFileDialog fileMode()","Funname":"fileMode","Returntype":"QFileDialog","Args":""},{"Uniquefunname":"void initDialog()","Funname":"initDialog","Returntype":"void","Args":""},{"Uniquefunname":"QStringList nameFilters()","Funname":"nameFilters","Returntype":"QStringList","Args":""},{"Uniquefunname":"void setDialogDisplayPosition(DialogDisplayPosition dialogDisplayPosition)","Funname":"setDialogDisplayPosition","Returntype":"void","Args":"DialogDisplayPosition dialogDisplayPosition"},{"Uniquefunname":"void setDirectoryUrl(const QUrl \u0026 directory)","Funname":"setDirectoryUrl","Returntype":"void","Args":"const QUrl \u0026 directory"},{"Uniquefunname":"void setFileDialog(QFileDialog * fileDialog)","Funname":"setFileDialog","Returntype":"void","Args":"QFileDialog * fileDialog"},{"Uniquefunname":"void setFileMode(QFileDialog::FileMode mode)","Funname":"setFileMode","Returntype":"void","Args":"QFileDialog::FileMode mode"},{"Uniquefunname":"void setNameFilters(const QStringList \u0026 filters)","Funname":"setNameFilters","Returntype":"void","Args":"const QStringList \u0026 filters"}],"Records":[{"Name":"enum:DialogDisplayPosition","Fields":["CurrentMonitorCenter","FollowParentWindow"]},{"Name":"macro","Fields":["DFILECHOOSEREDIT_H"]}]}
{"Filepath":"src/widgets/dfiledialog.h","Functions":[{"Uniquefunname":"Q_OBJECT public DFileDialog(QWidget * parent,Qt::WindowFlags f)","Funname":"DFileDialog","Returntype":"Q_OBJECT public","Args":"QWidget * parent,Qt::WindowFlags f"},{"Uniquefunname":"void addComboBox(const QString \u0026 text,const DComboBoxOptions \u0026 options)","Funname":"addComboBox","Returntype":"void","Args":"const QString \u0026 text,const DComboBoxOptions \u0026 options"},{"Uniquefunname":"void addComboBox(const QString \u0026 text,const QStringList \u0026 data)","Funname":"addComboBox","Returntype":"void","Args":"const QString \u0026 text,const QStringList \u0026 data"},{"Uniquefunname":"void addLineEdit(const QString \u0026 text)","Funname":"addLineEdit","Returntype":"void","Args":"const QString \u0026 text"},{"Uniquefunname":"void addLineEdit(const QString \u0026 text,const DLineEditOptions \u0026 options)","Funname":"addLineEdit","Returntype":"void","Args":"const QString \u0026 text,const DLineEditOptions \u0026 options"},{"Uniquefunname":"QString getComboBoxValue(const QString \u0026 text)","Funname":"getComboBoxValue","Returntype":"QString","Args":"const QString \u0026 text"},{"Uniquefunname":"QString getLineEditValue(const QString \u0026 text)","Funname":"getLineEditValue","Returntype":"QString","Args":"const QString \u0026 text"},{"Uniquefunname":"void setAllowMixedSelection(bool on)","Funname":"setAllowMixedSelection","Returntype":"void","Args":"bool on"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"}],"Records":[{"Name":"struct:DComboBoxOptions","Fields":["QStringList DComboBoxOptions::data","QString DComboBoxOptions::defaultValue","bool DComboBoxOptions::editable"]},{"Name":"macro","Fields":["DFILEDIALOG_H"]},{"Name":"struct:DLineEditOptions","Fields":["QString DLineEditOptions::defaultValue","QLineEdit::EchoMode DLineEditOptions::echoMode","QString DLineEditOptions::inputMask","int DLineEditOptions::maxLength","QString DLineEditOptions::placeholderText"]}]}
{"Filepath":"src/widgets/dfloatingbutton.h","Functions":[{"Uniquefunname":"protected baseStyleOption()","Funname":"baseStyleOption","Returntype":"protected","Args":""},{"Uniquefunname":"void initStyleOption(DStyleOptionButton * option)","Funname":"initStyleOption","Returntype":"void","Args":"DStyleOptionButton * option"}],"Records":[{"Name":"macro","Fields":["DFLOATINGBUTTON_H"]}]}
{"Filepath":"src/widgets/dfloatingmessage.h","Functions":[{"Uniquefunname":"Q_SIGNALS closeButtonClicked()","Funname":"closeButtonClicked","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"MessageType messageType()","Funname":"messageType","Returntype":"MessageType","Args":""},{"Uniquefunname":"void setDuration(int msec)","Funname":"setDuration","Returntype":"void","Args":"int msec"},{"Uniquefunname":"void setIcon(const QIcon \u0026 ico)","Funname":"setIcon","Returntype":"void","Args":"const QIcon \u0026 ico"},{"Uniquefunname":"void setMessage(const QString \u0026 str)","Funname":"setMessage","Returntype":"void","Args":"const QString \u0026 str"},{"Uniquefunname":"void setWidget(QWidget * w)","Funname":"setWidget","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"private showEvent(QShowEvent * event)","Funname":"showEvent","Returntype":"private","Args":"QShowEvent * event"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DFLOATINGMESSAGE_H"]},{"Name":"enum:MessageType","Fields":["ResidentType","TransientType"]}]}
{"Filepath":"src/widgets/dfloatingwidget.h","Functions":[{"Uniquefunname":"protected DFloatingWidget(DFloatingWidgetPrivate \u0026 dd,QWidget * parent)","Funname":"DFloatingWidget","Returntype":"protected","Args":"DFloatingWidgetPrivate \u0026 dd,QWidget * parent"},{"Uniquefunname":"    D_DECLARE_PRIVATE(DFloatingWidget)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DFloatingWidget"},{"Uniquefunname":"DBlurEffectWidget * blurBackground()","Funname":"blurBackground","Returntype":"DBlurEffectWidget *","Args":""},{"Uniquefunname":"bool blurBackgroundIsEnabled()","Funname":"blurBackgroundIsEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"bool event(QEvent * event)","Funname":"event","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"public initStyleOption(DStyleOptionFloatingWidget * option)","Funname":"initStyleOption","Returntype":"public","Args":"DStyleOptionFloatingWidget * option"},{"Uniquefunname":"void paintEvent(QPaintEvent * e)","Funname":"paintEvent","Returntype":"void","Args":"QPaintEvent * e"},{"Uniquefunname":"public Q_SLOTS setBlurBackgroundEnabled(bool blurBackgroundEnabled)","Funname":"setBlurBackgroundEnabled","Returntype":"public Q_SLOTS","Args":"bool blurBackgroundEnabled"},{"Uniquefunname":"void setFramRadius(int radius)","Funname":"setFramRadius","Returntype":"void","Args":"int radius"},{"Uniquefunname":"void setWidget(QWidget * widget)","Funname":"setWidget","Returntype":"void","Args":"QWidget * widget"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DFLOATINGWIDGET_H"]}]}
{"Filepath":"src/widgets/dflowlayout.h","Functions":[{"Uniquefunname":" DFlowLayout()","Funname":"DFlowLayout","Returntype":"","Args":""},{"Uniquefunname":"    Q_ENUMS(Flow)","Funname":"Q_ENUMS","Returntype":"","Args":"Flow"},{"Uniquefunname":"void addItem(QLayoutItem * item)","Funname":"addItem","Returntype":"void","Args":"QLayoutItem * item"},{"Uniquefunname":"void addSpacerItem(QSpacerItem * spacerItem)","Funname":"addSpacerItem","Returntype":"void","Args":"QSpacerItem * spacerItem"},{"Uniquefunname":"void addSpacing(int size)","Funname":"addSpacing","Returntype":"void","Args":"int size"},{"Uniquefunname":"int count()","Funname":"count","Returntype":"int","Args":""},{"Uniquefunname":"void countChanged(int count)","Funname":"countChanged","Returntype":"void","Args":"int count"},{"Uniquefunname":"Qt expandingDirections()","Funname":"expandingDirections","Returntype":"Qt","Args":""},{"Uniquefunname":"Flow flow()","Funname":"flow","Returntype":"Flow","Args":""},{"Uniquefunname":"void flowChanged(Flow flow)","Funname":"flowChanged","Returntype":"void","Args":"Flow flow"},{"Uniquefunname":"bool hasHeightForWidth()","Funname":"hasHeightForWidth","Returntype":"bool","Args":""},{"Uniquefunname":"int heightForWidth(int)","Funname":"heightForWidth","Returntype":"int","Args":"int"},{"Uniquefunname":"int horizontalSpacing()","Funname":"horizontalSpacing","Returntype":"int","Args":""},{"Uniquefunname":"Q_SIGNALS horizontalSpacingChanged(int horizontalSpacing)","Funname":"horizontalSpacingChanged","Returntype":"Q_SIGNALS","Args":"int horizontalSpacing"},{"Uniquefunname":"void insertItem(int index,QLayoutItem * item)","Funname":"insertItem","Returntype":"void","Args":"int index,QLayoutItem * item"},{"Uniquefunname":"void insertLayout(int index,QLayout * layout)","Funname":"insertLayout","Returntype":"void","Args":"int index,QLayout * layout"},{"Uniquefunname":"void insertSpacerItem(int index,QSpacerItem * spacerItem)","Funname":"insertSpacerItem","Returntype":"void","Args":"int index,QSpacerItem * spacerItem"},{"Uniquefunname":"void insertSpacing(int index,int size)","Funname":"insertSpacing","Returntype":"void","Args":"int index,int size"},{"Uniquefunname":"void insertWidget(int index,QWidget * widget)","Funname":"insertWidget","Returntype":"void","Args":"int index,QWidget * widget"},{"Uniquefunname":"QLayoutItem * itemAt(int index)","Funname":"itemAt","Returntype":"QLayoutItem *","Args":"int index"},{"Uniquefunname":"QSize minimumSize()","Funname":"minimumSize","Returntype":"QSize","Args":""},{"Uniquefunname":"void setFlow(Flow flow)","Funname":"setFlow","Returntype":"void","Args":"Flow flow"},{"Uniquefunname":"void setGeometry(const QRect \u0026 rect)","Funname":"setGeometry","Returntype":"void","Args":"const QRect \u0026 rect"},{"Uniquefunname":"public Q_SLOTS setHorizontalSpacing(int horizontalSpacing)","Funname":"setHorizontalSpacing","Returntype":"public Q_SLOTS","Args":"int horizontalSpacing"},{"Uniquefunname":"void setSpacing(int spacing)","Funname":"setSpacing","Returntype":"void","Args":"int spacing"},{"Uniquefunname":"void setVerticalSpacing(int verticalSpacing)","Funname":"setVerticalSpacing","Returntype":"void","Args":"int verticalSpacing"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""},{"Uniquefunname":"void sizeHintChanged(QSize sizeHint)","Funname":"sizeHintChanged","Returntype":"void","Args":"QSize sizeHint"},{"Uniquefunname":"QLayoutItem * takeAt(int index)","Funname":"takeAt","Returntype":"QLayoutItem *","Args":"int index"},{"Uniquefunname":"int verticalSpacing()","Funname":"verticalSpacing","Returntype":"int","Args":""},{"Uniquefunname":"void verticalSpacingChanged(int verticalSpacing)","Funname":"verticalSpacingChanged","Returntype":"void","Args":"int verticalSpacing"},{"Uniquefunname":" ~DFlowLayout()","Funname":"~DFlowLayout","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DFLOWLAYOUT_H"]}]}
{"Filepath":"src/widgets/dframe.h","Functions":[{"Uniquefunname":"    D_DECLARE_PRIVATE(DFrame)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DFrame"},{"Uniquefunname":"void paintEvent(QPaintEvent * event)","Funname":"paintEvent","Returntype":"void","Args":"QPaintEvent * event"},{"Uniquefunname":"void setBackgroundRole(DGUI_NAMESPACE::DPalette::ColorType type)","Funname":"setBackgroundRole","Returntype":"void","Args":"DGUI_NAMESPACE::DPalette::ColorType type"},{"Uniquefunname":"void setFrameRounded(bool on)","Funname":"setFrameRounded","Returntype":"void","Args":"bool on"},{"Uniquefunname":" setFrameShape(HLine)","Funname":"setFrameShape","Returntype":"","Args":"HLine"},{"Uniquefunname":" setFrameShape(VLine)","Funname":"setFrameShape","Returntype":"","Args":"VLine"}],"Records":[{"Name":"macro","Fields":["DFRAME_H"]}]}
{"Filepath":"src/widgets/dgraphicsclipeffect.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(QMargins margins READ margins WRITE setMargins NOTIFY marginsChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"QMargins margins READ margins WRITE setMargins NOTIFY marginsChanged"},{"Uniquefunname":"QPainterPath clipPath()","Funname":"clipPath","Returntype":"QPainterPath","Args":""},{"Uniquefunname":"void clipPathChanged(QPainterPath clipPath)","Funname":"clipPathChanged","Returntype":"void","Args":"QPainterPath clipPath"},{"Uniquefunname":"protected draw(QPainter * painter)","Funname":"draw","Returntype":"protected","Args":"QPainter * painter"},{"Uniquefunname":"QMargins margins()","Funname":"margins","Returntype":"QMargins","Args":""},{"Uniquefunname":"Q_SIGNALS marginsChanged(QMargins margins)","Funname":"marginsChanged","Returntype":"Q_SIGNALS","Args":"QMargins margins"},{"Uniquefunname":"void setClipPath(const QPainterPath \u0026 clipPath)","Funname":"setClipPath","Returntype":"void","Args":"const QPainterPath \u0026 clipPath"},{"Uniquefunname":"public Q_SLOTS setMargins(const QMargins \u0026 margins)","Funname":"setMargins","Returntype":"public Q_SLOTS","Args":"const QMargins \u0026 margins"}],"Records":[{"Name":"macro","Fields":["DGRAPHICSCLIPEFFECT_H"]}]}
{"Filepath":"src/widgets/dgraphicsgloweffect.h","Functions":[{"Uniquefunname":"qreal blurRadius()","Funname":"blurRadius","Returntype":"qreal","Args":""},{"Uniquefunname":"QRectF boundingRectFor(const QRectF \u0026 rect)","Funname":"boundingRectFor","Returntype":"QRectF","Args":"const QRectF \u0026 rect"},{"Uniquefunname":"QColor color()","Funname":"color","Returntype":"QColor","Args":""},{"Uniquefunname":"qreal distance()","Funname":"distance","Returntype":"qreal","Args":""},{"Uniquefunname":"void draw(QPainter * painter)","Funname":"draw","Returntype":"void","Args":"QPainter * painter"},{"Uniquefunname":"qreal opacity()","Funname":"opacity","Returntype":"qreal","Args":""},{"Uniquefunname":"void setBlurRadius(qreal blurRadius)","Funname":"setBlurRadius","Returntype":"void","Args":"qreal blurRadius"},{"Uniquefunname":"void setColor(const QColor \u0026 color)","Funname":"setColor","Returntype":"void","Args":"const QColor \u0026 color"},{"Uniquefunname":"void setDistance(qreal distance)","Funname":"setDistance","Returntype":"void","Args":"qreal distance"},{"Uniquefunname":"void setOffset(qreal dx,qreal dy)","Funname":"setOffset","Returntype":"void","Args":"qreal dx,qreal dy"},{"Uniquefunname":"void setOpacity(qreal opacity)","Funname":"setOpacity","Returntype":"void","Args":"qreal opacity"},{"Uniquefunname":"void setXOffset(qreal dx)","Funname":"setXOffset","Returntype":"void","Args":"qreal dx"},{"Uniquefunname":"void setYOffset(qreal dy)","Funname":"setYOffset","Returntype":"void","Args":"qreal dy"},{"Uniquefunname":"qreal xOffset()","Funname":"xOffset","Returntype":"qreal","Args":""},{"Uniquefunname":"qreal yOffset()","Funname":"yOffset","Returntype":"qreal","Args":""}],"Records":[{"Name":"macro","Fields":["DGRAPHICSGLOWEFFECT_H"]}]}
{"Filepath":"src/widgets/dheaderline.h","Functions":[{"Uniquefunname":"void setContent(QWidget * content)","Funname":"setContent","Returntype":"void","Args":"QWidget * content"},{"Uniquefunname":"private setLeftContent(QWidget * content)","Funname":"setLeftContent","Returntype":"private","Args":"QWidget * content"},{"Uniquefunname":"void setRightContent(QWidget * content)","Funname":"setRightContent","Returntype":"void","Args":"QWidget * content"},{"Uniquefunname":"void setTitle(const QString \u0026 title)","Funname":"setTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"QString title()","Funname":"title","Returntype":"QString","Args":""}],"Records":[{"Name":"macro","Fields":["DHEADERLINE_H"]}]}
{"Filepath":"src/widgets/dialog_constants.h","Functions":null,"Records":[{"Name":"macro","Fields":["BUTTON_CONSTANTS_H"]}]}
{"Filepath":"src/widgets/diconbutton.h","Functions":[{"Uniquefunname":"    D_DECLARE_PRIVATE(DIconButton)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DIconButton"},{"Uniquefunname":"virtual DStyleOptionButton baseStyleOption()","Funname":"baseStyleOption","Returntype":"virtual DStyleOptionButton","Args":""},{"Uniquefunname":"bool enabledCircle()","Funname":"enabledCircle","Returntype":"bool","Args":""},{"Uniquefunname":"bool event(QEvent * e)","Funname":"event","Returntype":"bool","Args":"QEvent * e"},{"Uniquefunname":"QSize iconSize()","Funname":"iconSize","Returntype":"QSize","Args":""},{"Uniquefunname":"virtual void initStyleOption(DStyleOptionButton * option)","Funname":"initStyleOption","Returntype":"virtual void","Args":"DStyleOptionButton * option"},{"Uniquefunname":"bool isFlat()","Funname":"isFlat","Returntype":"bool","Args":""},{"Uniquefunname":"void keyPressEvent(QKeyEvent * event)","Funname":"keyPressEvent","Returntype":"void","Args":"QKeyEvent * event"},{"Uniquefunname":"QSize minimumSizeHint()","Funname":"minimumSizeHint","Returntype":"QSize","Args":""},{"Uniquefunname":"private paintEvent(QPaintEvent * event)","Funname":"paintEvent","Returntype":"private","Args":"QPaintEvent * event"},{"Uniquefunname":"void setEnabledCircle(bool status)","Funname":"setEnabledCircle","Returntype":"void","Args":"bool status"},{"Uniquefunname":"public Q_SLOTS setFlat(bool flat)","Funname":"setFlat","Returntype":"public Q_SLOTS","Args":"bool flat"},{"Uniquefunname":"void setIcon(DStyle::StandardPixmap iconType)","Funname":"setIcon","Returntype":"void","Args":"DStyle::StandardPixmap iconType"},{"Uniquefunname":"void setIcon(QStyle::StandardPixmap iconType)","Funname":"setIcon","Returntype":"void","Args":"QStyle::StandardPixmap iconType"},{"Uniquefunname":"void setIcon(const QIcon \u0026 icon)","Funname":"setIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DICONBUTTON_H"]}]}
{"Filepath":"src/widgets/dimagebutton.h","Functions":[{"Uniquefunname":"protected DImageButton(DImageButtonPrivate \u0026 q,QWidget * parent)","Funname":"DImageButton","Returntype":"protected","Args":"DImageButtonPrivate \u0026 q,QWidget * parent"},{"Uniquefunname":"    Q_PROPERTY(QString normalPic READ getNormalPic WRITE setNormalPic DESIGNABLE true)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"QString normalPic READ getNormalPic WRITE setNormalPic DESIGNABLE true"},{"Uniquefunname":"void checkedChanged(bool checked)","Funname":"checkedChanged","Returntype":"void","Args":"bool checked"},{"Uniquefunname":"Q_SIGNALS clicked()","Funname":"clicked","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"void enterEvent(QEvent * event)","Funname":"enterEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"const QString getCheckedPic()","Funname":"getCheckedPic","Returntype":"const QString","Args":""},{"Uniquefunname":"const QString getDisabledPic()","Funname":"getDisabledPic","Returntype":"const QString","Args":""},{"Uniquefunname":"const QString getHoverPic()","Funname":"getHoverPic","Returntype":"const QString","Args":""},{"Uniquefunname":"const QString getNormalPic()","Funname":"getNormalPic","Returntype":"const QString","Args":""},{"Uniquefunname":"const QString getPressPic()","Funname":"getPressPic","Returntype":"const QString","Args":""},{"Uniquefunname":"State getState()","Funname":"getState","Returntype":"State","Args":""},{"Uniquefunname":"bool isCheckable()","Funname":"isCheckable","Returntype":"bool","Args":""},{"Uniquefunname":"bool isChecked()","Funname":"isChecked","Returntype":"bool","Args":""},{"Uniquefunname":"void leaveEvent(QEvent * event)","Funname":"leaveEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"void mouseMoveEvent(QMouseEvent * event)","Funname":"mouseMoveEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"void mousePressEvent(QMouseEvent * event)","Funname":"mousePressEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"void mouseReleaseEvent(QMouseEvent * event)","Funname":"mouseReleaseEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"void setCheckable(bool flag)","Funname":"setCheckable","Returntype":"void","Args":"bool flag"},{"Uniquefunname":"void setChecked(bool flag)","Funname":"setChecked","Returntype":"void","Args":"bool flag"},{"Uniquefunname":"void setCheckedPic(const QString \u0026 checkedPic)","Funname":"setCheckedPic","Returntype":"void","Args":"const QString \u0026 checkedPic"},{"Uniquefunname":"void setDisabled(bool disabled)","Funname":"setDisabled","Returntype":"void","Args":"bool disabled"},{"Uniquefunname":"void setDisabledPic(const QString \u0026 disabledPic)","Funname":"setDisabledPic","Returntype":"void","Args":"const QString \u0026 disabledPic"},{"Uniquefunname":"void setEnabled(bool enabled)","Funname":"setEnabled","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setHoverPic(const QString \u0026 hoverPic)","Funname":"setHoverPic","Returntype":"void","Args":"const QString \u0026 hoverPic"},{"Uniquefunname":"void setNormalPic(const QString \u0026 normalPic)","Funname":"setNormalPic","Returntype":"void","Args":"const QString \u0026 normalPic"},{"Uniquefunname":"void setPressPic(const QString \u0026 pressPic)","Funname":"setPressPic","Returntype":"void","Args":"const QString \u0026 pressPic"},{"Uniquefunname":"void setState(State state)","Funname":"setState","Returntype":"void","Args":"State state"},{"Uniquefunname":"void stateChanged()","Funname":"stateChanged","Returntype":"void","Args":""},{"Uniquefunname":" ~DImageButton()","Funname":"~DImageButton","Returntype":"","Args":""}],"Records":[{"Name":"enum:State","Fields":["Checked","Disabled","Hover","Normal","Press"]},{"Name":"macro","Fields":["DIMAGEBUTTON_H"]}]}
{"Filepath":"src/widgets/dinputdialog.h","Functions":[{"Uniquefunname":"void cancelButtonClicked()","Funname":"cancelButtonClicked","Returntype":"void","Args":""},{"Uniquefunname":"QString cancelButtonText()","Funname":"cancelButtonText","Returntype":"QString","Args":""},{"Uniquefunname":"int comboBoxCurrentIndex()","Funname":"comboBoxCurrentIndex","Returntype":"int","Args":""},{"Uniquefunname":"void comboBoxCurrentIndexChanged(int comboBoxCurrentIndex)","Funname":"comboBoxCurrentIndexChanged","Returntype":"void","Args":"int comboBoxCurrentIndex"},{"Uniquefunname":"QStringList comboBoxItems()","Funname":"comboBoxItems","Returntype":"QStringList","Args":""},{"Uniquefunname":"int doubleDecimals()","Funname":"doubleDecimals","Returntype":"int","Args":""},{"Uniquefunname":"double doubleMaximum()","Funname":"doubleMaximum","Returntype":"double","Args":""},{"Uniquefunname":"double doubleMinimum()","Funname":"doubleMinimum","Returntype":"double","Args":""},{"Uniquefunname":"double doubleValue()","Funname":"doubleValue","Returntype":"double","Args":""},{"Uniquefunname":"void doubleValueChanged(double value)","Funname":"doubleValueChanged","Returntype":"void","Args":"double value"},{"Uniquefunname":"void doubleValueSelected(double value)","Funname":"doubleValueSelected","Returntype":"void","Args":"double value"},{"Uniquefunname":"InputMode inputMode()","Funname":"inputMode","Returntype":"InputMode","Args":""},{"Uniquefunname":"int intMaximum()","Funname":"intMaximum","Returntype":"int","Args":""},{"Uniquefunname":"int intMinimum()","Funname":"intMinimum","Returntype":"int","Args":""},{"Uniquefunname":"int intStep()","Funname":"intStep","Returntype":"int","Args":""},{"Uniquefunname":"int intValue()","Funname":"intValue","Returntype":"int","Args":""},{"Uniquefunname":"void intValueChanged(int value)","Funname":"intValueChanged","Returntype":"void","Args":"int value"},{"Uniquefunname":"void intValueSelected(int value)","Funname":"intValueSelected","Returntype":"void","Args":"int value"},{"Uniquefunname":"bool isComboBoxEditable()","Funname":"isComboBoxEditable","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTextAlert()","Funname":"isTextAlert","Returntype":"bool","Args":""},{"Uniquefunname":"void okButtonClicked()","Funname":"okButtonClicked","Returntype":"void","Args":""},{"Uniquefunname":"bool okButtonIsEnabled()","Funname":"okButtonIsEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QString okButtonText()","Funname":"okButtonText","Returntype":"QString","Args":""},{"Uniquefunname":"Q_SLOT void setCancelButtonText(const QString \u0026 text)","Funname":"setCancelButtonText","Returntype":"Q_SLOT void","Args":"const QString \u0026 text"},{"Uniquefunname":"Q_SLOT void setComboBoxCurrentIndex(int comboBoxCurrentIndex)","Funname":"setComboBoxCurrentIndex","Returntype":"Q_SLOT void","Args":"int comboBoxCurrentIndex"},{"Uniquefunname":"Q_SLOT void setComboBoxEditable(bool editable)","Funname":"setComboBoxEditable","Returntype":"Q_SLOT void","Args":"bool editable"},{"Uniquefunname":"Q_SLOT void setComboBoxItems(const QStringList \u0026 items)","Funname":"setComboBoxItems","Returntype":"Q_SLOT void","Args":"const QStringList \u0026 items"},{"Uniquefunname":"Q_SLOT void setDoubleDecimals(int decimals)","Funname":"setDoubleDecimals","Returntype":"Q_SLOT void","Args":"int decimals"},{"Uniquefunname":"Q_SLOT void setDoubleMaximum(double max)","Funname":"setDoubleMaximum","Returntype":"Q_SLOT void","Args":"double max"},{"Uniquefunname":"Q_SLOT void setDoubleMinimum(double min)","Funname":"setDoubleMinimum","Returntype":"Q_SLOT void","Args":"double min"},{"Uniquefunname":"Q_SLOT void setDoubleRange(double min,double max)","Funname":"setDoubleRange","Returntype":"Q_SLOT void","Args":"double min,double max"},{"Uniquefunname":"Q_SLOT void setDoubleValue(double value)","Funname":"setDoubleValue","Returntype":"Q_SLOT void","Args":"double value"},{"Uniquefunname":"Q_SLOT void setInputMode(InputMode mode)","Funname":"setInputMode","Returntype":"Q_SLOT void","Args":"InputMode mode"},{"Uniquefunname":"Q_SLOT void setIntMaximum(int max)","Funname":"setIntMaximum","Returntype":"Q_SLOT void","Args":"int max"},{"Uniquefunname":"Q_SLOT void setIntMinimum(int min)","Funname":"setIntMinimum","Returntype":"Q_SLOT void","Args":"int min"},{"Uniquefunname":"Q_SLOT void setIntRange(int min,int max)","Funname":"setIntRange","Returntype":"Q_SLOT void","Args":"int min,int max"},{"Uniquefunname":"Q_SLOT void setIntStep(int step)","Funname":"setIntStep","Returntype":"Q_SLOT void","Args":"int step"},{"Uniquefunname":"Q_SLOT void setIntValue(int value)","Funname":"setIntValue","Returntype":"Q_SLOT void","Args":"int value"},{"Uniquefunname":"Q_SLOT void setOkButtonEnabled(const bool enable)","Funname":"setOkButtonEnabled","Returntype":"Q_SLOT void","Args":"const bool enable"},{"Uniquefunname":"Q_SLOT void setOkButtonText(const QString \u0026 text)","Funname":"setOkButtonText","Returntype":"Q_SLOT void","Args":"const QString \u0026 text"},{"Uniquefunname":"Q_SLOT void setTextAlert(bool textAlert)","Funname":"setTextAlert","Returntype":"Q_SLOT void","Args":"bool textAlert"},{"Uniquefunname":"Q_SLOT void setTextEchoMode(QLineEdit::EchoMode mode)","Funname":"setTextEchoMode","Returntype":"Q_SLOT void","Args":"QLineEdit::EchoMode mode"},{"Uniquefunname":"Q_SLOT void setTextValue(const QString \u0026 text)","Funname":"setTextValue","Returntype":"Q_SLOT void","Args":"const QString \u0026 text"},{"Uniquefunname":"protected showEvent(QShowEvent * e)","Funname":"showEvent","Returntype":"protected","Args":"QShowEvent * e"},{"Uniquefunname":"void textAlertChanged(bool textAlert)","Funname":"textAlertChanged","Returntype":"void","Args":"bool textAlert"},{"Uniquefunname":"QLineEdit textEchoMode()","Funname":"textEchoMode","Returntype":"QLineEdit","Args":""},{"Uniquefunname":"QString textValue()","Funname":"textValue","Returntype":"QString","Args":""},{"Uniquefunname":"Q_SIGNALS textValueChanged(const QString \u0026 text)","Funname":"textValueChanged","Returntype":"Q_SIGNALS","Args":"const QString \u0026 text"},{"Uniquefunname":"void textValueSelected(const QString \u0026 text)","Funname":"textValueSelected","Returntype":"void","Args":"const QString \u0026 text"}],"Records":[{"Name":"enum:InputMode","Fields":["ComboBox","DoubleInput","IntInput","TextInput"]},{"Name":"macro","Fields":["DINPUTDIALOG_H"]}]}
{"Filepath":"src/widgets/dinputdialog_p.h","Functions":null,"Records":[{"Name":"macro","Fields":["DINPUTDIALOG_P_H"]}]}
{"Filepath":"src/widgets/dipv4lineedit.h","Functions":[{"Uniquefunname":"private DIpv4LineEdit(DIpv4LineEditPrivate \u0026 q,QWidget * parent)","Funname":"DIpv4LineEdit","Returntype":"private","Args":"DIpv4LineEditPrivate \u0026 q,QWidget * parent"},{"Uniquefunname":"    Q_DISABLE_COPY(DIpv4LineEdit)","Funname":"Q_DISABLE_COPY","Returntype":"Q_OBJECT","Args":"DIpv4LineEdit"},{"Uniquefunname":"    Q_PRIVATE_SLOT(d_func(), void _q_updateLineEditText())","Funname":"Q_PRIVATE_SLOT","Returntype":"","Args":"d_func (),void _q_updateLineEditText ()"},{"Uniquefunname":"Qt alignment()","Funname":"alignment","Returntype":"Qt","Args":""},{"Uniquefunname":"int cursorPosition()","Funname":"cursorPosition","Returntype":"int","Args":""},{"Uniquefunname":"QString displayText()","Funname":"displayText","Returntype":"QString","Args":""},{"Uniquefunname":"protected eventFilter(QObject * obj,QEvent * e)","Funname":"eventFilter","Returntype":"protected","Args":"QObject * obj,QEvent * e"},{"Uniquefunname":"Q_SIGNALS focusChanged(bool focus)","Funname":"focusChanged","Returntype":"Q_SIGNALS","Args":"bool focus"},{"Uniquefunname":"bool hasAcceptableInput()","Funname":"hasAcceptableInput","Returntype":"bool","Args":""},{"Uniquefunname":"bool isReadOnly()","Funname":"isReadOnly","Returntype":"bool","Args":""},{"Uniquefunname":"void selectAll()","Funname":"selectAll","Returntype":"void","Args":""},{"Uniquefunname":"void setClearButtonEnabled(bool clearButtonEnabled)","Funname":"setClearButtonEnabled","Returntype":"void","Args":"bool clearButtonEnabled"},{"Uniquefunname":"public Q_SLOTS setCursorPosition(int cursorPosition)","Funname":"setCursorPosition","Returntype":"public Q_SLOTS","Args":"int cursorPosition"},{"Uniquefunname":"void setPlaceholderText(QString placeholderText)","Funname":"setPlaceholderText","Returntype":"void","Args":"QString placeholderText"},{"Uniquefunname":"void setReadOnly(bool readOnly)","Funname":"setReadOnly","Returntype":"void","Args":"bool readOnly"},{"Uniquefunname":"void setSelection(int start,int length)","Funname":"setSelection","Returntype":"void","Args":"int start,int length"}],"Records":[{"Name":"macro","Fields":["DIPV4LINEEDIT_H"]}]}
{"Filepath":"src/widgets/dkeysequenceedit.h","Functions":[{"Uniquefunname":"    Q_DISABLE_COPY(DKeySequenceEdit)","Funname":"Q_DISABLE_COPY","Returntype":"Q_OBJECT","Args":"DKeySequenceEdit"},{"Uniquefunname":"void ShortcutDirection(Qt::AlignmentFlag alig)","Funname":"ShortcutDirection","Returntype":"void","Args":"Qt::AlignmentFlag alig"},{"Uniquefunname":"void clear()","Funname":"clear","Returntype":"void","Args":""},{"Uniquefunname":"Q_SIGNALS editingFinished(const QKeySequence \u0026 keySequence)","Funname":"editingFinished","Returntype":"Q_SIGNALS","Args":"const QKeySequence \u0026 keySequence"},{"Uniquefunname":"bool event(QEvent * e)","Funname":"event","Returntype":"bool","Args":"QEvent * e"},{"Uniquefunname":"QString getKeySequence(QKeySequence sequence)","Funname":"getKeySequence","Returntype":"QString","Args":"QKeySequence sequence"},{"Uniquefunname":"protected keyPressEvent(QKeyEvent * event)","Funname":"keyPressEvent","Returntype":"protected","Args":"QKeyEvent * event"},{"Uniquefunname":"QKeySequence keySequence()","Funname":"keySequence","Returntype":"QKeySequence","Args":""},{"Uniquefunname":"void keySequenceChanged(const QKeySequence \u0026 keySequence)","Funname":"keySequenceChanged","Returntype":"void","Args":"const QKeySequence \u0026 keySequence"},{"Uniquefunname":"bool setKeySequence(const QKeySequence \u0026 keySequence)","Funname":"setKeySequence","Returntype":"bool","Args":"const QKeySequence \u0026 keySequence"}],"Records":[{"Name":"macro","Fields":["DKEYSEQUENCEEDIT_H"]}]}
{"Filepath":"src/widgets/dlabel.h","Functions":[{"Uniquefunname":"    Q_DISABLE_COPY(DLabel)","Funname":"Q_DISABLE_COPY","Returntype":"Q_OBJECT","Args":"DLabel"},{"Uniquefunname":"Qt elideMode()","Funname":"elideMode","Returntype":"Qt","Args":""},{"Uniquefunname":"void initPainter(QPainter * painter)","Funname":"initPainter","Returntype":"void","Args":"QPainter * painter"},{"Uniquefunname":"void paintEvent(QPaintEvent * event)","Funname":"paintEvent","Returntype":"void","Args":"QPaintEvent * event"},{"Uniquefunname":"void setElideMode(Qt::TextElideMode elideMode)","Funname":"setElideMode","Returntype":"void","Args":"Qt::TextElideMode elideMode"},{"Uniquefunname":"void setForegroundRole(DPalette::ColorType color)","Funname":"setForegroundRole","Returntype":"void","Args":"DPalette::ColorType color"},{"Uniquefunname":"void setForegroundRole(QPalette::ColorRole role)","Funname":"setForegroundRole","Returntype":"void","Args":"QPalette::ColorRole role"},{"Uniquefunname":" ~DLabel()","Funname":"~DLabel","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DLABEL_H"]}]}
{"Filepath":"src/widgets/dlineedit.h","Functions":[{"Uniquefunname":"protected DLineEdit(DLineEditPrivate \u0026 q,QWidget * parent)","Funname":"DLineEdit","Returntype":"protected","Args":"DLineEditPrivate \u0026 q,QWidget * parent"},{"Uniquefunname":"    Q_DISABLE_COPY(DLineEdit)","Funname":"Q_DISABLE_COPY","Returntype":"Q_OBJECT","Args":"DLineEdit"},{"Uniquefunname":"Q_SIGNALS alertChanged(bool alert)","Funname":"alertChanged","Returntype":"Q_SIGNALS","Args":"bool alert"},{"Uniquefunname":"Qt alertMessageAlignment()","Funname":"alertMessageAlignment","Returntype":"Qt","Args":""},{"Uniquefunname":"void clear()","Funname":"clear","Returntype":"void","Args":""},{"Uniquefunname":"void cursorPositionChanged(int,int)","Funname":"cursorPositionChanged","Returntype":"void","Args":"int,int"},{"Uniquefunname":"QLineEdit echoMode()","Funname":"echoMode","Returntype":"QLineEdit","Args":""},{"Uniquefunname":"void editingFinished()","Funname":"editingFinished","Returntype":"void","Args":""},{"Uniquefunname":"bool event(QEvent * event)","Funname":"event","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"bool eventFilter(QObject * watched,QEvent * event)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * watched,QEvent * event"},{"Uniquefunname":"void focusChanged(bool onFocus)","Funname":"focusChanged","Returntype":"void","Args":"bool onFocus"},{"Uniquefunname":"void hideAlertMessage()","Funname":"hideAlertMessage","Returntype":"void","Args":""},{"Uniquefunname":"bool isAlert()","Funname":"isAlert","Returntype":"bool","Args":""},{"Uniquefunname":"bool isClearButtonEnabled()","Funname":"isClearButtonEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QLineEdit * lineEdit()","Funname":"lineEdit","Returntype":"QLineEdit *","Args":""},{"Uniquefunname":"void returnPressed()","Funname":"returnPressed","Returntype":"void","Args":""},{"Uniquefunname":"void selectionChanged()","Funname":"selectionChanged","Returntype":"void","Args":""},{"Uniquefunname":"void setAlert(bool isAlert)","Funname":"setAlert","Returntype":"void","Args":"bool isAlert"},{"Uniquefunname":"void setAlertMessageAlignment(Qt::Alignment alignment)","Funname":"setAlertMessageAlignment","Returntype":"void","Args":"Qt::Alignment alignment"},{"Uniquefunname":"void setClearButtonEnabled(bool enable)","Funname":"setClearButtonEnabled","Returntype":"void","Args":"bool enable"},{"Uniquefunname":"void setContextMenuPolicy(Qt::ContextMenuPolicy policy)","Funname":"setContextMenuPolicy","Returntype":"void","Args":"Qt::ContextMenuPolicy policy"},{"Uniquefunname":"void setEchoMode(QLineEdit::EchoMode mode)","Funname":"setEchoMode","Returntype":"void","Args":"QLineEdit::EchoMode mode"},{"Uniquefunname":"void setLeftWidgets(const QList\u003cQWidget * \u003e \u0026 list)","Funname":"setLeftWidgets","Returntype":"void","Args":"const QList\u003cQWidget * \u003e \u0026 list"},{"Uniquefunname":"void setLeftWidgetsVisible(bool visible)","Funname":"setLeftWidgetsVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setPlaceholderText(const QString \u0026)","Funname":"setPlaceholderText","Returntype":"void","Args":"const QString \u0026"},{"Uniquefunname":"void setRightWidgets(const QList\u003cQWidget * \u003e \u0026 list)","Funname":"setRightWidgets","Returntype":"void","Args":"const QList\u003cQWidget * \u003e \u0026 list"},{"Uniquefunname":"void setRightWidgetsVisible(bool visible)","Funname":"setRightWidgetsVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setSpeechToTextEnabled(bool enable)","Funname":"setSpeechToTextEnabled","Returntype":"void","Args":"bool enable"},{"Uniquefunname":"void setText(const QString \u0026 text)","Funname":"setText","Returntype":"void","Args":"const QString \u0026 text"},{"Uniquefunname":"void setTextToSpeechEnabled(bool enable)","Funname":"setTextToSpeechEnabled","Returntype":"void","Args":"bool enable"},{"Uniquefunname":"void setTextToTranslateEnabled(bool enable)","Funname":"setTextToTranslateEnabled","Returntype":"void","Args":"bool enable"},{"Uniquefunname":"bool speechToTextIsEnabled()","Funname":"speechToTextIsEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"QString text()","Funname":"text","Returntype":"QString","Args":""},{"Uniquefunname":"void textChanged(const QString \u0026)","Funname":"textChanged","Returntype":"void","Args":"const QString \u0026"},{"Uniquefunname":"void textEdited(const QString \u0026)","Funname":"textEdited","Returntype":"void","Args":"const QString \u0026"},{"Uniquefunname":"bool textToSpeechIsEnabled()","Funname":"textToSpeechIsEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"bool textToTranslateIsEnabled()","Funname":"textToTranslateIsEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"virtual ~DLineEdit()","Funname":"~DLineEdit","Returntype":"virtual","Args":""}],"Records":[{"Name":"macro","Fields":["DLINEEDIT_H"]}]}
{"Filepath":"src/widgets/dlistview.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(int count READ count NOTIFY rowCountChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"int count READ count NOTIFY rowCountChanged"},{"Uniquefunname":"int addFooterWidget(QWidget * widget)","Funname":"addFooterWidget","Returntype":"int","Args":"QWidget * widget"},{"Uniquefunname":"int addHeaderWidget(QWidget * widget)","Funname":"addHeaderWidget","Returntype":"int","Args":"QWidget * widget"},{"Uniquefunname":"public Q_SLOTS addItem(const QVariant \u0026 data)","Funname":"addItem","Returntype":"public Q_SLOTS","Args":"const QVariant \u0026 data"},{"Uniquefunname":"bool addItems(const QVariantList \u0026 datas)","Funname":"addItems","Returntype":"bool","Args":"const QVariantList \u0026 datas"},{"Uniquefunname":"DStyledItemDelegate backgroundType()","Funname":"backgroundType","Returntype":"DStyledItemDelegate","Args":""},{"Uniquefunname":"int count()","Funname":"count","Returntype":"int","Args":""},{"Uniquefunname":"void currentChanged(const QModelIndex \u0026 current,const QModelIndex \u0026 previous)","Funname":"currentChanged","Returntype":"void","Args":"const QModelIndex \u0026 current,const QModelIndex \u0026 previous"},{"Uniquefunname":"void currentChanged(const QModelIndex \u0026 previous)","Funname":"currentChanged","Returntype":"void","Args":"const QModelIndex \u0026 previous"},{"Uniquefunname":"bool edit(const QModelIndex \u0026 index,EditTrigger trigger,QEvent * event)","Funname":"edit","Returntype":"bool","Args":"const QModelIndex \u0026 index,EditTrigger trigger,QEvent * event"},{"Uniquefunname":"void edit(const QModelIndex \u0026 index)","Funname":"edit","Returntype":"void","Args":"const QModelIndex \u0026 index"},{"Uniquefunname":"QWidget * getFooterWidget(int index)","Funname":"getFooterWidget","Returntype":"QWidget *","Args":"int index"},{"Uniquefunname":"QWidget * getHeaderWidget(int index)","Funname":"getHeaderWidget","Returntype":"QWidget *","Args":"int index"},{"Uniquefunname":"int horizontalOffset()","Funname":"horizontalOffset","Returntype":"int","Args":""},{"Uniquefunname":"bool insertItem(int index,const QVariant \u0026 data)","Funname":"insertItem","Returntype":"bool","Args":"int index,const QVariant \u0026 data"},{"Uniquefunname":"bool insertItems(int index,const QVariantList \u0026 datas)","Funname":"insertItems","Returntype":"bool","Args":"int index,const QVariantList \u0026 datas"},{"Uniquefunname":"bool isActiveRect(const QRect \u0026 rect)","Funname":"isActiveRect","Returntype":"bool","Args":"const QRect \u0026 rect"},{"Uniquefunname":"bool isVisualRect(const QRect \u0026 rect)","Funname":"isVisualRect","Returntype":"bool","Args":"const QRect \u0026 rect"},{"Uniquefunname":"QMargins itemMargins()","Funname":"itemMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"QSize itemSize()","Funname":"itemSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QSize minimumSizeHint()","Funname":"minimumSizeHint","Returntype":"QSize","Args":""},{"Uniquefunname":"virtual QModelIndex moveCursor(CursorAction cursorAction,Qt::KeyboardModifiers modifiers)","Funname":"moveCursor","Returntype":"virtual QModelIndex","Args":"CursorAction cursorAction,Qt::KeyboardModifiers modifiers"},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"void orientationChanged(Qt::Orientation orientation)","Funname":"orientationChanged","Returntype":"void","Args":"Qt::Orientation orientation"},{"Uniquefunname":"void removeFooterWidget(int index)","Funname":"removeFooterWidget","Returntype":"void","Args":"int index"},{"Uniquefunname":"void removeHeaderWidget(int index)","Funname":"removeHeaderWidget","Returntype":"void","Args":"int index"},{"Uniquefunname":"bool removeItem(int index)","Funname":"removeItem","Returntype":"bool","Args":"int index"},{"Uniquefunname":"bool removeItems(int index,int count)","Funname":"removeItems","Returntype":"bool","Args":"int index,int count"},{"Uniquefunname":"void resizeEvent(QResizeEvent * event)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * event"},{"Uniquefunname":"Q_SIGNALS rowCountChanged()","Funname":"rowCountChanged","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"void setBackgroundType(DStyledItemDelegate::BackgroundType backgroundType)","Funname":"setBackgroundType","Returntype":"void","Args":"DStyledItemDelegate::BackgroundType backgroundType"},{"Uniquefunname":"bool setData(const QModelIndex \u0026 index,const QVariant \u0026 value,int role)","Funname":"setData","Returntype":"bool","Args":"const QModelIndex \u0026 index,const QVariant \u0026 value,int role"},{"Uniquefunname":"private setFlow(QListView::Flow flow)","Funname":"setFlow","Returntype":"private","Args":"QListView::Flow flow"},{"Uniquefunname":"void setItemMargins(const QMargins \u0026 itemMargins)","Funname":"setItemMargins","Returntype":"void","Args":"const QMargins \u0026 itemMargins"},{"Uniquefunname":"void setItemRadius(int radius)","Funname":"setItemRadius","Returntype":"void","Args":"int radius"},{"Uniquefunname":"void setItemSize(QSize itemSize)","Funname":"setItemSize","Returntype":"void","Args":"QSize itemSize"},{"Uniquefunname":"void setItemSpacing(int spacing)","Funname":"setItemSpacing","Returntype":"void","Args":"int spacing"},{"Uniquefunname":"void setModel(QAbstractItemModel * model)","Funname":"setModel","Returntype":"void","Args":"QAbstractItemModel * model"},{"Uniquefunname":"void setOrientation(QListView::Flow flow,bool wrapping)","Funname":"setOrientation","Returntype":"void","Args":"QListView::Flow flow,bool wrapping"},{"Uniquefunname":"void setViewportMargins(const QMargins \u0026 margins)","Funname":"setViewportMargins","Returntype":"void","Args":"const QMargins \u0026 margins"},{"Uniquefunname":"protected setViewportMargins(int left,int top,int right,int bottom)","Funname":"setViewportMargins","Returntype":"protected","Args":"int left,int top,int right,int bottom"},{"Uniquefunname":"void setWrapping(bool enable)","Funname":"setWrapping","Returntype":"void","Args":"bool enable"},{"Uniquefunname":"State state()","Funname":"state","Returntype":"State","Args":""},{"Uniquefunname":"QWidget * takeFooterWidget(int index)","Funname":"takeFooterWidget","Returntype":"QWidget *","Args":"int index"},{"Uniquefunname":"QWidget * takeHeaderWidget(int index)","Funname":"takeHeaderWidget","Returntype":"QWidget *","Args":"int index"},{"Uniquefunname":"void triggerEdit(const QModelIndex \u0026 index)","Funname":"triggerEdit","Returntype":"void","Args":"const QModelIndex \u0026 index"},{"Uniquefunname":"QStyleOptionViewItem viewOptions()","Funname":"viewOptions","Returntype":"QStyleOptionViewItem","Args":""},{"Uniquefunname":"QMargins viewportMargins()","Funname":"viewportMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"QSize viewportSizeHint()","Funname":"viewportSizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DLISTVIEW_H"]}]}
{"Filepath":"src/widgets/dloadingindicator.h","Functions":[{"Uniquefunname":"int aniDuration()","Funname":"aniDuration","Returntype":"int","Args":""},{"Uniquefunname":"QEasingCurve aniEasingType()","Funname":"aniEasingType","Returntype":"QEasingCurve","Args":""},{"Uniquefunname":"QColor backgroundColor()","Funname":"backgroundColor","Returntype":"QColor","Args":""},{"Uniquefunname":"RotationDirection direction()","Funname":"direction","Returntype":"RotationDirection","Args":""},{"Uniquefunname":"Q_SIGNALS directionChanged(RotationDirection direction)","Funname":"directionChanged","Returntype":"Q_SIGNALS","Args":"RotationDirection direction"},{"Uniquefunname":"QPixmap imageSource()","Funname":"imageSource","Returntype":"QPixmap","Args":""},{"Uniquefunname":"bool loading()","Funname":"loading","Returntype":"bool","Args":""},{"Uniquefunname":"protected resizeEvent(QResizeEvent * e)","Funname":"resizeEvent","Returntype":"protected","Args":"QResizeEvent * e"},{"Uniquefunname":"qreal rotate()","Funname":"rotate","Returntype":"qreal","Args":""},{"Uniquefunname":"void rotateChanged(qreal rotate)","Funname":"rotateChanged","Returntype":"void","Args":"qreal rotate"},{"Uniquefunname":"void setAniDuration(int msecs)","Funname":"setAniDuration","Returntype":"void","Args":"int msecs"},{"Uniquefunname":"void setAniEasingCurve(const QEasingCurve \u0026 easing)","Funname":"setAniEasingCurve","Returntype":"void","Args":"const QEasingCurve \u0026 easing"},{"Uniquefunname":"void setAniEasingType(QEasingCurve::Type aniEasingType)","Funname":"setAniEasingType","Returntype":"void","Args":"QEasingCurve::Type aniEasingType"},{"Uniquefunname":"void setBackgroundColor(const QColor \u0026 color)","Funname":"setBackgroundColor","Returntype":"void","Args":"const QColor \u0026 color"},{"Uniquefunname":"void setDirection(RotationDirection direction)","Funname":"setDirection","Returntype":"void","Args":"RotationDirection direction"},{"Uniquefunname":"void setImageSource(const QPixmap \u0026 imageSource)","Funname":"setImageSource","Returntype":"void","Args":"const QPixmap \u0026 imageSource"},{"Uniquefunname":"void setLoading(bool flag)","Funname":"setLoading","Returntype":"void","Args":"bool flag"},{"Uniquefunname":"void setRotate(QVariant angle)","Funname":"setRotate","Returntype":"void","Args":"QVariant angle"},{"Uniquefunname":"void setSmooth(bool smooth)","Funname":"setSmooth","Returntype":"void","Args":"bool smooth"},{"Uniquefunname":"void setWidgetSource(QWidget * widgetSource)","Funname":"setWidgetSource","Returntype":"void","Args":"QWidget * widgetSource"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""},{"Uniquefunname":"bool smooth()","Funname":"smooth","Returntype":"bool","Args":""},{"Uniquefunname":"public Q_SLOTS start()","Funname":"start","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"void stop()","Funname":"stop","Returntype":"void","Args":""},{"Uniquefunname":"QWidget * widgetSource()","Funname":"widgetSource","Returntype":"QWidget *","Args":""},{"Uniquefunname":" ~DLoadingIndicator()","Funname":"~DLoadingIndicator","Returntype":"","Args":""}],"Records":[{"Name":"enum:RotationDirection","Fields":["Clockwise","Counterclockwise"]},{"Name":"macro","Fields":["DLOADINGINDICATOR_H"]}]}
{"Filepath":"src/widgets/dmainwindow.h","Functions":[{"Uniquefunname":"Q_OBJECT Q_PROPERTY(int windowRadius READ windowRadius WRITE setWindowRadius NOTIFY windowRadiusChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"int windowRadius READ windowRadius WRITE setWindowRadius NOTIFY windowRadiusChanged"},{"Uniquefunname":"bool autoInputMaskByClipPath()","Funname":"autoInputMaskByClipPath","Returntype":"bool","Args":""},{"Uniquefunname":"void autoInputMaskByClipPathChanged()","Funname":"autoInputMaskByClipPathChanged","Returntype":"void","Args":""},{"Uniquefunname":"QColor borderColor()","Funname":"borderColor","Returntype":"QColor","Args":""},{"Uniquefunname":"void borderColorChanged()","Funname":"borderColorChanged","Returntype":"void","Args":""},{"Uniquefunname":"int borderWidth()","Funname":"borderWidth","Returntype":"int","Args":""},{"Uniquefunname":"void borderWidthChanged()","Funname":"borderWidthChanged","Returntype":"void","Args":""},{"Uniquefunname":"void changeEvent(QEvent * event)","Funname":"changeEvent","Returntype":"void","Args":"QEvent * event"},{"Uniquefunname":"QPainterPath clipPath()","Funname":"clipPath","Returntype":"QPainterPath","Args":""},{"Uniquefunname":"void clipPathChanged()","Funname":"clipPathChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool enableBlurWindow()","Funname":"enableBlurWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void enableBlurWindowChanged()","Funname":"enableBlurWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool enableSystemMove()","Funname":"enableSystemMove","Returntype":"bool","Args":""},{"Uniquefunname":"void enableSystemMoveChanged()","Funname":"enableSystemMoveChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool enableSystemResize()","Funname":"enableSystemResize","Returntype":"bool","Args":""},{"Uniquefunname":"void enableSystemResizeChanged()","Funname":"enableSystemResizeChanged","Returntype":"void","Args":""},{"Uniquefunname":"QMargins frameMargins()","Funname":"frameMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"void frameMarginsChanged()","Funname":"frameMarginsChanged","Returntype":"void","Args":""},{"Uniquefunname":"QRegion frameMask()","Funname":"frameMask","Returntype":"QRegion","Args":""},{"Uniquefunname":"void frameMaskChanged()","Funname":"frameMaskChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool isDXcbWindow()","Funname":"isDXcbWindow","Returntype":"bool","Args":""},{"Uniquefunname":"void mouseMoveEvent(QMouseEvent * event)","Funname":"mouseMoveEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"void resizeEvent(QResizeEvent * event)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * event"},{"Uniquefunname":"void sendMessage(DFloatingMessage * message)","Funname":"sendMessage","Returntype":"void","Args":"DFloatingMessage * message"},{"Uniquefunname":"void sendMessage(const QIcon \u0026 icon,const QString \u0026 message)","Funname":"sendMessage","Returntype":"void","Args":"const QIcon \u0026 icon,const QString \u0026 message"},{"Uniquefunname":"void setAutoInputMaskByClipPath(bool autoInputMaskByClipPath)","Funname":"setAutoInputMaskByClipPath","Returntype":"void","Args":"bool autoInputMaskByClipPath"},{"Uniquefunname":"void setBorderColor(const QColor \u0026 borderColor)","Funname":"setBorderColor","Returntype":"void","Args":"const QColor \u0026 borderColor"},{"Uniquefunname":"void setBorderWidth(int borderWidth)","Funname":"setBorderWidth","Returntype":"void","Args":"int borderWidth"},{"Uniquefunname":"void setClipPath(const QPainterPath \u0026 clipPath)","Funname":"setClipPath","Returntype":"void","Args":"const QPainterPath \u0026 clipPath"},{"Uniquefunname":"void setEnableBlurWindow(bool enableBlurWindow)","Funname":"setEnableBlurWindow","Returntype":"void","Args":"bool enableBlurWindow"},{"Uniquefunname":"void setEnableSystemMove(bool enableSystemMove)","Funname":"setEnableSystemMove","Returntype":"void","Args":"bool enableSystemMove"},{"Uniquefunname":"void setEnableSystemResize(bool enableSystemResize)","Funname":"setEnableSystemResize","Returntype":"void","Args":"bool enableSystemResize"},{"Uniquefunname":"void setFrameMask(const QRegion \u0026 frameMask)","Funname":"setFrameMask","Returntype":"void","Args":"const QRegion \u0026 frameMask"},{"Uniquefunname":"void setShadowColor(const QColor \u0026 shadowColor)","Funname":"setShadowColor","Returntype":"void","Args":"const QColor \u0026 shadowColor"},{"Uniquefunname":"void setShadowOffset(const QPoint \u0026 shadowOffset)","Funname":"setShadowOffset","Returntype":"void","Args":"const QPoint \u0026 shadowOffset"},{"Uniquefunname":"void setShadowRadius(int shadowRadius)","Funname":"setShadowRadius","Returntype":"void","Args":"int shadowRadius"},{"Uniquefunname":"void setTitlebarShadowEnabled(bool titlebarShadowEnabled)","Funname":"setTitlebarShadowEnabled","Returntype":"void","Args":"bool titlebarShadowEnabled"},{"Uniquefunname":"void setTranslucentBackground(bool translucentBackground)","Funname":"setTranslucentBackground","Returntype":"void","Args":"bool translucentBackground"},{"Uniquefunname":"void setWindowFlags(Qt::WindowFlags type)","Funname":"setWindowFlags","Returntype":"void","Args":"Qt::WindowFlags type"},{"Uniquefunname":"public Q_SLOTS setWindowRadius(int windowRadius)","Funname":"setWindowRadius","Returntype":"public Q_SLOTS","Args":"int windowRadius"},{"Uniquefunname":"QColor shadowColor()","Funname":"shadowColor","Returntype":"QColor","Args":""},{"Uniquefunname":"void shadowColorChanged()","Funname":"shadowColorChanged","Returntype":"void","Args":""},{"Uniquefunname":"QPoint shadowOffset()","Funname":"shadowOffset","Returntype":"QPoint","Args":""},{"Uniquefunname":"void shadowOffsetChanged()","Funname":"shadowOffsetChanged","Returntype":"void","Args":""},{"Uniquefunname":"int shadowRadius()","Funname":"shadowRadius","Returntype":"int","Args":""},{"Uniquefunname":"void shadowRadiusChanged()","Funname":"shadowRadiusChanged","Returntype":"void","Args":""},{"Uniquefunname":"DTitlebar * titlebar()","Funname":"titlebar","Returntype":"DTitlebar *","Args":""},{"Uniquefunname":"bool titlebarShadowIsEnabled()","Funname":"titlebarShadowIsEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"bool translucentBackground()","Funname":"translucentBackground","Returntype":"bool","Args":""},{"Uniquefunname":"void translucentBackgroundChanged()","Funname":"translucentBackgroundChanged","Returntype":"void","Args":""},{"Uniquefunname":"int windowRadius()","Funname":"windowRadius","Returntype":"int","Args":""},{"Uniquefunname":"Q_SIGNALS windowRadiusChanged()","Funname":"windowRadiusChanged","Returntype":"Q_SIGNALS","Args":""}],"Records":[{"Name":"macro","Fields":["DMAINWINDOW_H"]}]}
{"Filepath":"src/widgets/dmessagemanager.h","Functions":[{"Uniquefunname":"Q_OBJECT private DMessageManager()","Funname":"DMessageManager","Returntype":"Q_OBJECT private","Args":""},{"Uniquefunname":"protected eventFilter(QObject * watched,QEvent * event)","Funname":"eventFilter","Returntype":"protected","Args":"QObject * watched,QEvent * event"},{"Uniquefunname":"public instance()","Funname":"instance","Returntype":"public","Args":""},{"Uniquefunname":"void sendMessage(QWidget * par,DFloatingMessage * floMsg)","Funname":"sendMessage","Returntype":"void","Args":"QWidget * par,DFloatingMessage * floMsg"},{"Uniquefunname":"void sendMessage(QWidget * par,const QIcon \u0026 icon,const QString \u0026 message)","Funname":"sendMessage","Returntype":"void","Args":"QWidget * par,const QIcon \u0026 icon,const QString \u0026 message"},{"Uniquefunname":"bool setContentMargens(QWidget * par,const QMargins \u0026 margins)","Funname":"setContentMargens","Returntype":"bool","Args":"QWidget * par,const QMargins \u0026 margins"}],"Records":[{"Name":"macro","Fields":["DMESSAGEMANAGER_H"]}]}
{"Filepath":"src/widgets/dmpriscontrol.h","Functions":[{"Uniquefunname":"    Q_DISABLE_COPY(DMPRISControl)","Funname":"Q_DISABLE_COPY","Returntype":"Q_OBJECT","Args":"DMPRISControl"},{"Uniquefunname":"bool isWorking()","Funname":"isWorking","Returntype":"bool","Args":""},{"Uniquefunname":"Q_SIGNALS mprisAcquired()","Funname":"mprisAcquired","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"void mprisChanged()","Funname":"mprisChanged","Returntype":"void","Args":""},{"Uniquefunname":"void mprisLosted()","Funname":"mprisLosted","Returntype":"void","Args":""},{"Uniquefunname":"void setPictureSize(const QSize \u0026 size)","Funname":"setPictureSize","Returntype":"void","Args":"const QSize \u0026 size"},{"Uniquefunname":"public Q_SLOTS setPictureVisible(bool visible)","Funname":"setPictureVisible","Returntype":"public Q_SLOTS","Args":"bool visible"},{"Uniquefunname":"protected showEvent(QShowEvent * event)","Funname":"showEvent","Returntype":"protected","Args":"QShowEvent * event"}],"Records":[{"Name":"macro","Fields":["DMPRISCONTROL_H"]}]}
{"Filepath":"src/widgets/dpageindicator.h","Functions":[{"Uniquefunname":"    Q_DISABLE_COPY(DPageIndicator)","Funname":"Q_DISABLE_COPY","Returntype":"Q_OBJECT","Args":"DPageIndicator"},{"Uniquefunname":"int currentPageIndex()","Funname":"currentPageIndex","Returntype":"int","Args":""},{"Uniquefunname":"void nextPage()","Funname":"nextPage","Returntype":"void","Args":""},{"Uniquefunname":"int pageCount()","Funname":"pageCount","Returntype":"int","Args":""},{"Uniquefunname":"protected paintEvent(QPaintEvent * e)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent * e"},{"Uniquefunname":"QColor pointColor()","Funname":"pointColor","Returntype":"QColor","Args":""},{"Uniquefunname":"int pointDistance()","Funname":"pointDistance","Returntype":"int","Args":""},{"Uniquefunname":"int pointRadius()","Funname":"pointRadius","Returntype":"int","Args":""},{"Uniquefunname":"void previousPage()","Funname":"previousPage","Returntype":"void","Args":""},{"Uniquefunname":"QColor secondaryPointColor()","Funname":"secondaryPointColor","Returntype":"QColor","Args":""},{"Uniquefunname":"int secondaryPointRadius()","Funname":"secondaryPointRadius","Returntype":"int","Args":""},{"Uniquefunname":"void setCurrentPage(const int index)","Funname":"setCurrentPage","Returntype":"void","Args":"const int index"},{"Uniquefunname":"void setPageCount(const int count)","Funname":"setPageCount","Returntype":"void","Args":"const int count"},{"Uniquefunname":"void setPointColor(QColor color)","Funname":"setPointColor","Returntype":"void","Args":"QColor color"},{"Uniquefunname":"void setPointDistance(int distance)","Funname":"setPointDistance","Returntype":"void","Args":"int distance"},{"Uniquefunname":"void setPointRadius(int size)","Funname":"setPointRadius","Returntype":"void","Args":"int size"},{"Uniquefunname":"void setSecondaryPointColor(QColor color)","Funname":"setSecondaryPointColor","Returntype":"void","Args":"QColor color"},{"Uniquefunname":"void setSecondaryPointRadius(int size)","Funname":"setSecondaryPointRadius","Returntype":"void","Args":"int size"}],"Records":[{"Name":"macro","Fields":["DPAGEINDICATOR_H"]}]}
{"Filepath":"src/widgets/dpasswordedit.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(bool isEchoMode READ isEchoMode NOTIFY echoModeChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"bool isEchoMode READ isEchoMode NOTIFY echoModeChanged"},{"Uniquefunname":"bool echoButtonIsVisible()","Funname":"echoButtonIsVisible","Returntype":"bool","Args":""},{"Uniquefunname":"Q_SIGNALS echoModeChanged(bool echoOn)","Funname":"echoModeChanged","Returntype":"Q_SIGNALS","Args":"bool echoOn"},{"Uniquefunname":"bool isEchoMode()","Funname":"isEchoMode","Returntype":"bool","Args":""},{"Uniquefunname":"void setEchoButtonIsVisible(bool visible)","Funname":"setEchoButtonIsVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setEchoMode(QLineEdit::EchoMode mode)","Funname":"setEchoMode","Returntype":"void","Args":"QLineEdit::EchoMode mode"}],"Records":[{"Name":"macro","Fields":["DPASSWORDEDIT_H"]}]}
{"Filepath":"src/widgets/dpicturesequenceview.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(int speed READ speed WRITE setSpeed NOTIFY speedChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"int speed READ speed WRITE setSpeed NOTIFY speedChanged"},{"Uniquefunname":"void pause()","Funname":"pause","Returntype":"void","Args":""},{"Uniquefunname":"void play()","Funname":"play","Returntype":"void","Args":""},{"Uniquefunname":"void playEnd()","Funname":"playEnd","Returntype":"void","Args":""},{"Uniquefunname":"void setSingleShot(bool singleShot)","Funname":"setSingleShot","Returntype":"void","Args":"bool singleShot"},{"Uniquefunname":"void setSpeed(int speed)","Funname":"setSpeed","Returntype":"void","Args":"int speed"},{"Uniquefunname":"bool singleShot()","Funname":"singleShot","Returntype":"bool","Args":""},{"Uniquefunname":"int speed()","Funname":"speed","Returntype":"int","Args":""},{"Uniquefunname":"Q_SIGNALS speedChanged(int speed)","Funname":"speedChanged","Returntype":"Q_SIGNALS","Args":"int speed"},{"Uniquefunname":"void stop()","Funname":"stop","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DPICTURESEQUENCEVIEW_H"]}]}
{"Filepath":"src/widgets/dplatformwindowhandle.h","Functions":[{"Uniquefunname":"void enableDXcbForWindow(QWidget * widget)","Funname":"enableDXcbForWindow","Returntype":"void","Args":"QWidget * widget"},{"Uniquefunname":"void enableDXcbForWindow(QWidget * widget,bool redirectContent)","Funname":"enableDXcbForWindow","Returntype":"void","Args":"QWidget * widget,bool redirectContent"},{"Uniquefunname":"bool isEnabledDXcb(const QWidget * widget)","Funname":"isEnabledDXcb","Returntype":"bool","Args":"const QWidget * widget"},{"Uniquefunname":"bool setWindowBlurAreaByWM(QWidget * widget,const QList\u003cQPainterPath\u003e \u0026 paths)","Funname":"setWindowBlurAreaByWM","Returntype":"bool","Args":"QWidget * widget,const QList\u003cQPainterPath\u003e \u0026 paths"},{"Uniquefunname":"bool setWindowBlurAreaByWM(QWidget * widget,const QVector\u003cWMBlurArea\u003e \u0026 area)","Funname":"setWindowBlurAreaByWM","Returntype":"bool","Args":"QWidget * widget,const QVector\u003cWMBlurArea\u003e \u0026 area"}],"Records":[{"Name":"macro","Fields":["DPLATFORMWINDOWHANDLE_H"]}]}
{"Filepath":"src/widgets/dprintpickcolorwidget.h","Functions":[{"Uniquefunname":"Q_OBJECT public DPrintPickColorWidget(QWidget * parent)","Funname":"DPrintPickColorWidget","Returntype":"Q_OBJECT public","Args":"QWidget * parent"},{"Uniquefunname":"void btnIsChecked(bool checked)","Funname":"btnIsChecked","Returntype":"void","Args":"bool checked"},{"Uniquefunname":"Q_SIGNALS clicked()","Funname":"clicked","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"void enterEvent(QEvent * e)","Funname":"enterEvent","Returntype":"void","Args":"QEvent * e"},{"Uniquefunname":"QColor getColor(qreal h,qreal s,qreal v)","Funname":"getColor","Returntype":"QColor","Args":"qreal h,qreal s,qreal v"},{"Uniquefunname":"void initConnection()","Funname":"initConnection","Returntype":"void","Args":""},{"Uniquefunname":"void initUI()","Funname":"initUI","Returntype":"void","Args":""},{"Uniquefunname":"void leaveEvent(QEvent * e)","Funname":"leaveEvent","Returntype":"void","Args":"QEvent * e"},{"Uniquefunname":"void mouseMoveEvent(QMouseEvent * e)","Funname":"mouseMoveEvent","Returntype":"void","Args":"QMouseEvent * e"},{"Uniquefunname":"void mousePressEvent(QMouseEvent * e)","Funname":"mousePressEvent","Returntype":"void","Args":"QMouseEvent * e"},{"Uniquefunname":"void mouseReleaseEvent(QMouseEvent * e)","Funname":"mouseReleaseEvent","Returntype":"void","Args":"QMouseEvent * e"},{"Uniquefunname":"protected paintEvent(QPaintEvent *)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent *"},{"Uniquefunname":"protected paintEvent(QPaintEvent *)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent *"},{"Uniquefunname":"protected paintEvent(QPaintEvent * ev)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent * ev"},{"Uniquefunname":"void pickColor(QPoint pos)","Funname":"pickColor","Returntype":"void","Args":"QPoint pos"},{"Uniquefunname":"QCursor pickColorCursor()","Funname":"pickColorCursor","Returntype":"QCursor","Args":""},{"Uniquefunname":"void pickedColor(QColor color)","Funname":"pickedColor","Returntype":"void","Args":"QColor color"},{"Uniquefunname":"Q_SIGNALS selectColorButton(QColor color)","Funname":"selectColorButton","Returntype":"Q_SIGNALS","Args":"QColor color"},{"Uniquefunname":"void setHue(int hue)","Funname":"setHue","Returntype":"void","Args":"int hue"},{"Uniquefunname":"void signalColorChanged(QColor color)","Funname":"signalColorChanged","Returntype":"void","Args":"QColor color"},{"Uniquefunname":"public Q_SLOTS slotColorPick(QString uuid,QString colorName)","Funname":"slotColorPick","Returntype":"public Q_SLOTS","Args":"QString uuid,QString colorName"},{"Uniquefunname":"void slotEditColor(QString str)","Funname":"slotEditColor","Returntype":"void","Args":"QString str"},{"Uniquefunname":" ~ColorLabel()","Funname":"~ColorLabel","Returntype":"","Args":""},{"Uniquefunname":" ~ColorSlider()","Funname":"~ColorSlider","Returntype":"","Args":""},{"Uniquefunname":" ~DPrintPickColorWidget()","Funname":"~DPrintPickColorWidget","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DPRINTPICKCOLORWIDGET_H"]}]}
{"Filepath":"src/widgets/dprintpreviewdialog.h","Functions":[{"Uniquefunname":"    D_DECLARE_PRIVATE(DPrintPreviewDialog)","Funname":"D_DECLARE_PRIVATE","Returntype":"private","Args":"DPrintPreviewDialog"},{"Uniquefunname":"QString docName()","Funname":"docName","Returntype":"QString","Args":""},{"Uniquefunname":"bool eventFilter(QObject * watched,QEvent * event)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * watched,QEvent * event"},{"Uniquefunname":"bool isAsynPreview()","Funname":"isAsynPreview","Returntype":"bool","Args":""},{"Uniquefunname":"Q_SIGNALS paintRequested(DPrinter * printer)","Funname":"paintRequested","Returntype":"Q_SIGNALS","Args":"DPrinter * printer"},{"Uniquefunname":"void paintRequested(DPrinter * printer,const QVector\u003cint\u003e \u0026 pageRange)","Funname":"paintRequested","Returntype":"void","Args":"DPrinter * printer,const QVector\u003cint\u003e \u0026 pageRange"},{"Uniquefunname":"QString printFromPath()","Funname":"printFromPath","Returntype":"QString","Args":""},{"Uniquefunname":"protected resizeEvent(QResizeEvent * event)","Funname":"resizeEvent","Returntype":"protected","Args":"QResizeEvent * event"},{"Uniquefunname":"bool setAsynPreview(int totalPage)","Funname":"setAsynPreview","Returntype":"bool","Args":"int totalPage"},{"Uniquefunname":"void setDocName(const QString \u0026)","Funname":"setDocName","Returntype":"void","Args":"const QString \u0026"}],"Records":[{"Name":"macro","Fields":["DPRINTPREVIEWDIALOG_H"]}]}
{"Filepath":"src/widgets/dprintpreviewwidget.h","Functions":[{"Uniquefunname":"int currentPage()","Funname":"currentPage","Returntype":"int","Args":""},{"Uniquefunname":"void currentPageChanged(int page)","Funname":"currentPageChanged","Returntype":"void","Args":"int page"},{"Uniquefunname":"DPrinter getColorMode()","Funname":"getColorMode","Returntype":"DPrinter","Args":""},{"Uniquefunname":"QList\u003cconst QPicture * \u003e getPrinterPages()","Funname":"getPrinterPages","Returntype":"QList\u003cconst QPicture * \u003e","Args":""},{"Uniquefunname":"qreal getScale()","Funname":"getScale","Returntype":"qreal","Args":""},{"Uniquefunname":"Imposition imposition()","Funname":"imposition","Returntype":"Imposition","Args":""},{"Uniquefunname":"bool isAsynPreview()","Funname":"isAsynPreview","Returntype":"bool","Args":""},{"Uniquefunname":"void isPageByPage(int pageCopy,bool isFirst)","Funname":"isPageByPage","Returntype":"void","Args":"int pageCopy,bool isFirst"},{"Uniquefunname":"DPrintPreviewWidget order()","Funname":"order","Returntype":"DPrintPreviewWidget","Args":""},{"Uniquefunname":"int originPageCount()","Funname":"originPageCount","Returntype":"int","Args":""},{"Uniquefunname":"PageRange pageRangeMode()","Funname":"pageRangeMode","Returntype":"PageRange","Args":""},{"Uniquefunname":"int pagesCount()","Funname":"pagesCount","Returntype":"int","Args":""},{"Uniquefunname":"void pagesCountChanged(int pages)","Funname":"pagesCountChanged","Returntype":"void","Args":"int pages"},{"Uniquefunname":"Q_SIGNALS paintRequested(DPrinter * printer)","Funname":"paintRequested","Returntype":"Q_SIGNALS","Args":"DPrinter * printer"},{"Uniquefunname":"void paintRequested(DPrinter * printer,const QVector\u003cint\u003e \u0026 pageRange)","Funname":"paintRequested","Returntype":"void","Args":"DPrinter * printer,const QVector\u003cint\u003e \u0026 pageRange"},{"Uniquefunname":"void previewChanged()","Funname":"previewChanged","Returntype":"void","Args":""},{"Uniquefunname":"QString printFromPath()","Funname":"printFromPath","Returntype":"QString","Args":""},{"Uniquefunname":"QByteArray printerColorModel()","Funname":"printerColorModel","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void refreshBegin()","Funname":"refreshBegin","Returntype":"void","Args":""},{"Uniquefunname":"void refreshEnd()","Funname":"refreshEnd","Returntype":"void","Args":""},{"Uniquefunname":"void reviewChange(bool generate)","Funname":"reviewChange","Returntype":"void","Args":"bool generate"},{"Uniquefunname":"void setAsynPreview(int totalPage)","Funname":"setAsynPreview","Returntype":"void","Args":"int totalPage"},{"Uniquefunname":"void setColorMode(const DPrinter::ColorMode \u0026 colorMode)","Funname":"setColorMode","Returntype":"void","Args":"const DPrinter::ColorMode \u0026 colorMode"},{"Uniquefunname":"void setConfidentialWaterMark()","Funname":"setConfidentialWaterMark","Returntype":"void","Args":""},{"Uniquefunname":"void setCurrentPage(int page)","Funname":"setCurrentPage","Returntype":"void","Args":"int page"},{"Uniquefunname":"private setCurrentTargetPage(int page)","Funname":"setCurrentTargetPage","Returntype":"private","Args":"int page"},{"Uniquefunname":"void setCustomWaterMark(const QString \u0026 text)","Funname":"setCustomWaterMark","Returntype":"void","Args":"const QString \u0026 text"},{"Uniquefunname":"void setDraftWaterMark()","Funname":"setDraftWaterMark","Returntype":"void","Args":""},{"Uniquefunname":"void setImposition(Imposition im)","Funname":"setImposition","Returntype":"void","Args":"Imposition im"},{"Uniquefunname":"void setOrder(Order order)","Funname":"setOrder","Returntype":"void","Args":"Order order"},{"Uniquefunname":"void setOrientation(const DPrinter::Orientation \u0026 pageOrientation)","Funname":"setOrientation","Returntype":"void","Args":"const DPrinter::Orientation \u0026 pageOrientation"},{"Uniquefunname":"void setPageRange(const QVector\u003cint\u003e \u0026 rangePages)","Funname":"setPageRange","Returntype":"void","Args":"const QVector\u003cint\u003e \u0026 rangePages"},{"Uniquefunname":"void setPageRange(int from,int to)","Funname":"setPageRange","Returntype":"void","Args":"int from,int to"},{"Uniquefunname":"void setPageRangeALL()","Funname":"setPageRangeALL","Returntype":"void","Args":""},{"Uniquefunname":"void setPageRangeMode(PageRange mode)","Funname":"setPageRangeMode","Returntype":"void","Args":"PageRange mode"},{"Uniquefunname":"void setPreviewMode(bool isPreview)","Funname":"setPreviewMode","Returntype":"void","Args":"bool isPreview"},{"Uniquefunname":"void setPrintFromPath(const QString \u0026 path)","Funname":"setPrintFromPath","Returntype":"void","Args":"const QString \u0026 path"},{"Uniquefunname":"void setPrintMode(PrintMode pt)","Funname":"setPrintMode","Returntype":"void","Args":"PrintMode pt"},{"Uniquefunname":"D_DECL_DEPRECATED void setReGenerate(bool generate)","Funname":"setReGenerate","Returntype":"D_DECL_DEPRECATED void","Args":"bool generate"},{"Uniquefunname":"void setSampleWaterMark()","Funname":"setSampleWaterMark","Returntype":"void","Args":""},{"Uniquefunname":"void setScale(qreal scale)","Funname":"setScale","Returntype":"void","Args":"qreal scale"},{"Uniquefunname":"void setTextWaterMark(const QString \u0026 text)","Funname":"setTextWaterMark","Returntype":"void","Args":"const QString \u0026 text"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setWaterMargImage(const QImage \u0026 image)","Funname":"setWaterMargImage","Returntype":"void","Args":"const QImage \u0026 image"},{"Uniquefunname":"void setWaterMarkColor(const QColor \u0026 color)","Funname":"setWaterMarkColor","Returntype":"void","Args":"const QColor \u0026 color"},{"Uniquefunname":"void setWaterMarkFont(const QFont \u0026 font)","Funname":"setWaterMarkFont","Returntype":"void","Args":"const QFont \u0026 font"},{"Uniquefunname":"void setWaterMarkLayout(int layout)","Funname":"setWaterMarkLayout","Returntype":"void","Args":"int layout"},{"Uniquefunname":"void setWaterMarkOpacity(qreal opacity)","Funname":"setWaterMarkOpacity","Returntype":"void","Args":"qreal opacity"},{"Uniquefunname":"void setWaterMarkRotate(qreal rotate)","Funname":"setWaterMarkRotate","Returntype":"void","Args":"qreal rotate"},{"Uniquefunname":"void setWaterMarkScale(qreal scale)","Funname":"setWaterMarkScale","Returntype":"void","Args":"qreal scale"},{"Uniquefunname":"void setWaterMarkType(int type)","Funname":"setWaterMarkType","Returntype":"void","Args":"int type"},{"Uniquefunname":"int targetPageCount(int pageCount)","Funname":"targetPageCount","Returntype":"int","Args":"int pageCount"},{"Uniquefunname":"void themeTypeChanged(DGuiApplicationHelper::ColorType themeType)","Funname":"themeTypeChanged","Returntype":"void","Args":"DGuiApplicationHelper::ColorType themeType"},{"Uniquefunname":"void totalPages(int)","Funname":"totalPages","Returntype":"void","Args":"int"},{"Uniquefunname":"void turnBack()","Funname":"turnBack","Returntype":"void","Args":""},{"Uniquefunname":"void turnBegin()","Funname":"turnBegin","Returntype":"void","Args":""},{"Uniquefunname":"void turnEnd()","Funname":"turnEnd","Returntype":"void","Args":""},{"Uniquefunname":"void turnFront()","Funname":"turnFront","Returntype":"void","Args":""},{"Uniquefunname":"bool turnPageAble()","Funname":"turnPageAble","Returntype":"bool","Args":""},{"Uniquefunname":"public Q_SLOTS updatePreview()","Funname":"updatePreview","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"void updateView()","Funname":"updateView","Returntype":"void","Args":""},{"Uniquefunname":"void updateWaterMark()","Funname":"updateWaterMark","Returntype":"void","Args":""},{"Uniquefunname":" ~DPrinter()","Funname":"~DPrinter","Returntype":"","Args":""}],"Records":[{"Name":"enum:PageRange","Fields":["AllPage","CurrentPage","SelectPage"]},{"Name":"enum:Order","Fields":["Copy","L2R_T2B","R2L_T2B","T2B_L2R","T2B_R2L"]},{"Name":"macro","Fields":["DPRINTPREVIEWWIDGET_H","private"]},{"Name":"enum:Imposition","Fields":["FourRowFourCol","One","OneRowTwoCol","ThreeRowThreeCol","TwoRowThreeCol","TwoRowTwoCol"]},{"Name":"enum:PrintMode","Fields":["PrintToImage","PrintToPdf","PrintToPrinter"]}]}
{"Filepath":"src/widgets/dprogressbar.h","Functions":[{"Uniquefunname":"QSize minimumSizeHint()","Funname":"minimumSizeHint","Returntype":"QSize","Args":""},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DPROGRESSBAR_H"]}]}
{"Filepath":"src/widgets/dsearchcombobox.h","Functions":[{"Uniquefunname":"    Q_DISABLE_COPY(DSearchComboBox)","Funname":"Q_DISABLE_COPY","Returntype":"Q_OBJECT","Args":"DSearchComboBox"},{"Uniquefunname":"void setEditable(bool editable)","Funname":"setEditable","Returntype":"void","Args":"bool editable"},{"Uniquefunname":"protected showPopup()","Funname":"showPopup","Returntype":"protected","Args":""}],"Records":[{"Name":"macro","Fields":["DSEARCHCOMBOBOX_H"]}]}
{"Filepath":"src/widgets/dsearchedit.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(bool voiceInput READ isVoiceInput NOTIFY voiceChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"bool voiceInput READ isVoiceInput NOTIFY voiceChanged"},{"Uniquefunname":"void clear()","Funname":"clear","Returntype":"void","Args":""},{"Uniquefunname":"void clearEdit()","Funname":"clearEdit","Returntype":"void","Args":""},{"Uniquefunname":"bool isVoiceInput()","Funname":"isVoiceInput","Returntype":"bool","Args":""},{"Uniquefunname":"QString placeHolder()","Funname":"placeHolder","Returntype":"QString","Args":""},{"Uniquefunname":"QString placeholderText()","Funname":"placeholderText","Returntype":"QString","Args":""},{"Uniquefunname":"void searchAborted()","Funname":"searchAborted","Returntype":"void","Args":""},{"Uniquefunname":"void setPlaceHolder(QString placeHolder)","Funname":"setPlaceHolder","Returntype":"void","Args":"QString placeHolder"},{"Uniquefunname":"void setPlaceholderText(const QString \u0026 text)","Funname":"setPlaceholderText","Returntype":"void","Args":"const QString \u0026 text"},{"Uniquefunname":"void voiceChanged()","Funname":"voiceChanged","Returntype":"void","Args":""},{"Uniquefunname":"Q_SIGNALS voiceInputFinished()","Funname":"voiceInputFinished","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":" ~DSearchEdit()","Funname":"~DSearchEdit","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DSEARCHEDIT_H"]}]}
{"Filepath":"src/widgets/dsegmentedcontrol.h","Functions":[{"Uniquefunname":"    D_DECLARE_PRIVATE(DSegmentedControl)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DSegmentedControl"},{"Uniquefunname":"int addSegmented(const QIcon \u0026 icon,const QString \u0026 title)","Funname":"addSegmented","Returntype":"int","Args":"const QIcon \u0026 icon,const QString \u0026 title"},{"Uniquefunname":"public Q_SLOTS addSegmented(const QString \u0026 title)","Funname":"addSegmented","Returntype":"public Q_SLOTS","Args":"const QString \u0026 title"},{"Uniquefunname":"void addSegmented(const QList\u003cQIcon\u003e \u0026 iconList,const QStringList \u0026 titleList)","Funname":"addSegmented","Returntype":"void","Args":"const QList\u003cQIcon\u003e \u0026 iconList,const QStringList \u0026 titleList"},{"Uniquefunname":"void addSegmented(const QStringList \u0026 titleList)","Funname":"addSegmented","Returntype":"void","Args":"const QStringList \u0026 titleList"},{"Uniquefunname":"int animationDuration()","Funname":"animationDuration","Returntype":"int","Args":""},{"Uniquefunname":"void animationDurationChanged(int animationDuration)","Funname":"animationDurationChanged","Returntype":"void","Args":"int animationDuration"},{"Uniquefunname":"QEasingCurve animationType()","Funname":"animationType","Returntype":"QEasingCurve","Args":""},{"Uniquefunname":"QToolButton * at(int index)","Funname":"at","Returntype":"QToolButton *","Args":"int index"},{"Uniquefunname":"void buttonClicked()","Funname":"buttonClicked","Returntype":"void","Args":""},{"Uniquefunname":"void clear()","Funname":"clear","Returntype":"void","Args":""},{"Uniquefunname":"int count()","Funname":"count","Returntype":"int","Args":""},{"Uniquefunname":"Q_SIGNALS currentChanged(int index)","Funname":"currentChanged","Returntype":"Q_SIGNALS","Args":"int index"},{"Uniquefunname":"int currentIndex()","Funname":"currentIndex","Returntype":"int","Args":""},{"Uniquefunname":"void currentTitleChanged(QString title)","Funname":"currentTitleChanged","Returntype":"void","Args":"QString title"},{"Uniquefunname":"protected eventFilter(QObject *,QEvent *)","Funname":"eventFilter","Returntype":"protected","Args":"QObject *,QEvent *"},{"Uniquefunname":"QIcon getIcon(int index)","Funname":"getIcon","Returntype":"QIcon","Args":"int index"},{"Uniquefunname":"QString getText(int index)","Funname":"getText","Returntype":"QString","Args":"int index"},{"Uniquefunname":"const DSegmentedHighlight * highlight()","Funname":"highlight","Returntype":"const DSegmentedHighlight *","Args":""},{"Uniquefunname":"int indexByTitle(const QString \u0026 title)","Funname":"indexByTitle","Returntype":"int","Args":"const QString \u0026 title"},{"Uniquefunname":"void insertSegmented(int index,const QIcon \u0026 icon,const QString \u0026 title)","Funname":"insertSegmented","Returntype":"void","Args":"int index,const QIcon \u0026 icon,const QString \u0026 title"},{"Uniquefunname":"void insertSegmented(int index,const QString \u0026 title)","Funname":"insertSegmented","Returntype":"void","Args":"int index,const QString \u0026 title"},{"Uniquefunname":"void removeSegmented(int index)","Funname":"removeSegmented","Returntype":"void","Args":"int index"},{"Uniquefunname":"void resizeEvent(QResizeEvent * event)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * event"},{"Uniquefunname":"void setAnimationDuration(int animationDuration)","Funname":"setAnimationDuration","Returntype":"void","Args":"int animationDuration"},{"Uniquefunname":"void setAnimationType(QEasingCurve::Type animationType)","Funname":"setAnimationType","Returntype":"void","Args":"QEasingCurve::Type animationType"},{"Uniquefunname":"bool setCurrentIndex(int currentIndex)","Funname":"setCurrentIndex","Returntype":"bool","Args":"int currentIndex"},{"Uniquefunname":"bool setCurrentIndexByTitle(const QString \u0026 title)","Funname":"setCurrentIndexByTitle","Returntype":"bool","Args":"const QString \u0026 title"},{"Uniquefunname":"void setIcon(int index,const QIcon \u0026 icon)","Funname":"setIcon","Returntype":"void","Args":"int index,const QIcon \u0026 icon"},{"Uniquefunname":"void setText(int index,const QString \u0026 title)","Funname":"setText","Returntype":"void","Args":"int index,const QString \u0026 title"}],"Records":[{"Name":"macro","Fields":["DSEGMENTEDCONTROL_H"]}]}
{"Filepath":"src/widgets/dsettingsdialog.h","Functions":[{"Uniquefunname":"bool groupIsVisible(const QString \u0026 groupKey)","Funname":"groupIsVisible","Returntype":"bool","Args":"const QString \u0026 groupKey"},{"Uniquefunname":"void scrollToGroup(const QString \u0026 groupKey)","Funname":"scrollToGroup","Returntype":"void","Args":"const QString \u0026 groupKey"},{"Uniquefunname":"void setGroupVisible(const QString \u0026 groupKey,bool visible)","Funname":"setGroupVisible","Returntype":"void","Args":"const QString \u0026 groupKey,bool visible"},{"Uniquefunname":"void setIcon(const QIcon \u0026 icon)","Funname":"setIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setResetVisible(bool visible)","Funname":"setResetVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"public Q_SLOTS updateSettings(DTK_CORE_NAMESPACE::DSettings * settings)","Funname":"updateSettings","Returntype":"public Q_SLOTS","Args":"DTK_CORE_NAMESPACE::DSettings * settings"},{"Uniquefunname":"void updateSettings(const QByteArray \u0026 translateContext,DTK_CORE_NAMESPACE::DSettings * settings)","Funname":"updateSettings","Returntype":"void","Args":"const QByteArray \u0026 translateContext,DTK_CORE_NAMESPACE::DSettings * settings"},{"Uniquefunname":"DSettingsWidgetFactory * widgetFactory()","Funname":"widgetFactory","Returntype":"DSettingsWidgetFactory *","Args":""},{"Uniquefunname":" ~DSettingsDialog()","Funname":"~DSettingsDialog","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/widgets/dsettingswidgetfactory.h","Functions":[{"Uniquefunname":"QPair\u003cQWidget *,QWidget * \u003e createItem(QPointer\u003cDTK_CORE_NAMESPACE::DSettingsOption\u003e option)","Funname":"createItem","Returntype":"QPair\u003cQWidget *,QWidget * \u003e","Args":"QPointer\u003cDTK_CORE_NAMESPACE::DSettingsOption\u003e option"},{"Uniquefunname":"QPair\u003cQWidget *,QWidget * \u003e createItem(const QByteArray \u0026 translateContext,QPointer\u003cDTK_CORE_NAMESPACE::DSettingsOption\u003e option)","Funname":"createItem","Returntype":"QPair\u003cQWidget *,QWidget * \u003e","Args":"const QByteArray \u0026 translateContext,QPointer\u003cDTK_CORE_NAMESPACE::DSettingsOption\u003e option"},{"Uniquefunname":"QPair\u003cQWidget *,QWidget * \u003e createStandardItem(const QByteArray \u0026 translateContext,DTK_CORE_NAMESPACE::DSettingsOption * option,QWidget * rightWidget)","Funname":"createStandardItem","Returntype":"QPair\u003cQWidget *,QWidget * \u003e","Args":"const QByteArray \u0026 translateContext,DTK_CORE_NAMESPACE::DSettingsOption * option,QWidget * rightWidget"},{"Uniquefunname":"D_DECL_DEPRECATED QWidget * createTwoColumWidget(DTK_CORE_NAMESPACE::DSettingsOption * option,QWidget * rightWidget)","Funname":"createTwoColumWidget","Returntype":"D_DECL_DEPRECATED QWidget *","Args":"DTK_CORE_NAMESPACE::DSettingsOption * option,QWidget * rightWidget"},{"Uniquefunname":"D_DECL_DEPRECATED QWidget * createTwoColumWidget(const QByteArray \u0026 translateContext,DTK_CORE_NAMESPACE::DSettingsOption * option,QWidget * rightWidget)","Funname":"createTwoColumWidget","Returntype":"D_DECL_DEPRECATED QWidget *","Args":"const QByteArray \u0026 translateContext,DTK_CORE_NAMESPACE::DSettingsOption * option,QWidget * rightWidget"},{"Uniquefunname":"QWidget * createWidget(QPointer\u003cDTK_CORE_NAMESPACE::DSettingsOption\u003e option)","Funname":"createWidget","Returntype":"QWidget *","Args":"QPointer\u003cDTK_CORE_NAMESPACE::DSettingsOption\u003e option"},{"Uniquefunname":"QWidget * createWidget(const QByteArray \u0026 translateContext,QPointer\u003cDTK_CORE_NAMESPACE::DSettingsOption\u003e option)","Funname":"createWidget","Returntype":"QWidget *","Args":"const QByteArray \u0026 translateContext,QPointer\u003cDTK_CORE_NAMESPACE::DSettingsOption\u003e option"},{"Uniquefunname":"void registerWidget(const QString \u0026 viewType,std::function\u003cItemCreateHandler\u003e handler)","Funname":"registerWidget","Returntype":"void","Args":"const QString \u0026 viewType,std::function\u003cItemCreateHandler\u003e handler"},{"Uniquefunname":"void registerWidget(const QString \u0026 viewType,std::function\u003cWidgetCreateHandler\u003e handler)","Funname":"registerWidget","Returntype":"void","Args":"const QString \u0026 viewType,std::function\u003cWidgetCreateHandler\u003e handler"},{"Uniquefunname":" ~DSettingsWidgetFactory()","Funname":"~DSettingsWidgetFactory","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/widgets/dshadowline.h","Functions":[{"Uniquefunname":"    D_DECLARE_PRIVATE(DShadowLine)","Funname":"D_DECLARE_PRIVATE","Returntype":"","Args":"DShadowLine"},{"Uniquefunname":"protected paintEvent(QPaintEvent * event)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent * event"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DSHADOWLINE_H"]}]}
{"Filepath":"src/widgets/dshortcutedit.h","Functions":[{"Uniquefunname":"public Q_SLOTS clearShortcutKey()","Funname":"clearShortcutKey","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"Q_SIGNALS colorSettingChange()","Funname":"colorSettingChange","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"private convertShortcutKeys(const QString \u0026 keys)","Funname":"convertShortcutKeys","Returntype":"private","Args":"const QString \u0026 keys"},{"Uniquefunname":"private enterEvent(QEvent *)","Funname":"enterEvent","Returntype":"private","Args":"QEvent *"},{"Uniquefunname":"bool eventFilter(QObject * o,QEvent * e)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * o,QEvent * e"},{"Uniquefunname":"const QList\u003cQRegExp\u003e \u0026 getBlockShortcutKeysList()","Funname":"getBlockShortcutKeysList","Returntype":"const QList\u003cQRegExp\u003e \u0026","Args":""},{"Uniquefunname":"const QMap\u003cQString,QString\u003e \u0026 getKeyMapping()","Funname":"getKeyMapping","Returntype":"const QMap\u003cQString,QString\u003e \u0026","Args":""},{"Uniquefunname":"void invalidShortcutKey(const QString \u0026 shortcutKeys)","Funname":"invalidShortcutKey","Returntype":"void","Args":"const QString \u0026 shortcutKeys"},{"Uniquefunname":"bool isValidShortcutKey(const QString \u0026 key)","Funname":"isValidShortcutKey","Returntype":"bool","Args":"const QString \u0026 key"},{"Uniquefunname":"void leaveEvent(QEvent *)","Funname":"leaveEvent","Returntype":"void","Args":"QEvent *"},{"Uniquefunname":"void setBlockShortcutKeysList(const QList\u003cQRegExp\u003e \u0026 kList)","Funname":"setBlockShortcutKeysList","Returntype":"void","Args":"const QList\u003cQRegExp\u003e \u0026 kList"},{"Uniquefunname":"void setEchoState(const EchoState state)","Funname":"setEchoState","Returntype":"void","Args":"const EchoState state"},{"Uniquefunname":"void setInValidState()","Funname":"setInValidState","Returntype":"void","Args":""},{"Uniquefunname":"void setKeyMapping(const QMap\u003cQString,QString\u003e \u0026 mapping)","Funname":"setKeyMapping","Returntype":"void","Args":"const QMap\u003cQString,QString\u003e \u0026 mapping"},{"Uniquefunname":"void setNormalState()","Funname":"setNormalState","Returntype":"void","Args":""},{"Uniquefunname":"void setShortcutKey(const QString \u0026 key)","Funname":"setShortcutKey","Returntype":"void","Args":"const QString \u0026 key"},{"Uniquefunname":"void shortcutKeyPress(QKeyEvent * e)","Funname":"shortcutKeyPress","Returntype":"void","Args":"QKeyEvent * e"},{"Uniquefunname":"Q_SIGNALS shortcutKeysChanged(const QString \u0026 shortcutKeys)","Funname":"shortcutKeysChanged","Returntype":"Q_SIGNALS","Args":"const QString \u0026 shortcutKeys"},{"Uniquefunname":"void shortcutKeysFinished(const QString \u0026 shortcutKeys)","Funname":"shortcutKeysFinished","Returntype":"void","Args":"const QString \u0026 shortcutKeys"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""},{"Uniquefunname":"private Q_SLOTS toEchoMode()","Funname":"toEchoMode","Returntype":"private Q_SLOTS","Args":""},{"Uniquefunname":"void toInputMode()","Funname":"toInputMode","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DSHORTCUTEDIT_H"]},{"Name":"enum:EchoState","Fields":["Hover","Invalid","Normal"]}]}
{"Filepath":"src/widgets/dsimplelistitem.h","Functions":[{"Uniquefunname":"Q_OBJECT public DSimpleListItem()","Funname":"DSimpleListItem","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"virtual void drawBackground(QRect rect,QPainter * painter,int index,bool isSelect,bool isHover)","Funname":"drawBackground","Returntype":"virtual void","Args":"QRect rect,QPainter * painter,int index,bool isSelect,bool isHover"},{"Uniquefunname":"virtual void drawForeground(QRect rect,QPainter * painter,int column,int index,bool isSelect,bool isHover)","Funname":"drawForeground","Returntype":"virtual void","Args":"QRect rect,QPainter * painter,int column,int index,bool isSelect,bool isHover"},{"Uniquefunname":"virtual bool sameAs(DSimpleListItem * item)","Funname":"sameAs","Returntype":"virtual bool","Args":"DSimpleListItem * item"}],"Records":[{"Name":"macro","Fields":["DSIMPLELISTITEM_H"]}]}
{"Filepath":"src/widgets/dsimplelistview.h","Functions":[{"Uniquefunname":"void addItems(QList\u003cDSimpleListItem * \u003e items)","Funname":"addItems","Returntype":"void","Args":"QList\u003cDSimpleListItem * \u003e items"},{"Uniquefunname":"int adjustRenderOffset(int offset)","Funname":"adjustRenderOffset","Returntype":"int","Args":"int offset"},{"Uniquefunname":"void changeColumnVisible(int index,bool visible,QList\u003cbool\u003e columnVisibles)","Funname":"changeColumnVisible","Returntype":"void","Args":"int index,bool visible,QList\u003cbool\u003e columnVisibles"},{"Uniquefunname":"void changeHoverItem(QPoint pos,DSimpleListItem * item,int columnIndex)","Funname":"changeHoverItem","Returntype":"void","Args":"QPoint pos,DSimpleListItem * item,int columnIndex"},{"Uniquefunname":"void changeSortingStatus(int index,bool sortingOrder)","Funname":"changeSortingStatus","Returntype":"void","Args":"int index,bool sortingOrder"},{"Uniquefunname":"void clearItems()","Funname":"clearItems","Returntype":"void","Args":""},{"Uniquefunname":"void ctrlScrollPageDown()","Funname":"ctrlScrollPageDown","Returntype":"void","Args":""},{"Uniquefunname":"void ctrlScrollPageUp()","Funname":"ctrlScrollPageUp","Returntype":"void","Args":""},{"Uniquefunname":"void ctrlScrollToEnd()","Funname":"ctrlScrollToEnd","Returntype":"void","Args":""},{"Uniquefunname":"void ctrlScrollToHome()","Funname":"ctrlScrollToHome","Returntype":"void","Args":""},{"Uniquefunname":"protected eventFilter(QObject *,QEvent * event)","Funname":"eventFilter","Returntype":"protected","Args":"QObject *,QEvent * event"},{"Uniquefunname":"int getBottomRenderOffset()","Funname":"getBottomRenderOffset","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cint\u003e getRenderWidths()","Funname":"getRenderWidths","Returntype":"QList\u003cint\u003e","Args":""},{"Uniquefunname":"int getScrollAreaHeight()","Funname":"getScrollAreaHeight","Returntype":"int","Args":""},{"Uniquefunname":"int getScrollbarHeight()","Funname":"getScrollbarHeight","Returntype":"int","Args":""},{"Uniquefunname":"int getScrollbarY()","Funname":"getScrollbarY","Returntype":"int","Args":""},{"Uniquefunname":"QList\u003cDSimpleListItem * \u003e getSelections()","Funname":"getSelections","Returntype":"QList\u003cDSimpleListItem * \u003e","Args":""},{"Uniquefunname":"private Q_SLOTS hideScrollbar()","Funname":"hideScrollbar","Returntype":"private Q_SLOTS","Args":""},{"Uniquefunname":"bool isMouseAtScrollArea(int x)","Funname":"isMouseAtScrollArea","Returntype":"bool","Args":"int x"},{"Uniquefunname":"bool isMouseAtTitleArea(int y)","Funname":"isMouseAtTitleArea","Returntype":"bool","Args":"int y"},{"Uniquefunname":"void keepSelectWhenClickBlank(bool keep)","Funname":"keepSelectWhenClickBlank","Returntype":"void","Args":"bool keep"},{"Uniquefunname":"void keyPressEvent(QKeyEvent * keyEvent)","Funname":"keyPressEvent","Returntype":"void","Args":"QKeyEvent * keyEvent"},{"Uniquefunname":"protected leaveEvent(QEvent * event)","Funname":"leaveEvent","Returntype":"protected","Args":"QEvent * event"},{"Uniquefunname":"void mouseHoverChanged(DSimpleListItem * oldItem,DSimpleListItem * newItem,int columnIndex,QPoint pos)","Funname":"mouseHoverChanged","Returntype":"void","Args":"DSimpleListItem * oldItem,DSimpleListItem * newItem,int columnIndex,QPoint pos"},{"Uniquefunname":"void mouseMoveEvent(QMouseEvent * mouseEvent)","Funname":"mouseMoveEvent","Returntype":"void","Args":"QMouseEvent * mouseEvent"},{"Uniquefunname":"void mousePressChanged(DSimpleListItem * item,int columnIndex,QPoint pos)","Funname":"mousePressChanged","Returntype":"void","Args":"DSimpleListItem * item,int columnIndex,QPoint pos"},{"Uniquefunname":"void mousePressEvent(QMouseEvent * mouseEvent)","Funname":"mousePressEvent","Returntype":"void","Args":"QMouseEvent * mouseEvent"},{"Uniquefunname":"void mouseReleaseChanged(DSimpleListItem * item,int columnIndex,QPoint pos)","Funname":"mouseReleaseChanged","Returntype":"void","Args":"DSimpleListItem * item,int columnIndex,QPoint pos"},{"Uniquefunname":"void mouseReleaseEvent(QMouseEvent * mouseEvent)","Funname":"mouseReleaseEvent","Returntype":"void","Args":"QMouseEvent * mouseEvent"},{"Uniquefunname":"void paintEvent(QPaintEvent *)","Funname":"paintEvent","Returntype":"void","Args":"QPaintEvent *"},{"Uniquefunname":"void paintScrollbar(QPainter * painter)","Funname":"paintScrollbar","Returntype":"void","Args":"QPainter * painter"},{"Uniquefunname":"void refreshItems(QList\u003cDSimpleListItem * \u003e items)","Funname":"refreshItems","Returntype":"void","Args":"QList\u003cDSimpleListItem * \u003e items"},{"Uniquefunname":"void removeItem(DSimpleListItem * item)","Funname":"removeItem","Returntype":"void","Args":"DSimpleListItem * item"},{"Uniquefunname":"Q_SIGNALS rightClickItems(QPoint pos,QList\u003cDSimpleListItem * \u003e items)","Funname":"rightClickItems","Returntype":"Q_SIGNALS","Args":"QPoint pos,QList\u003cDSimpleListItem * \u003e items"},{"Uniquefunname":"void scrollPageDown()","Funname":"scrollPageDown","Returntype":"void","Args":""},{"Uniquefunname":"void scrollPageUp()","Funname":"scrollPageUp","Returntype":"void","Args":""},{"Uniquefunname":"void search(QString searchContent)","Funname":"search","Returntype":"void","Args":"QString searchContent"},{"Uniquefunname":"void selectAllItems()","Funname":"selectAllItems","Returntype":"void","Args":""},{"Uniquefunname":"void selectFirstItem()","Funname":"selectFirstItem","Returntype":"void","Args":""},{"Uniquefunname":"void selectLastItem()","Funname":"selectLastItem","Returntype":"void","Args":""},{"Uniquefunname":"void selectNextItem()","Funname":"selectNextItem","Returntype":"void","Args":""},{"Uniquefunname":"void selectNextItemWithOffset(int scrollOffset)","Funname":"selectNextItemWithOffset","Returntype":"void","Args":"int scrollOffset"},{"Uniquefunname":"void selectPrevItem()","Funname":"selectPrevItem","Returntype":"void","Args":""},{"Uniquefunname":"void selectPrevItemWithOffset(int scrollOffset)","Funname":"selectPrevItemWithOffset","Returntype":"void","Args":"int scrollOffset"},{"Uniquefunname":"void setClipRadius(int radius)","Funname":"setClipRadius","Returntype":"void","Args":"int radius"},{"Uniquefunname":"void setColumnTitleInfo(QList\u003cQString\u003e titles,QList\u003cint\u003e widths,int height)","Funname":"setColumnTitleInfo","Returntype":"void","Args":"QList\u003cQString\u003e titles,QList\u003cint\u003e widths,int height"},{"Uniquefunname":"void setRowHeight(int height)","Funname":"setRowHeight","Returntype":"void","Args":"int height"},{"Uniquefunname":"void setSearchAlgorithm(SearchAlgorithm algorithm)","Funname":"setSearchAlgorithm","Returntype":"void","Args":"SearchAlgorithm algorithm"},{"Uniquefunname":"void setSingleSelect(bool singleSelect)","Funname":"setSingleSelect","Returntype":"void","Args":"bool singleSelect"},{"Uniquefunname":"void shiftSelectItemsWithBound(int selectionStartIndex,int selectionEndIndex)","Funname":"shiftSelectItemsWithBound","Returntype":"void","Args":"int selectionStartIndex,int selectionEndIndex"},{"Uniquefunname":"void shiftSelectNextItemWithOffset(int scrollOffset)","Funname":"shiftSelectNextItemWithOffset","Returntype":"void","Args":"int scrollOffset"},{"Uniquefunname":"void shiftSelectPageDown()","Funname":"shiftSelectPageDown","Returntype":"void","Args":""},{"Uniquefunname":"void shiftSelectPageUp()","Funname":"shiftSelectPageUp","Returntype":"void","Args":""},{"Uniquefunname":"void shiftSelectPrevItemWithOffset(int scrollOffset)","Funname":"shiftSelectPrevItemWithOffset","Returntype":"void","Args":"int scrollOffset"},{"Uniquefunname":"void shiftSelectToEnd()","Funname":"shiftSelectToEnd","Returntype":"void","Args":""},{"Uniquefunname":"void shiftSelectToHome()","Funname":"shiftSelectToHome","Returntype":"void","Args":""},{"Uniquefunname":"void shiftSelectToNext()","Funname":"shiftSelectToNext","Returntype":"void","Args":""},{"Uniquefunname":"void shiftSelectToPrev()","Funname":"shiftSelectToPrev","Returntype":"void","Args":""},{"Uniquefunname":"void startScrollbarHideTimer()","Funname":"startScrollbarHideTimer","Returntype":"void","Args":""},{"Uniquefunname":"void wheelEvent(QWheelEvent * event)","Funname":"wheelEvent","Returntype":"void","Args":"QWheelEvent * event"},{"Uniquefunname":" ~DSimpleListView()","Funname":"~DSimpleListView","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DSIMPLELISTVIEW_H"]}]}
{"Filepath":"src/widgets/dslider.h","Functions":[{"Uniquefunname":"protected DSlider(DSliderPrivate \u0026 q,QWidget * parent)","Funname":"DSlider","Returntype":"protected","Args":"DSliderPrivate \u0026 q,QWidget * parent"},{"Uniquefunname":"void actionTriggered(int action)","Funname":"actionTriggered","Returntype":"void","Args":"int action"},{"Uniquefunname":"bool event(QEvent * event)","Funname":"event","Returntype":"bool","Args":"QEvent * event"},{"Uniquefunname":"bool eventFilter(QObject * watched,QEvent * event)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * watched,QEvent * event"},{"Uniquefunname":"bool handleVisible()","Funname":"handleVisible","Returntype":"bool","Args":""},{"Uniquefunname":"void iconClicked(SliderIcons icon,bool checked)","Funname":"iconClicked","Returntype":"void","Args":"SliderIcons icon,bool checked"},{"Uniquefunname":"int maximum()","Funname":"maximum","Returntype":"int","Args":""},{"Uniquefunname":"int minimum()","Funname":"minimum","Returntype":"int","Args":""},{"Uniquefunname":"Qt orientation()","Funname":"orientation","Returntype":"Qt","Args":""},{"Uniquefunname":"int pageStep()","Funname":"pageStep","Returntype":"int","Args":""},{"Uniquefunname":"void paintEvent(QPaintEvent * ev)","Funname":"paintEvent","Returntype":"void","Args":"QPaintEvent * ev"},{"Uniquefunname":"void rangeChanged(int min,int max)","Funname":"rangeChanged","Returntype":"void","Args":"int min,int max"},{"Uniquefunname":"void setAboveTicks(const QStringList \u0026 info)","Funname":"setAboveTicks","Returntype":"void","Args":"const QStringList \u0026 info"},{"Uniquefunname":"void setBelowTicks(const QStringList \u0026 info)","Funname":"setBelowTicks","Returntype":"void","Args":"const QStringList \u0026 info"},{"Uniquefunname":"void setEnabledAcrossStyle(bool enabled)","Funname":"setEnabledAcrossStyle","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setHandleVisible(bool b)","Funname":"setHandleVisible","Returntype":"void","Args":"bool b"},{"Uniquefunname":"void setIconSize(const QSize \u0026 size)","Funname":"setIconSize","Returntype":"void","Args":"const QSize \u0026 size"},{"Uniquefunname":"void setLeftIcon(const QIcon \u0026 left)","Funname":"setLeftIcon","Returntype":"void","Args":"const QIcon \u0026 left"},{"Uniquefunname":"void setLeftTicks(const QStringList \u0026 info)","Funname":"setLeftTicks","Returntype":"void","Args":"const QStringList \u0026 info"},{"Uniquefunname":"void setMarkPositions(QList\u003cint\u003e list)","Funname":"setMarkPositions","Returntype":"void","Args":"QList\u003cint\u003e list"},{"Uniquefunname":"void setMaximum(int max)","Funname":"setMaximum","Returntype":"void","Args":"int max"},{"Uniquefunname":"void setMinimum(int min)","Funname":"setMinimum","Returntype":"void","Args":"int min"},{"Uniquefunname":"void setMouseWheelEnabled(bool enabled)","Funname":"setMouseWheelEnabled","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setPageStep(int pageStep)","Funname":"setPageStep","Returntype":"void","Args":"int pageStep"},{"Uniquefunname":"void setRightIcon(const QIcon \u0026 right)","Funname":"setRightIcon","Returntype":"void","Args":"const QIcon \u0026 right"},{"Uniquefunname":"void setRightTicks(const QStringList \u0026 info)","Funname":"setRightTicks","Returntype":"void","Args":"const QStringList \u0026 info"},{"Uniquefunname":"void setTipValue(const QString \u0026 value)","Funname":"setTipValue","Returntype":"void","Args":"const QString \u0026 value"},{"Uniquefunname":"void setValue(int value)","Funname":"setValue","Returntype":"void","Args":"int value"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""},{"Uniquefunname":"QSlider * slider()","Funname":"slider","Returntype":"QSlider *","Args":""},{"Uniquefunname":"void sliderMoved(int position)","Funname":"sliderMoved","Returntype":"void","Args":"int position"},{"Uniquefunname":"void sliderPressed()","Funname":"sliderPressed","Returntype":"void","Args":""},{"Uniquefunname":"void sliderReleased()","Funname":"sliderReleased","Returntype":"void","Args":""},{"Uniquefunname":"QSlider tickPosition()","Funname":"tickPosition","Returntype":"QSlider","Args":""},{"Uniquefunname":"int value()","Funname":"value","Returntype":"int","Args":""},{"Uniquefunname":"Q_SIGNALS valueChanged(int value)","Funname":"valueChanged","Returntype":"Q_SIGNALS","Args":"int value"}],"Records":[{"Name":"macro","Fields":["DSLIDER_H"]},{"Name":"enum:SliderIcons","Fields":["LeftIcon","RightIcon"]}]}
{"Filepath":"src/widgets/dspinbox.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(bool alert READ isAlert WRITE setAlert NOTIFY alertChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"bool alert READ isAlert WRITE setAlert NOTIFY alertChanged"},{"Uniquefunname":"Q_SIGNALS alertChanged(bool alert)","Funname":"alertChanged","Returntype":"Q_SIGNALS","Args":"bool alert"},{"Uniquefunname":"D_DECL_DEPRECATED double defaultValue()","Funname":"defaultValue","Returntype":"D_DECL_DEPRECATED double","Args":""},{"Uniquefunname":"D_DECL_DEPRECATED int defaultValue()","Funname":"defaultValue","Returntype":"D_DECL_DEPRECATED int","Args":""},{"Uniquefunname":"D_DECL_DEPRECATED void defaultValueChanged(double defaultValue)","Funname":"defaultValueChanged","Returntype":"D_DECL_DEPRECATED void","Args":"double defaultValue"},{"Uniquefunname":"D_DECL_DEPRECATED void defaultValueChanged(int defaultValue)","Funname":"defaultValueChanged","Returntype":"D_DECL_DEPRECATED void","Args":"int defaultValue"},{"Uniquefunname":"bool isAlert()","Funname":"isAlert","Returntype":"bool","Args":""},{"Uniquefunname":"QLineEdit * lineEdit()","Funname":"lineEdit","Returntype":"QLineEdit *","Args":""},{"Uniquefunname":"public Q_SLOTS setAlert(bool alert)","Funname":"setAlert","Returntype":"public Q_SLOTS","Args":"bool alert"},{"Uniquefunname":"D_DECL_DEPRECATED void setDefaultValue(double defaultValue)","Funname":"setDefaultValue","Returntype":"D_DECL_DEPRECATED void","Args":"double defaultValue"},{"Uniquefunname":"D_DECL_DEPRECATED void setDefaultValue(int defaultValue)","Funname":"setDefaultValue","Returntype":"D_DECL_DEPRECATED void","Args":"int defaultValue"},{"Uniquefunname":"void setEnabledEmbedStyle(bool enabled)","Funname":"setEnabledEmbedStyle","Returntype":"void","Args":"bool enabled"}],"Records":[{"Name":"macro","Fields":["DSPINBOX_H"]}]}
{"Filepath":"src/widgets/dspinner.h","Functions":[{"Uniquefunname":"void changeEvent(QEvent * e)","Funname":"changeEvent","Returntype":"void","Args":"QEvent * e"},{"Uniquefunname":"bool isPlaying()","Funname":"isPlaying","Returntype":"bool","Args":""},{"Uniquefunname":"protected paintEvent(QPaintEvent *)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent *"},{"Uniquefunname":"void setBackgroundColor(QColor color)","Funname":"setBackgroundColor","Returntype":"void","Args":"QColor color"},{"Uniquefunname":"public Q_SLOTS start()","Funname":"start","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"void stop()","Funname":"stop","Returntype":"void","Args":""},{"Uniquefunname":" ~DSpinner()","Funname":"~DSpinner","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DSPINNER_H"]}]}
{"Filepath":"src/widgets/dstackwidget.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(bool busy READ busy NOTIFY busyChanged FINAL)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"bool busy READ busy NOTIFY busyChanged FINAL"},{"Uniquefunname":"virtual QVariantAnimation * animation()","Funname":"animation","Returntype":"virtual QVariantAnimation *","Args":""},{"Uniquefunname":"int animationDuration()","Funname":"animationDuration","Returntype":"int","Args":""},{"Uniquefunname":"QEasingCurve animationType()","Funname":"animationType","Returntype":"QEasingCurve","Args":""},{"Uniquefunname":"virtual void beginTransition(const TransitionInfo \u0026 info)","Funname":"beginTransition","Returntype":"virtual void","Args":"const TransitionInfo \u0026 info"},{"Uniquefunname":"void beginTransition(const TransitionInfo \u0026 info)","Funname":"beginTransition","Returntype":"void","Args":"const TransitionInfo \u0026 info"},{"Uniquefunname":"bool busy()","Funname":"busy","Returntype":"bool","Args":""},{"Uniquefunname":"Q_SIGNALS busyChanged(bool busy)","Funname":"busyChanged","Returntype":"Q_SIGNALS","Args":"bool busy"},{"Uniquefunname":"void clear()","Funname":"clear","Returntype":"void","Args":""},{"Uniquefunname":"int currentIndex()","Funname":"currentIndex","Returntype":"int","Args":""},{"Uniquefunname":"void currentIndexChanged(int currentIndex)","Funname":"currentIndexChanged","Returntype":"void","Args":"int currentIndex"},{"Uniquefunname":"QWidget * currentWidget()","Funname":"currentWidget","Returntype":"QWidget *","Args":""},{"Uniquefunname":"void currentWidgetChanged(QWidget * currentWidget)","Funname":"currentWidgetChanged","Returntype":"void","Args":"QWidget * currentWidget"},{"Uniquefunname":"int depth()","Funname":"depth","Returntype":"int","Args":""},{"Uniquefunname":"void depthChanged(int depth)","Funname":"depthChanged","Returntype":"void","Args":"int depth"},{"Uniquefunname":"QWidget * getWidgetByIndex(int index)","Funname":"getWidgetByIndex","Returntype":"QWidget *","Args":"int index"},{"Uniquefunname":"int indexOf(QWidget * widget)","Funname":"indexOf","Returntype":"int","Args":"QWidget * widget"},{"Uniquefunname":"const TransitionInfo \u0026 info()","Funname":"info","Returntype":"const TransitionInfo \u0026","Args":""},{"Uniquefunname":"void setAnimationDuration(int animationDuration)","Funname":"setAnimationDuration","Returntype":"void","Args":"int animationDuration"},{"Uniquefunname":"void setAnimationType(QEasingCurve::Type animationType)","Funname":"setAnimationType","Returntype":"void","Args":"QEasingCurve::Type animationType"},{"Uniquefunname":"void setTransition(DAbstractStackWidgetTransition * transition)","Funname":"setTransition","Returntype":"void","Args":"DAbstractStackWidgetTransition * transition"},{"Uniquefunname":"void switchWidgetFinished()","Funname":"switchWidgetFinished","Returntype":"void","Args":""},{"Uniquefunname":"DAbstractStackWidgetTransition * transition()","Funname":"transition","Returntype":"DAbstractStackWidgetTransition *","Args":""},{"Uniquefunname":"protected updateVariant(const QVariant \u0026 variant)","Funname":"updateVariant","Returntype":"protected","Args":"const QVariant \u0026 variant"},{"Uniquefunname":"private Q_SLOTS updateVariant(const QVariant \u0026 variant)","Funname":"updateVariant","Returntype":"private Q_SLOTS","Args":"const QVariant \u0026 variant"},{"Uniquefunname":"void widgetDepthChanged(QWidget * widget,int depth)","Funname":"widgetDepthChanged","Returntype":"void","Args":"QWidget * widget,int depth"}],"Records":[{"Name":"macro","Fields":["DSTACKWIDGET_H"]},{"Name":"enum:TransitionType","Fields":["Pop","Push"]},{"Name":"struct:TransitionInfo","Fields":["QWidget * TransitionInfo::newWidget","QWidget * TransitionInfo::oldWidget","DStackWidget * TransitionInfo::stackWidget","TransitionType TransitionInfo::type"]}]}
{"Filepath":"src/widgets/dstyle.h","Functions":[{"Uniquefunname":" DStyle()","Funname":"DStyle","Returntype":"","Args":""},{"Uniquefunname":"public DStylePainter()","Funname":"DStylePainter","Returntype":"public","Args":""},{"Uniquefunname":" DStylePainter(QPaintDevice * pd,QWidget * w)","Funname":"DStylePainter","Returntype":"","Args":"QPaintDevice * pd,QWidget * w"},{"Uniquefunname":"explicit DStylePainter(QWidget * w)","Funname":"DStylePainter","Returntype":"explicit","Args":"QWidget * w"},{"Uniquefunname":"Q_DECLARE_FLAGS(Corners, Corner)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"Corners,Corner"},{"Uniquefunname":"bool begin(QPaintDevice * pd,QWidget * w)","Funname":"begin","Returntype":"bool","Args":"QPaintDevice * pd,QWidget * w"},{"Uniquefunname":"bool begin(QWidget * w)","Funname":"begin","Returntype":"bool","Args":"QWidget * w"},{"Uniquefunname":"void bindDrawFun(DrawFun drawFun)","Funname":"bindDrawFun","Returntype":"void","Args":"DrawFun drawFun"},{"Uniquefunname":"QColor blendColor(const QColor \u0026 substrate,const QColor \u0026 superstratum)","Funname":"blendColor","Returntype":"QColor","Args":"const QColor \u0026 substrate,const QColor \u0026 superstratum"},{"Uniquefunname":"QIconEngine * clone()","Funname":"clone","Returntype":"QIconEngine *","Args":""},{"Uniquefunname":"void drawAddButton(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawAddButton","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawArrowBack(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawArrowBack","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawArrowDown(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawArrowDown","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawArrowElement(Qt::ArrowType arrow,QPainter * pa,const QRectF \u0026 rect)","Funname":"drawArrowElement","Returntype":"void","Args":"Qt::ArrowType arrow,QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawArrowEnter(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawArrowEnter","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawArrowForward(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawArrowForward","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawArrowLeave(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawArrowLeave","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawArrowLeft(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawArrowLeft","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawArrowNext(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawArrowNext","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawArrowPrev(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawArrowPrev","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawArrowRight(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawArrowRight","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawArrowUp(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawArrowUp","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawBorder(QPainter * pa,const QRectF \u0026 rect,const QBrush \u0026 brush,int borderWidth,int radius)","Funname":"drawBorder","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect,const QBrush \u0026 brush,int borderWidth,int radius"},{"Uniquefunname":"void drawCloseButton(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawCloseButton","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawComplexControl(QStyle::ComplexControl cc,const QStyleOptionComplex \u0026 opt)","Funname":"drawComplexControl","Returntype":"void","Args":"QStyle::ComplexControl cc,const QStyleOptionComplex \u0026 opt"},{"Uniquefunname":"void DStylePainter drawComplexControl(QStyle::ComplexControl cc,const QStyleOptionComplex \u0026 opt)","Funname":"drawComplexControl","Returntype":"void DStylePainter","Args":"QStyle::ComplexControl cc,const QStyleOptionComplex \u0026 opt"},{"Uniquefunname":"void drawControl(DStyle::ControlElement ce,const QStyleOption \u0026 opt)","Funname":"drawControl","Returntype":"void","Args":"DStyle::ControlElement ce,const QStyleOption \u0026 opt"},{"Uniquefunname":"void drawControl(QStyle::ControlElement ce,const QStyleOption \u0026 opt)","Funname":"drawControl","Returntype":"void","Args":"QStyle::ControlElement ce,const QStyleOption \u0026 opt"},{"Uniquefunname":"void DStylePainter::drawControl(DStyle::ControlElement ce, const QStyleOption \u0026opt)","Funname":"drawControl","Returntype":"void DStylePainter","Args":"DStyle::ControlElement ce,const QStyleOption \u0026 opt"},{"Uniquefunname":"void DStylePainter::drawControl(QStyle::ControlElement ce, const QStyleOption \u0026opt)","Funname":"drawControl","Returntype":"void DStylePainter","Args":"QStyle::ControlElement ce,const QStyleOption \u0026 opt"},{"Uniquefunname":"void drawDecreaseElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawDecreaseElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawDeleteButton(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawDeleteButton","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawEditElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawEditElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawExpandElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawExpandElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawForkElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawForkElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawHidePassword(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawHidePassword","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"public drawIcon(const QIcon \u0026 icon,QPainter * pa,const QRectF \u0026 rect)","Funname":"drawIcon","Returntype":"public","Args":"const QIcon \u0026 icon,QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawIncreaseElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawIncreaseElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawIndicatorChecked(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawIndicatorChecked","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawIndicatorMajuscule(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawIndicatorMajuscule","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawIndicatorUnchecked(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawIndicatorUnchecked","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawItemPixmap(const QRect \u0026 r,int flags,const QPixmap \u0026 pixmap)","Funname":"drawItemPixmap","Returntype":"void","Args":"const QRect \u0026 r,int flags,const QPixmap \u0026 pixmap"},{"Uniquefunname":"void DStylePainter::drawItemPixmap(const QRect \u0026r, int flags, const QPixmap \u0026pixmap)","Funname":"drawItemPixmap","Returntype":"void DStylePainter","Args":"const QRect \u0026 r,int flags,const QPixmap \u0026 pixmap"},{"Uniquefunname":"void DStylePainter drawItemText(const QRect \u0026 r,int flags,const QPalette \u0026 pal,bool enabled,const QString \u0026 text,QPalette::ColorRole textRole)","Funname":"drawItemText","Returntype":"void DStylePainter","Args":"const QRect \u0026 r,int flags,const QPalette \u0026 pal,bool enabled,const QString \u0026 text,QPalette::ColorRole textRole"},{"Uniquefunname":"void drawLineEditClearButton(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawLineEditClearButton","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawLockElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawLockElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawMarkElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawMarkElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawMediaVolumeElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawMediaVolumeElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawMediaVolumeFullElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawMediaVolumeFullElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawMediaVolumeLeftElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawMediaVolumeLeftElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawMediaVolumeMutedElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawMediaVolumeMutedElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawMediaVolumeRightElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawMediaVolumeRightElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawPlus(QPainter * painter,const QRectF \u0026 rect,const QColor \u0026 color,qreal width)","Funname":"drawPlus","Returntype":"void","Args":"QPainter * painter,const QRectF \u0026 rect,const QColor \u0026 color,qreal width"},{"Uniquefunname":"void drawPrimitive(DStyle::PrimitiveElement pe,const QStyleOption \u0026 opt)","Funname":"drawPrimitive","Returntype":"void","Args":"DStyle::PrimitiveElement pe,const QStyleOption \u0026 opt"},{"Uniquefunname":"void drawPrimitive(QStyle::PrimitiveElement pe,const QStyleOption \u0026 opt)","Funname":"drawPrimitive","Returntype":"void","Args":"QStyle::PrimitiveElement pe,const QStyleOption \u0026 opt"},{"Uniquefunname":"void DStylePainter::drawPrimitive(DStyle::PrimitiveElement pe, const QStyleOption \u0026opt)","Funname":"drawPrimitive","Returntype":"void DStylePainter","Args":"DStyle::PrimitiveElement pe,const QStyleOption \u0026 opt"},{"Uniquefunname":"void DStylePainter::drawPrimitive(QStyle::PrimitiveElement pe, const QStyleOption \u0026opt)","Funname":"drawPrimitive","Returntype":"void DStylePainter","Args":"QStyle::PrimitiveElement pe,const QStyleOption \u0026 opt"},{"Uniquefunname":"void drawReduceElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawReduceElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawSelectElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawSelectElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawShadow(QPainter * pa,const QRect \u0026 rect,const QPainterPath \u0026 path,const QColor \u0026 sc,int radius,const QPoint \u0026 offset)","Funname":"drawShadow","Returntype":"void","Args":"QPainter * pa,const QRect \u0026 rect,const QPainterPath \u0026 path,const QColor \u0026 sc,int radius,const QPoint \u0026 offset"},{"Uniquefunname":"void drawShowPassword(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawShowPassword","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawSubtract(QPainter * painter,const QRectF \u0026 rect,const QColor \u0026 color,qreal width)","Funname":"drawSubtract","Returntype":"void","Args":"QPainter * painter,const QRectF \u0026 rect,const QColor \u0026 color,qreal width"},{"Uniquefunname":"void drawTitleBarCloseButton(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawTitleBarCloseButton","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawTitleBarMaxButton(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawTitleBarMaxButton","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawTitleBarMenuButton(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawTitleBarMenuButton","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawTitleBarMinButton(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawTitleBarMinButton","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawTitleBarNormalButton(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawTitleBarNormalButton","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawTitleQuitFullButton(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawTitleQuitFullButton","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"void drawUnlockElement(QPainter * pa,const QRectF \u0026 rect)","Funname":"drawUnlockElement","Returntype":"void","Args":"QPainter * pa,const QRectF \u0026 rect"},{"Uniquefunname":"const DStyle * dstyle()","Funname":"dstyle","Returntype":"const DStyle *","Args":""},{"Uniquefunname":"QPixmap generatedIconPixmap(QIcon::Mode iconMode,const QPixmap \u0026 pixmap,const QStyleOption * opt)","Funname":"generatedIconPixmap","Returntype":"QPixmap","Args":"QIcon::Mode iconMode,const QPixmap \u0026 pixmap,const QStyleOption * opt"},{"Uniquefunname":"QColor getColor(const QStyleOption * option,QPalette::ColorRole role)","Funname":"getColor","Returntype":"QColor","Args":"const QStyleOption * option,QPalette::ColorRole role"},{"Uniquefunname":"QColor getColor(const QStyleOption * option,const DPalette \u0026 palette,DPalette::ColorType type)","Funname":"getColor","Returntype":"QColor","Args":"const QStyleOption * option,const DPalette \u0026 palette,DPalette::ColorType type"},{"Uniquefunname":"template\u003cclass T\u003e QColor getColor(const T * option,DPalette::ColorType type)","Funname":"getColor","Returntype":"template\u003cclass T\u003e QColor","Args":"const T * option,DPalette::ColorType type"},{"Uniquefunname":"DStyle getState(const QStyleOption * option)","Funname":"getState","Returntype":"DStyle","Args":"const QStyleOption * option"},{"Uniquefunname":"void paint(QPainter * painter,const QPalette \u0026 palette,const QRectF \u0026 rect)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QPalette \u0026 palette,const QRectF \u0026 rect"},{"Uniquefunname":"void paint(QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QRect \u0026 rect,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"QPixmap pixmap(const QSize \u0026 size,QIcon::Mode mode,QIcon::State state)","Funname":"pixmap","Returntype":"QPixmap","Args":"const QSize \u0026 size,QIcon::Mode mode,QIcon::State state"},{"Uniquefunname":"void setFocusRectVisible(QWidget * widget,bool visible)","Funname":"setFocusRectVisible","Returntype":"void","Args":"QWidget * widget,bool visible"},{"Uniquefunname":"void setFrameRadius(QWidget * widget,int radius)","Funname":"setFrameRadius","Returntype":"void","Args":"QWidget * widget,int radius"},{"Uniquefunname":"void setFrontRole(const QWidget * widget,QPalette::ColorRole role)","Funname":"setFrontRole","Returntype":"void","Args":"const QWidget * widget,QPalette::ColorRole role"},{"Uniquefunname":"void setIconName(const QString \u0026 name)","Funname":"setIconName","Returntype":"void","Args":"const QString \u0026 name"},{"Uniquefunname":" setStyle(style)","Funname":"setStyle","Returntype":"","Args":"style"},{"Uniquefunname":"void setStyle(const QStyle * style)","Funname":"setStyle","Returntype":"void","Args":"const QStyle * style"},{"Uniquefunname":"void setTooltipTextFormat(Qt::TextFormat format)","Funname":"setTooltipTextFormat","Returntype":"void","Args":"Qt::TextFormat format"},{"Uniquefunname":"QPalette standardPalette()","Funname":"standardPalette","Returntype":"QPalette","Args":""},{"Uniquefunname":"QStyle * style()","Funname":"style","Returntype":"QStyle *","Args":""},{"Uniquefunname":"const QStyle * style()","Funname":"style","Returntype":"const QStyle *","Args":""},{"Uniquefunname":"int styleHint(StyleHint sh,const QStyleOption * opt,const QWidget * w,QStyleHintReturn * shret)","Funname":"styleHint","Returntype":"int","Args":"StyleHint sh,const QStyleOption * opt,const QWidget * w,QStyleHintReturn * shret"},{"Uniquefunname":"QPair\u003cQIcon toIconModeState(const QStyleOption * option)","Funname":"toIconModeState","Returntype":"QPair\u003cQIcon","Args":"const QStyleOption * option"},{"Uniquefunname":"Qt tooltipTextFormat()","Funname":"tooltipTextFormat","Returntype":"Qt","Args":""},{"Uniquefunname":"QRect viewItemDrawText(const QStyle * style,QPainter * p,const QStyleOptionViewItem * option,const QRect \u0026 rect)","Funname":"viewItemDrawText","Returntype":"QRect","Args":"const QStyle * style,QPainter * p,const QStyleOptionViewItem * option,const QRect \u0026 rect"},{"Uniquefunname":"virtual QRect viewItemDrawText(QPainter * p,const QStyleOptionViewItem * option,const QRect \u0026 rect)","Funname":"viewItemDrawText","Returntype":"virtual QRect","Args":"QPainter * p,const QStyleOptionViewItem * option,const QRect \u0026 rect"},{"Uniquefunname":"void viewItemLayout(const QStyle * style,const QStyleOptionViewItem * opt,QRect * pixmapRect,QRect * textRect,QRect * checkRect,bool sizehint)","Funname":"viewItemLayout","Returntype":"void","Args":"const QStyle * style,const QStyleOptionViewItem * opt,QRect * pixmapRect,QRect * textRect,QRect * checkRect,bool sizehint"},{"Uniquefunname":"virtual void viewItemLayout(const QStyleOptionViewItem * opt,QRect * pixmapRect,QRect * textRect,QRect * checkRect,bool sizehint)","Funname":"viewItemLayout","Returntype":"virtual void","Args":"const QStyleOptionViewItem * opt,QRect * pixmapRect,QRect * textRect,QRect * checkRect,bool sizehint"},{"Uniquefunname":"QSize viewItemSize(const QStyle * style,const QStyleOptionViewItem * option,int role)","Funname":"viewItemSize","Returntype":"QSize","Args":"const QStyle * style,const QStyleOptionViewItem * option,int role"},{"Uniquefunname":"QSizeF viewItemTextLayout(QTextLayout \u0026 textLayout,int lineWidth)","Funname":"viewItemTextLayout","Returntype":"QSizeF","Args":"QTextLayout \u0026 textLayout,int lineWidth"},{"Uniquefunname":"protected virtual_hook(int id,void * data)","Funname":"virtual_hook","Returntype":"protected","Args":"int id,void * data"}],"Records":[{"Name":"enum:Corner","Fields":["BottomLeftCorner","BottomRightCorner","TopLeftCorner","TopRightCorner"]},{"Name":"enum:ControlElement","Fields":["CE_ButtonBoxButton","CE_ButtonBoxButtonBevel","CE_ButtonBoxButtonLabel","CE_CustomBase","CE_FloatingWidget","CE_IconButton","CE_SwitchButton","CE_TextButton"]},{"Name":"enum:ContentsType","Fields":["CT_ButtonBoxButton","CT_CustomBase","CT_FloatingWidget","CT_IconButton","CT_SwitchButton"]},{"Name":"macro","Fields":["DSTYLE_H"]},{"Name":"enum:PrimitiveElement","Fields":["PE_CustomBase","PE_FloatingWidget","PE_Icon","PE_IconButtonIcon","PE_IconButtonPanel","PE_ItemBackground","PE_SwitchButtonGroove","PE_SwitchButtonHandle"]},{"Name":"enum:PixelMetric","Fields":["PM_ButtonMinimizedSize","PM_ContentsMargins","PM_ContentsSpacing","PM_CustomBase","PM_FloatingWidgetRadius","PM_FloatingWidgetShadowHOffset","PM_FloatingWidgetShadowMargins","PM_FloatingWidgetShadowRadius","PM_FloatingWidgetShadowVOffset","PM_FocusBorderSpacing","PM_FocusBorderWidth","PM_FrameMargins","PM_FrameRadius","PM_IconButtonIconSize","PM_ShadowHOffset","PM_ShadowRadius","PM_ShadowVOffset","PM_SwitchButtonHandleWidth","PM_SwithcButtonHandleHeight","PM_TopLevelWindowRadius"]},{"Name":"enum:SubElement","Fields":["SE_ButtonBoxButtonContents","SE_ButtonBoxButtonFocusRect","SE_CustomBase","SE_FloatingWidget","SE_IconButtonIcon","SE_SwitchButtonGroove","SE_SwitchButtonHandle"]},{"Name":"enum:StandardPixmap","Fields":["SP_AddButton","SP_ArrowEnter","SP_ArrowLeave","SP_ArrowNext","SP_ArrowPrev","SP_CloseButton","SP_CustomBase","SP_DecreaseElement","SP_DeleteButton","SP_EditElement","SP_ExpandElement","SP_ForkElement","SP_HidePassword","SP_IncreaseElement","SP_IndicatorChecked","SP_IndicatorMajuscule","SP_IndicatorSearch","SP_IndicatorUnchecked","SP_LockElement","SP_MarkElement","SP_MediaVolumeHighElement","SP_MediaVolumeLeftElement","SP_MediaVolumeLowElement","SP_MediaVolumeMutedElement","SP_MediaVolumeRightElement","SP_ReduceElement","SP_SelectElement","SP_ShowPassword","SP_TitleQuitFullButton","SP_UnlockElement"]},{"Name":"enum:StyleState","Fields":["SS_CheckedFlag","SS_FlagCustomBase","SS_FocusFlag","SS_HoverState","SS_NormalState","SS_PressState","SS_SelectedFlag","SS_StateCustomBase","StyleState_Mask"]}]}
{"Filepath":"src/widgets/dstyleditemdelegate.h","Functions":[{"Uniquefunname":"D_DECL_DEPRECATED explicit DViewItemAction(Qt::Alignment alignment,const QSize \u0026 iconSize,const QSize \u0026 maxSize,bool clickable,QObject * parent)","Funname":"DViewItemAction","Returntype":"D_DECL_DEPRECATED explicit","Args":"Qt::Alignment alignment,const QSize \u0026 iconSize,const QSize \u0026 maxSize,bool clickable,QObject * parent"},{"Uniquefunname":"    D_DECLARE_PRIVATE(DViewItemAction)","Funname":"D_DECLARE_PRIVATE","Returntype":"Q_OBJECT","Args":"DViewItemAction"},{"Uniquefunname":"DViewItemActionList actionList(Qt::Edge edge)","Funname":"actionList","Returntype":"DViewItemActionList","Args":"Qt::Edge edge"},{"Uniquefunname":"Qt alignment()","Funname":"alignment","Returntype":"Qt","Args":""},{"Uniquefunname":"DPalette backgroundRole()","Funname":"backgroundRole","Returntype":"DPalette","Args":""},{"Uniquefunname":"BackgroundType backgroundType()","Funname":"backgroundType","Returntype":"BackgroundType","Args":""},{"Uniquefunname":"DPalette backgroundType()","Funname":"backgroundType","Returntype":"DPalette","Args":""},{"Uniquefunname":"QMargins clickAreaMargins()","Funname":"clickAreaMargins","Returntype":"QMargins","Args":""},{"Uniquefunname":"bool eventFilter(QObject * object,QEvent * event)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * object,QEvent * event"},{"Uniquefunname":"QFont font()","Funname":"font","Returntype":"QFont","Args":""},{"Uniquefunname":"QSize iconSize()","Funname":"iconSize","Returntype":"QSize","Args":""},{"Uniquefunname":"protected initStyleOption(QStyleOptionViewItem * option,const QModelIndex \u0026 index)","Funname":"initStyleOption","Returntype":"protected","Args":"QStyleOptionViewItem * option,const QModelIndex \u0026 index"},{"Uniquefunname":"bool isClickable()","Funname":"isClickable","Returntype":"bool","Args":""},{"Uniquefunname":"QSize itemSize()","Funname":"itemSize","Returntype":"QSize","Args":""},{"Uniquefunname":"QMargins margins()","Funname":"margins","Returntype":"QMargins","Args":""},{"Uniquefunname":"QSize maximumSize()","Funname":"maximumSize","Returntype":"QSize","Args":""},{"Uniquefunname":"void paint(QPainter * painter,const QStyleOptionViewItem \u0026 option,const QModelIndex \u0026 index)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QStyleOptionViewItem \u0026 option,const QModelIndex \u0026 index"},{"Uniquefunname":"void setActionList(Qt::Edge edge,const DViewItemActionList \u0026 list)","Funname":"setActionList","Returntype":"void","Args":"Qt::Edge edge,const DViewItemActionList \u0026 list"},{"Uniquefunname":"void setBackgroundRole(DPalette::ColorRole role)","Funname":"setBackgroundRole","Returntype":"void","Args":"DPalette::ColorRole role"},{"Uniquefunname":"void setBackgroundRole(DPalette::ColorType role)","Funname":"setBackgroundRole","Returntype":"void","Args":"DPalette::ColorType role"},{"Uniquefunname":"public Q_SLOTS setBackgroundType(BackgroundType backgroundType)","Funname":"setBackgroundType","Returntype":"public Q_SLOTS","Args":"BackgroundType backgroundType"},{"Uniquefunname":"void setClickAreaMargins(const QMargins \u0026 margins)","Funname":"setClickAreaMargins","Returntype":"void","Args":"const QMargins \u0026 margins"},{"Uniquefunname":"void setFontSize(DFontSizeManager::SizeType size)","Funname":"setFontSize","Returntype":"void","Args":"DFontSizeManager::SizeType size"},{"Uniquefunname":"void setItemSize(QSize itemSize)","Funname":"setItemSize","Returntype":"void","Args":"QSize itemSize"},{"Uniquefunname":"void setItemSpacing(int spacing)","Funname":"setItemSpacing","Returntype":"void","Args":"int spacing"},{"Uniquefunname":"void setMargins(const QMargins margins)","Funname":"setMargins","Returntype":"void","Args":"const QMargins margins"},{"Uniquefunname":"void setTextActionList(const DViewItemActionList \u0026 list)","Funname":"setTextActionList","Returntype":"void","Args":"const DViewItemActionList \u0026 list"},{"Uniquefunname":"void setTextColorRole(DPalette::ColorRole role)","Funname":"setTextColorRole","Returntype":"void","Args":"DPalette::ColorRole role"},{"Uniquefunname":"void setTextColorRole(DPalette::ColorType role)","Funname":"setTextColorRole","Returntype":"void","Args":"DPalette::ColorType role"},{"Uniquefunname":"void setWidget(QWidget * widget)","Funname":"setWidget","Returntype":"void","Args":"QWidget * widget"},{"Uniquefunname":"QSize sizeHint(const QStyleOptionViewItem \u0026 option,const QModelIndex \u0026 index)","Funname":"sizeHint","Returntype":"QSize","Args":"const QStyleOptionViewItem \u0026 option,const QModelIndex \u0026 index"},{"Uniquefunname":"int spacing()","Funname":"spacing","Returntype":"int","Args":""},{"Uniquefunname":"DViewItemActionList textActionList()","Funname":"textActionList","Returntype":"DViewItemActionList","Args":""},{"Uniquefunname":"DPalette textColorRole()","Funname":"textColorRole","Returntype":"DPalette","Args":""},{"Uniquefunname":"DPalette textColorType()","Funname":"textColorType","Returntype":"DPalette","Args":""},{"Uniquefunname":"void updateEditorGeometry(QWidget * editor,const QStyleOptionViewItem \u0026 option,const QModelIndex \u0026 index)","Funname":"updateEditorGeometry","Returntype":"void","Args":"QWidget * editor,const QStyleOptionViewItem \u0026 option,const QModelIndex \u0026 index"},{"Uniquefunname":"QWidget * widget()","Funname":"widget","Returntype":"QWidget *","Args":""},{"Uniquefunname":"virtual ~DStandardItem()","Funname":"~DStandardItem","Returntype":"virtual","Args":""}],"Records":[{"Name":"enum:BackgroundType","Fields":["BackgroundType_Mask","ClipCornerBackground","NoBackground","NoNormalState","RoundedBackground"]},{"Name":"macro","Fields":["DSTYLEDITEMDELEGATE_H"]}]}
{"Filepath":"src/widgets/dstyleoption.h","Functions":[{"Uniquefunname":"private DFontSizeManager()","Funname":"DFontSizeManager","Returntype":"private","Args":""},{"Uniquefunname":"    Q_DECLARE_FLAGS(LineEditFeatures, LineEditFeature)","Funname":"Q_DECLARE_FLAGS","Returntype":"","Args":"LineEditFeatures,LineEditFeature"},{"Uniquefunname":"void bind(QWidget * widget,SizeType type)","Funname":"bind","Returntype":"void","Args":"QWidget * widget,SizeType type"},{"Uniquefunname":"void bind(QWidget * widget,SizeType type,int weight)","Funname":"bind","Returntype":"void","Args":"QWidget * widget,SizeType type,int weight"},{"Uniquefunname":"quint16 fontPixelSize(SizeType type)","Funname":"fontPixelSize","Returntype":"quint16","Args":"SizeType type"},{"Uniquefunname":"int fontPixelSize(const QFont \u0026 font)","Funname":"fontPixelSize","Returntype":"int","Args":"const QFont \u0026 font"},{"Uniquefunname":"virtual void init(QWidget * widget)","Funname":"init","Returntype":"virtual void","Args":"QWidget * widget"},{"Uniquefunname":"virtual void init(const QWidget * widget)","Funname":"init","Returntype":"virtual void","Args":"const QWidget * widget"},{"Uniquefunname":"void init(const QWidget * widget)","Funname":"init","Returntype":"void","Args":"const QWidget * widget"},{"Uniquefunname":"DFontSizeManager * instance()","Funname":"instance","Returntype":"DFontSizeManager *","Args":""},{"Uniquefunname":"void setFontGenericPixelSize(quint16 size)","Funname":"setFontGenericPixelSize","Returntype":"void","Args":"quint16 size"},{"Uniquefunname":"void setFontPixelSize(SizeType type,quint16 size)","Funname":"setFontPixelSize","Returntype":"void","Args":"SizeType type,quint16 size"},{"Uniquefunname":"void unbind(QWidget * widget)","Funname":"unbind","Returntype":"void","Args":"QWidget * widget"}],"Records":[{"Name":"enum:LineEditFeature","Fields":["Alert","IconButton","None"]},{"Name":"enum:ButtonPosition","Fields":["Beginning","End","Invalid","Middle","OnlyOne"]},{"Name":"enum:ItemBackgroundPosition","Fields":["Beginning","End","Invalid","Middle","OnlyOne"]},{"Name":"enum:ItemDataRole","Fields":["BottomActionListRole","LeftActionListRole","MarginsRole","RightActionListRole","TextActionListRole","TopActionListRole","UserRole","ViewItemBackgroundRole","ViewItemFontLevelRole","ViewItemForegroundRole"]},{"Name":"enum:ButtonFeature","Fields":["CircleButton","FloatingButton","SuggestButton","TitleBarButton","WarningButton"]},{"Name":"macro","Fields":["DSTYLEOPTION_H"]},{"Name":"enum:SizeType","Fields":["NSizeTypes","T1","T10","T2","T3","T4","T5","T6","T7","T8","T9"]},{"Name":"enum:OptionType","Fields":["SO_CustomBase","SO_HighlightButton"]}]}
{"Filepath":"src/widgets/dsuggestbutton.h","Functions":[{"Uniquefunname":"protected paintEvent(QPaintEvent * event)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent * event"}],"Records":[{"Name":"macro","Fields":["DSUGGESTBUTTON_H"]}]}
{"Filepath":"src/widgets/dswitchbutton.h","Functions":[{"Uniquefunname":"Q_SIGNALS checkedChanged(bool arg)","Funname":"checkedChanged","Returntype":"Q_SIGNALS","Args":"bool arg"},{"Uniquefunname":"void initStyleOption(DStyleOptionButton * option)","Funname":"initStyleOption","Returntype":"void","Args":"DStyleOptionButton * option"},{"Uniquefunname":"protected paintEvent(QPaintEvent * e)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent * e"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DSWITCHBUTTON_H"]}]}
{"Filepath":"src/widgets/dswitchlineexpand.h","Functions":[{"Uniquefunname":"Q_SIGNALS checkedChanged(bool arg)","Funname":"checkedChanged","Returntype":"Q_SIGNALS","Args":"bool arg"},{"Uniquefunname":"DBaseLine * header()","Funname":"header","Returntype":"DBaseLine *","Args":""},{"Uniquefunname":"protected mousePressEvent(QMouseEvent *)","Funname":"mousePressEvent","Returntype":"protected","Args":"QMouseEvent *"},{"Uniquefunname":"void resizeEvent(QResizeEvent * e)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * e"},{"Uniquefunname":"private reverseArrowDirection()","Funname":"reverseArrowDirection","Returntype":"private","Args":""},{"Uniquefunname":"void setExpand(bool value)","Funname":"setExpand","Returntype":"void","Args":"bool value"},{"Uniquefunname":"private setHeader(QWidget * header)","Funname":"setHeader","Returntype":"private","Args":"QWidget * header"},{"Uniquefunname":"void setTitle(const QString \u0026 title)","Funname":"setTitle","Returntype":"void","Args":"const QString \u0026 title"}],"Records":[{"Name":"macro","Fields":["DSWITCHLINEEXPAND_H"]}]}
{"Filepath":"src/widgets/dtabbar.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(bool visibleAddButton READ visibleAddButton WRITE setVisibleAddButton)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"bool visibleAddButton READ visibleAddButton WRITE setVisibleAddButton"},{"Uniquefunname":"int addTab(const QIcon \u0026 icon,const QString \u0026 text)","Funname":"addTab","Returntype":"int","Args":"const QIcon \u0026 icon,const QString \u0026 text"},{"Uniquefunname":"int addTab(const QString \u0026 text)","Funname":"addTab","Returntype":"int","Args":"const QString \u0026 text"},{"Uniquefunname":"bool autoHide()","Funname":"autoHide","Returntype":"bool","Args":""},{"Uniquefunname":"virtual bool canInsertFromMimeData(int index,const QMimeData * source)","Funname":"canInsertFromMimeData","Returntype":"virtual bool","Args":"int index,const QMimeData * source"},{"Uniquefunname":"bool changeCurrentOnDrag()","Funname":"changeCurrentOnDrag","Returntype":"bool","Args":""},{"Uniquefunname":"int count()","Funname":"count","Returntype":"int","Args":""},{"Uniquefunname":"virtual QPixmap createDragPixmapFromTab(int index,const QStyleOptionTab \u0026 option,QPoint * hotspot)","Funname":"createDragPixmapFromTab","Returntype":"virtual QPixmap","Args":"int index,const QStyleOptionTab \u0026 option,QPoint * hotspot"},{"Uniquefunname":"virtual QMimeData * createMimeDataFromTab(int index,const QStyleOptionTab \u0026 option)","Funname":"createMimeDataFromTab","Returntype":"virtual QMimeData *","Args":"int index,const QStyleOptionTab \u0026 option"},{"Uniquefunname":"Q_SIGNALS currentChanged(int index)","Funname":"currentChanged","Returntype":"Q_SIGNALS","Args":"int index"},{"Uniquefunname":"int currentIndex()","Funname":"currentIndex","Returntype":"int","Args":""},{"Uniquefunname":"private d_func()","Funname":"d_func","Returntype":"private","Args":""},{"Uniquefunname":"const DTabBarPrivate * d_func()","Funname":"d_func","Returntype":"const DTabBarPrivate *","Args":""},{"Uniquefunname":"bool documentMode()","Funname":"documentMode","Returntype":"bool","Args":""},{"Uniquefunname":"void dragActionChanged(Qt::DropAction action)","Funname":"dragActionChanged","Returntype":"void","Args":"Qt::DropAction action"},{"Uniquefunname":"void dragEnd(Qt::DropAction action)","Funname":"dragEnd","Returntype":"void","Args":"Qt::DropAction action"},{"Uniquefunname":"protected dragEnterEvent(QDragEnterEvent * e)","Funname":"dragEnterEvent","Returntype":"protected","Args":"QDragEnterEvent * e"},{"Uniquefunname":"QWindow * dragIconWindow()","Funname":"dragIconWindow","Returntype":"QWindow *","Args":""},{"Uniquefunname":"void dragLeaveEvent(QDragLeaveEvent * e)","Funname":"dragLeaveEvent","Returntype":"void","Args":"QDragLeaveEvent * e"},{"Uniquefunname":"void dragMoveEvent(QDragMoveEvent * e)","Funname":"dragMoveEvent","Returntype":"void","Args":"QDragMoveEvent * e"},{"Uniquefunname":"void dragStarted()","Funname":"dragStarted","Returntype":"void","Args":""},{"Uniquefunname":"bool drawBase()","Funname":"drawBase","Returntype":"bool","Args":""},{"Uniquefunname":"void dropEvent(QDropEvent * e)","Funname":"dropEvent","Returntype":"void","Args":"QDropEvent * e"},{"Uniquefunname":"Qt elideMode()","Funname":"elideMode","Returntype":"Qt","Args":""},{"Uniquefunname":"bool expanding()","Funname":"expanding","Returntype":"bool","Args":""},{"Uniquefunname":"QColor flashColor()","Funname":"flashColor","Returntype":"QColor","Args":""},{"Uniquefunname":"QSize iconSize()","Funname":"iconSize","Returntype":"QSize","Args":""},{"Uniquefunname":"virtual void insertFromMimeData(int index,const QMimeData * source)","Funname":"insertFromMimeData","Returntype":"virtual void","Args":"int index,const QMimeData * source"},{"Uniquefunname":"virtual void insertFromMimeDataOnDragEnter(int index,const QMimeData * source)","Funname":"insertFromMimeDataOnDragEnter","Returntype":"virtual void","Args":"int index,const QMimeData * source"},{"Uniquefunname":"int insertTab(int index,const QIcon \u0026 icon,const QString \u0026 text)","Funname":"insertTab","Returntype":"int","Args":"int index,const QIcon \u0026 icon,const QString \u0026 text"},{"Uniquefunname":"int insertTab(int index,const QString \u0026 text)","Funname":"insertTab","Returntype":"int","Args":"int index,const QString \u0026 text"},{"Uniquefunname":"bool isDragable()","Funname":"isDragable","Returntype":"bool","Args":""},{"Uniquefunname":"bool isMovable()","Funname":"isMovable","Returntype":"bool","Args":""},{"Uniquefunname":"bool isTabEnabled(int index)","Funname":"isTabEnabled","Returntype":"bool","Args":"int index"},{"Uniquefunname":"QColor maskColor()","Funname":"maskColor","Returntype":"QColor","Args":""},{"Uniquefunname":"virtual QSize maximumTabSizeHint(int index)","Funname":"maximumTabSizeHint","Returntype":"virtual QSize","Args":"int index"},{"Uniquefunname":"virtual QSize minimumTabSizeHint(int index)","Funname":"minimumTabSizeHint","Returntype":"virtual QSize","Args":"int index"},{"Uniquefunname":"void moveTab(int from,int to)","Funname":"moveTab","Returntype":"void","Args":"int from,int to"},{"Uniquefunname":"virtual void paintTab(QPainter * painter,int index,const QStyleOptionTab \u0026 option)","Funname":"paintTab","Returntype":"virtual void","Args":"QPainter * painter,int index,const QStyleOptionTab \u0026 option"},{"Uniquefunname":"void removeTab(int index)","Funname":"removeTab","Returntype":"void","Args":"int index"},{"Uniquefunname":"void resizeEvent(QResizeEvent * e)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * e"},{"Uniquefunname":"QTabBar selectionBehaviorOnRemove()","Funname":"selectionBehaviorOnRemove","Returntype":"QTabBar","Args":""},{"Uniquefunname":"void setAutoHide(bool hide)","Funname":"setAutoHide","Returntype":"void","Args":"bool hide"},{"Uniquefunname":"void setChangeCurrentOnDrag(bool change)","Funname":"setChangeCurrentOnDrag","Returntype":"void","Args":"bool change"},{"Uniquefunname":"public Q_SLOTS setCurrentIndex(int index)","Funname":"setCurrentIndex","Returntype":"public Q_SLOTS","Args":"int index"},{"Uniquefunname":"void setDocumentMode(bool set)","Funname":"setDocumentMode","Returntype":"void","Args":"bool set"},{"Uniquefunname":"void setDragable(bool dragable)","Funname":"setDragable","Returntype":"void","Args":"bool dragable"},{"Uniquefunname":"void setDrawBase(bool drawTheBase)","Funname":"setDrawBase","Returntype":"void","Args":"bool drawTheBase"},{"Uniquefunname":"void setElideMode(Qt::TextElideMode mode)","Funname":"setElideMode","Returntype":"void","Args":"Qt::TextElideMode mode"},{"Uniquefunname":"void setEnabledEmbedStyle(bool enable)","Funname":"setEnabledEmbedStyle","Returntype":"void","Args":"bool enable"},{"Uniquefunname":"void setExpanding(bool enabled)","Funname":"setExpanding","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setFlashColor(QColor flashColor)","Funname":"setFlashColor","Returntype":"void","Args":"QColor flashColor"},{"Uniquefunname":"void setIconSize(const QSize \u0026 size)","Funname":"setIconSize","Returntype":"void","Args":"const QSize \u0026 size"},{"Uniquefunname":"void setMaskColor(QColor maskColor)","Funname":"setMaskColor","Returntype":"void","Args":"QColor maskColor"},{"Uniquefunname":"void setMovable(bool movable)","Funname":"setMovable","Returntype":"void","Args":"bool movable"},{"Uniquefunname":"void setSelectionBehaviorOnRemove(QTabBar::SelectionBehavior behavior)","Funname":"setSelectionBehaviorOnRemove","Returntype":"void","Args":"QTabBar::SelectionBehavior behavior"},{"Uniquefunname":"void setShape(QTabBar::Shape shape)","Funname":"setShape","Returntype":"void","Args":"QTabBar::Shape shape"},{"Uniquefunname":"void setStartDragDistance(int startDragDistance)","Funname":"setStartDragDistance","Returntype":"void","Args":"int startDragDistance"},{"Uniquefunname":"void setTabButton(int index,QTabBar::ButtonPosition position,QWidget * widget)","Funname":"setTabButton","Returntype":"void","Args":"int index,QTabBar::ButtonPosition position,QWidget * widget"},{"Uniquefunname":"void setTabData(int index,const QVariant \u0026 data)","Funname":"setTabData","Returntype":"void","Args":"int index,const QVariant \u0026 data"},{"Uniquefunname":"void setTabEnabled(int index,bool)","Funname":"setTabEnabled","Returntype":"void","Args":"int index,bool"},{"Uniquefunname":"void setTabIcon(int index,const QIcon \u0026 icon)","Funname":"setTabIcon","Returntype":"void","Args":"int index,const QIcon \u0026 icon"},{"Uniquefunname":"void setTabLabelAlignment(Qt::Alignment alignment)","Funname":"setTabLabelAlignment","Returntype":"void","Args":"Qt::Alignment alignment"},{"Uniquefunname":"void setTabMaximumSize(int index,const QSize \u0026 size)","Funname":"setTabMaximumSize","Returntype":"void","Args":"int index,const QSize \u0026 size"},{"Uniquefunname":"void setTabMinimumSize(int index,const QSize \u0026 size)","Funname":"setTabMinimumSize","Returntype":"void","Args":"int index,const QSize \u0026 size"},{"Uniquefunname":"void setTabText(int index,const QString \u0026 text)","Funname":"setTabText","Returntype":"void","Args":"int index,const QString \u0026 text"},{"Uniquefunname":"void setTabToolTip(int index,const QString \u0026 tip)","Funname":"setTabToolTip","Returntype":"void","Args":"int index,const QString \u0026 tip"},{"Uniquefunname":"void setTabWhatsThis(int index,const QString \u0026 text)","Funname":"setTabWhatsThis","Returntype":"void","Args":"int index,const QString \u0026 text"},{"Uniquefunname":"void setTabsClosable(bool closable)","Funname":"setTabsClosable","Returntype":"void","Args":"bool closable"},{"Uniquefunname":"void setUsesScrollButtons(bool useButtons)","Funname":"setUsesScrollButtons","Returntype":"void","Args":"bool useButtons"},{"Uniquefunname":"void setVisibleAddButton(bool visibleAddButton)","Funname":"setVisibleAddButton","Returntype":"void","Args":"bool visibleAddButton"},{"Uniquefunname":"QTabBar shape()","Funname":"shape","Returntype":"QTabBar","Args":""},{"Uniquefunname":"void startDrag(int index)","Funname":"startDrag","Returntype":"void","Args":"int index"},{"Uniquefunname":"int startDragDistance()","Funname":"startDragDistance","Returntype":"int","Args":""},{"Uniquefunname":"void startTabFlash(int index)","Funname":"startTabFlash","Returntype":"void","Args":"int index"},{"Uniquefunname":"void stopDrag(Qt::DropAction action)","Funname":"stopDrag","Returntype":"void","Args":"Qt::DropAction action"},{"Uniquefunname":"void tabAddRequested()","Funname":"tabAddRequested","Returntype":"void","Args":""},{"Uniquefunname":"int tabAt(const QPoint \u0026 pos)","Funname":"tabAt","Returntype":"int","Args":"const QPoint \u0026 pos"},{"Uniquefunname":"void tabBarClicked(int index)","Funname":"tabBarClicked","Returntype":"void","Args":"int index"},{"Uniquefunname":"void tabBarDoubleClicked(int index)","Funname":"tabBarDoubleClicked","Returntype":"void","Args":"int index"},{"Uniquefunname":"QWidget * tabButton(int index,QTabBar::ButtonPosition position)","Funname":"tabButton","Returntype":"QWidget *","Args":"int index,QTabBar::ButtonPosition position"},{"Uniquefunname":"void tabCloseRequested(int index)","Funname":"tabCloseRequested","Returntype":"void","Args":"int index"},{"Uniquefunname":"QVariant tabData(int index)","Funname":"tabData","Returntype":"QVariant","Args":"int index"},{"Uniquefunname":"void tabDroped(int index,Qt::DropAction action,QObject * target)","Funname":"tabDroped","Returntype":"void","Args":"int index,Qt::DropAction action,QObject * target"},{"Uniquefunname":"QIcon tabIcon(int index)","Funname":"tabIcon","Returntype":"QIcon","Args":"int index"},{"Uniquefunname":"virtual void tabInserted(int index)","Funname":"tabInserted","Returntype":"virtual void","Args":"int index"},{"Uniquefunname":"void tabIsInserted(int index)","Funname":"tabIsInserted","Returntype":"void","Args":"int index"},{"Uniquefunname":"void tabIsRemoved(int index)","Funname":"tabIsRemoved","Returntype":"void","Args":"int index"},{"Uniquefunname":"virtual void tabLayoutChange()","Funname":"tabLayoutChange","Returntype":"virtual void","Args":""},{"Uniquefunname":"void tabMoved(int from,int to)","Funname":"tabMoved","Returntype":"void","Args":"int from,int to"},{"Uniquefunname":"QRect tabRect(int index)","Funname":"tabRect","Returntype":"QRect","Args":"int index"},{"Uniquefunname":"void tabReleaseRequested(int index)","Funname":"tabReleaseRequested","Returntype":"void","Args":"int index"},{"Uniquefunname":"virtual void tabRemoved(int index)","Funname":"tabRemoved","Returntype":"virtual void","Args":"int index"},{"Uniquefunname":"virtual QSize tabSizeHint(int index)","Funname":"tabSizeHint","Returntype":"virtual QSize","Args":"int index"},{"Uniquefunname":"QString tabText(int index)","Funname":"tabText","Returntype":"QString","Args":"int index"},{"Uniquefunname":"QString tabToolTip(int index)","Funname":"tabToolTip","Returntype":"QString","Args":"int index"},{"Uniquefunname":"QString tabWhatsThis(int index)","Funname":"tabWhatsThis","Returntype":"QString","Args":"int index"},{"Uniquefunname":"bool tabsClosable()","Funname":"tabsClosable","Returntype":"bool","Args":""},{"Uniquefunname":"bool usesScrollButtons()","Funname":"usesScrollButtons","Returntype":"bool","Args":""},{"Uniquefunname":"bool visibleAddButton()","Funname":"visibleAddButton","Returntype":"bool","Args":""}],"Records":[{"Name":"macro","Fields":["DTABBAR_H"]}]}
{"Filepath":"src/widgets/dtextedit.h","Functions":[{"Uniquefunname":"void contextMenuEvent(QContextMenuEvent * e)","Funname":"contextMenuEvent","Returntype":"void","Args":"QContextMenuEvent * e"},{"Uniquefunname":"protected event(QEvent * e)","Funname":"event","Returntype":"protected","Args":"QEvent * e"},{"Uniquefunname":"virtual void keyPressEvent(QKeyEvent * e)","Funname":"keyPressEvent","Returntype":"virtual void","Args":"QKeyEvent * e"},{"Uniquefunname":"void setSpeechToTextEnabled(bool enable)","Funname":"setSpeechToTextEnabled","Returntype":"void","Args":"bool enable"},{"Uniquefunname":"void setTextToSpeechEnabled(bool enable)","Funname":"setTextToSpeechEnabled","Returntype":"void","Args":"bool enable"},{"Uniquefunname":"void setTextToTranslateEnabled(bool enable)","Funname":"setTextToTranslateEnabled","Returntype":"void","Args":"bool enable"},{"Uniquefunname":"public speechToTextIsEnabled()","Funname":"speechToTextIsEnabled","Returntype":"public","Args":""},{"Uniquefunname":"bool textToSpeechIsEnabled()","Funname":"textToSpeechIsEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"bool textToTranslateIsEnabled()","Funname":"textToTranslateIsEnabled","Returntype":"bool","Args":""}],"Records":[{"Name":"macro","Fields":["DTEXTEDIT_H"]}]}
{"Filepath":"src/widgets/dthememanager.h","Functions":[{"Uniquefunname":"protected DThemeManager()","Funname":"DThemeManager","Returntype":"protected","Args":""},{"Uniquefunname":"bool eventFilter(QObject * watched,QEvent * event)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * watched,QEvent * event"},{"Uniquefunname":"QString getQssForWidget(const QWidget * widget)","Funname":"getQssForWidget","Returntype":"QString","Args":"const QWidget * widget"},{"Uniquefunname":"Q_OBJECT public instance()","Funname":"instance","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"void setTheme(QWidget * widget,const QString theme)","Funname":"setTheme","Returntype":"void","Args":"QWidget * widget,const QString theme"},{"Uniquefunname":"void setTheme(const QString theme)","Funname":"setTheme","Returntype":"void","Args":"const QString theme"},{"Uniquefunname":"QString theme()","Funname":"theme","Returntype":"QString","Args":""},{"Uniquefunname":"Q_SIGNALS themeChanged(QString theme)","Funname":"themeChanged","Returntype":"Q_SIGNALS","Args":"QString theme"},{"Uniquefunname":"public Q_SLOTS updateQss()","Funname":"updateQss","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"void updateThemeOnParentChanged(QWidget * widget)","Funname":"updateThemeOnParentChanged","Returntype":"void","Args":"QWidget * widget"},{"Uniquefunname":"void widgetThemeChanged(QWidget * widget,QString theme)","Funname":"widgetThemeChanged","Returntype":"void","Args":"QWidget * widget,QString theme"}],"Records":[{"Name":"macro","Fields":["DTHEMEMANAGER_H"]}]}
{"Filepath":"src/widgets/dtickeffect.h","Functions":[{"Uniquefunname":"protected draw(QPainter * painter)","Funname":"draw","Returntype":"protected","Args":"QPainter * painter"},{"Uniquefunname":"bool eventFilter(QObject * watched,QEvent * event)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * watched,QEvent * event"},{"Uniquefunname":"Q_SIGNALS finished()","Funname":"finished","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"void pause()","Funname":"pause","Returntype":"void","Args":""},{"Uniquefunname":"void play()","Funname":"play","Returntype":"void","Args":""},{"Uniquefunname":"void resume()","Funname":"resume","Returntype":"void","Args":""},{"Uniquefunname":"void setDirection(Direction direction)","Funname":"setDirection","Returntype":"void","Args":"Direction direction"},{"Uniquefunname":"void setFixedPixelMove(const int pixel)","Funname":"setFixedPixelMove","Returntype":"void","Args":"const int pixel"},{"Uniquefunname":"void stateChanged()","Funname":"stateChanged","Returntype":"void","Args":""},{"Uniquefunname":"void stop()","Funname":"stop","Returntype":"void","Args":""}],"Records":[{"Name":"enum:Direction","Fields":["BottomToTop","LeftToRight","RightToLeft","TopToBottom"]},{"Name":"macro","Fields":["DTICKEFFECT_H"]}]}
{"Filepath":"src/widgets/dtiplabel.h","Functions":[{"Uniquefunname":"    Q_DISABLE_COPY(DTipLabel)","Funname":"Q_DISABLE_COPY","Returntype":"Q_OBJECT","Args":"DTipLabel"},{"Uniquefunname":"protected initPainter(QPainter * painter)","Funname":"initPainter","Returntype":"protected","Args":"QPainter * painter"},{"Uniquefunname":"void paintEvent(QPaintEvent * event)","Funname":"paintEvent","Returntype":"void","Args":"QPaintEvent * event"},{"Uniquefunname":"void setForegroundRole(DPalette::ColorType color)","Funname":"setForegroundRole","Returntype":"void","Args":"DPalette::ColorType color"},{"Uniquefunname":"void show(const QPoint \u0026 pos)","Funname":"show","Returntype":"void","Args":"const QPoint \u0026 pos"},{"Uniquefunname":" ~DTipLabel()","Funname":"~DTipLabel","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DTIPLABEL_H"]}]}
{"Filepath":"src/widgets/dtitlebar.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(bool blurBackground READ blurBackground WRITE setBlurBackground)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"bool blurBackground READ blurBackground WRITE setBlurBackground"},{"Uniquefunname":"bool autoHideOnFullscreen()","Funname":"autoHideOnFullscreen","Returntype":"bool","Args":""},{"Uniquefunname":"bool blurBackground()","Funname":"blurBackground","Returntype":"bool","Args":""},{"Uniquefunname":"int buttonAreaWidth()","Funname":"buttonAreaWidth","Returntype":"int","Args":""},{"Uniquefunname":"QWidget * customWidget()","Funname":"customWidget","Returntype":"QWidget *","Args":""},{"Uniquefunname":"Qt disableFlags()","Funname":"disableFlags","Returntype":"Qt","Args":""},{"Uniquefunname":"void doubleClicked()","Funname":"doubleClicked","Returntype":"void","Args":""},{"Uniquefunname":"bool event(QEvent * e)","Funname":"event","Returntype":"bool","Args":"QEvent * e"},{"Uniquefunname":"protected eventFilter(QObject * obj,QEvent * event)","Funname":"eventFilter","Returntype":"protected","Args":"QObject * obj,QEvent * event"},{"Uniquefunname":"QMenu * menu()","Funname":"menu","Returntype":"QMenu *","Args":""},{"Uniquefunname":"bool menuIsDisabled()","Funname":"menuIsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"bool menuIsVisible()","Funname":"menuIsVisible","Returntype":"bool","Args":""},{"Uniquefunname":"QSize minimumSizeHint()","Funname":"minimumSizeHint","Returntype":"QSize","Args":""},{"Uniquefunname":"void mouseDoubleClickEvent(QMouseEvent * event)","Funname":"mouseDoubleClickEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"void mouseMoveEvent(QMouseEvent * event)","Funname":"mouseMoveEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"void mouseMoving(Qt::MouseButton button)","Funname":"mouseMoving","Returntype":"void","Args":"Qt::MouseButton button"},{"Uniquefunname":"void mousePosMoving(Qt::MouseButton button,QPoint pos)","Funname":"mousePosMoving","Returntype":"void","Args":"Qt::MouseButton button,QPoint pos"},{"Uniquefunname":"void mousePosPressed(Qt::MouseButtons buttons,QPoint pos)","Funname":"mousePosPressed","Returntype":"void","Args":"Qt::MouseButtons buttons,QPoint pos"},{"Uniquefunname":"void mousePressEvent(QMouseEvent * event)","Funname":"mousePressEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"void mousePressed(Qt::MouseButtons buttons)","Funname":"mousePressed","Returntype":"void","Args":"Qt::MouseButtons buttons"},{"Uniquefunname":"void mouseReleaseEvent(QMouseEvent * event)","Funname":"mouseReleaseEvent","Returntype":"void","Args":"QMouseEvent * event"},{"Uniquefunname":"Q_SIGNALS optionClicked()","Funname":"optionClicked","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"bool quitMenuIsDisabled()","Funname":"quitMenuIsDisabled","Returntype":"bool","Args":""},{"Uniquefunname":"void removeWidget(QWidget * w)","Funname":"removeWidget","Returntype":"void","Args":"QWidget * w"},{"Uniquefunname":"void resizeEvent(QResizeEvent * event)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * event"},{"Uniquefunname":"bool separatorVisible()","Funname":"separatorVisible","Returntype":"bool","Args":""},{"Uniquefunname":"void setAutoHideOnFullscreen(bool autohide)","Funname":"setAutoHideOnFullscreen","Returntype":"void","Args":"bool autohide"},{"Uniquefunname":"void setBackgroundTransparent(bool transparent)","Funname":"setBackgroundTransparent","Returntype":"void","Args":"bool transparent"},{"Uniquefunname":"void setBlurBackground(bool blurBackground)","Funname":"setBlurBackground","Returntype":"void","Args":"bool blurBackground"},{"Uniquefunname":"void setDisableFlags(Qt::WindowFlags flags)","Funname":"setDisableFlags","Returntype":"void","Args":"Qt::WindowFlags flags"},{"Uniquefunname":"void setEmbedMode(bool embed)","Funname":"setEmbedMode","Returntype":"void","Args":"bool embed"},{"Uniquefunname":"public Q_SLOTS setFixedHeight(int h)","Funname":"setFixedHeight","Returntype":"public Q_SLOTS","Args":"int h"},{"Uniquefunname":"void setFullScreenButtonVisible(bool enabled)","Funname":"setFullScreenButtonVisible","Returntype":"void","Args":"bool enabled"},{"Uniquefunname":"void setIcon(const QIcon \u0026 icon)","Funname":"setIcon","Returntype":"void","Args":"const QIcon \u0026 icon"},{"Uniquefunname":"void setMenu(QMenu * menu)","Funname":"setMenu","Returntype":"void","Args":"QMenu * menu"},{"Uniquefunname":"void setMenuDisabled(bool disabled)","Funname":"setMenuDisabled","Returntype":"void","Args":"bool disabled"},{"Uniquefunname":"void setMenuVisible(bool visible)","Funname":"setMenuVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setQuitMenuDisabled(bool disabled)","Funname":"setQuitMenuDisabled","Returntype":"void","Args":"bool disabled"},{"Uniquefunname":"void setQuitMenuVisible(bool visible)","Funname":"setQuitMenuVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setSeparatorVisible(bool visible)","Funname":"setSeparatorVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setSwitchThemeMenuVisible(bool visible)","Funname":"setSwitchThemeMenuVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setTitle(const QString \u0026 title)","Funname":"setTitle","Returntype":"void","Args":"const QString \u0026 title"},{"Uniquefunname":"void setVisible(bool visible)","Funname":"setVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void showEvent(QShowEvent * event)","Funname":"showEvent","Returntype":"void","Args":"QShowEvent * event"},{"Uniquefunname":"private Q_SLOTS showMenu()","Funname":"showMenu","Returntype":"private Q_SLOTS","Args":""},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""},{"Uniquefunname":"bool switchThemeMenuIsVisible()","Funname":"switchThemeMenuIsVisible","Returntype":"bool","Args":""},{"Uniquefunname":"void toggleWindowState()","Funname":"toggleWindowState","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DTITLEBAR_H"]}]}
{"Filepath":"src/widgets/dtoast.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(qreal opacity READ opacity WRITE setOpacity)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"qreal opacity READ opacity WRITE setOpacity"},{"Uniquefunname":"int duration()","Funname":"duration","Returntype":"int","Args":""},{"Uniquefunname":"void hideEvent(QHideEvent * event)","Funname":"hideEvent","Returntype":"void","Args":"QHideEvent * event"},{"Uniquefunname":"QIcon icon()","Funname":"icon","Returntype":"QIcon","Args":""},{"Uniquefunname":"private opacity()","Funname":"opacity","Returntype":"private","Args":""},{"Uniquefunname":"void pack()","Funname":"pack","Returntype":"void","Args":""},{"Uniquefunname":"public Q_SLOTS pop()","Funname":"pop","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"void setDuration(int duration)","Funname":"setDuration","Returntype":"void","Args":"int duration"},{"Uniquefunname":"void setIcon(QString icon)","Funname":"setIcon","Returntype":"void","Args":"QString icon"},{"Uniquefunname":"void setOpacity(qreal)","Funname":"setOpacity","Returntype":"void","Args":"qreal"},{"Uniquefunname":"void setText(QString text)","Funname":"setText","Returntype":"void","Args":"QString text"},{"Uniquefunname":"void showEvent(QShowEvent * event)","Funname":"showEvent","Returntype":"void","Args":"QShowEvent * event"},{"Uniquefunname":"QString text()","Funname":"text","Returntype":"QString","Args":""},{"Uniquefunname":"Q_SIGNALS visibleChanged(bool isVisible)","Funname":"visibleChanged","Returntype":"Q_SIGNALS","Args":"bool isVisible"},{"Uniquefunname":" ~DToast()","Funname":"~DToast","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/widgets/dtoolbutton.h","Functions":[{"Uniquefunname":"void initStyleOption(QStyleOptionToolButton * option)","Funname":"initStyleOption","Returntype":"void","Args":"QStyleOptionToolButton * option"},{"Uniquefunname":"protected paintEvent(QPaintEvent * event)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent * event"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DTOOLBUTTON_H"]}]}
{"Filepath":"src/widgets/dtooltip.h","Functions":[{"Uniquefunname":"void show(const QPoint \u0026 pos,int duration)","Funname":"show","Returntype":"void","Args":"const QPoint \u0026 pos,int duration"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DTOOLTIP_H"]}]}
{"Filepath":"src/widgets/dvideowidget.h","Functions":[{"Uniquefunname":"Q_OBJECT Q_PROPERTY(bool mirroredHorizontal READ mirroredHorizontal WRITE setMirroredHorizontal NOTIFY mirroredHorizontalChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"bool mirroredHorizontal READ mirroredHorizontal WRITE setMirroredHorizontal NOTIFY mirroredHorizontalChanged"},{"Uniquefunname":"Qt aspectRatioMode()","Funname":"aspectRatioMode","Returntype":"Qt","Args":""},{"Uniquefunname":"int brightness()","Funname":"brightness","Returntype":"int","Args":""},{"Uniquefunname":"void brightnessChanged(int brightness)","Funname":"brightnessChanged","Returntype":"void","Args":"int brightness"},{"Uniquefunname":"QPixmap capture()","Funname":"capture","Returntype":"QPixmap","Args":""},{"Uniquefunname":"int contrast()","Funname":"contrast","Returntype":"int","Args":""},{"Uniquefunname":"void contrastChanged(int contrast)","Funname":"contrastChanged","Returntype":"void","Args":"int contrast"},{"Uniquefunname":"const QVideoFrame * currentFrame()","Funname":"currentFrame","Returntype":"const QVideoFrame *","Args":""},{"Uniquefunname":"int hue()","Funname":"hue","Returntype":"int","Args":""},{"Uniquefunname":"void hueChanged(int hue)","Funname":"hueChanged","Returntype":"void","Args":"int hue"},{"Uniquefunname":"bool mirroredHorizontal()","Funname":"mirroredHorizontal","Returntype":"bool","Args":""},{"Uniquefunname":"Q_SIGNALS mirroredHorizontalChanged(bool mirroredHorizontal)","Funname":"mirroredHorizontalChanged","Returntype":"Q_SIGNALS","Args":"bool mirroredHorizontal"},{"Uniquefunname":"bool mirroredVertical()","Funname":"mirroredVertical","Returntype":"bool","Args":""},{"Uniquefunname":"void mirroredVerticalChanged(bool mirroredVertical)","Funname":"mirroredVerticalChanged","Returntype":"void","Args":"bool mirroredVertical"},{"Uniquefunname":"void paint(const QVideoFrame \u0026 frame)","Funname":"paint","Returntype":"void","Args":"const QVideoFrame \u0026 frame"},{"Uniquefunname":"protected paintEvent(QPaintEvent * event)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent * event"},{"Uniquefunname":"bool round()","Funname":"round","Returntype":"bool","Args":""},{"Uniquefunname":"void roundChanged(bool round)","Funname":"roundChanged","Returntype":"void","Args":"bool round"},{"Uniquefunname":"int saturation()","Funname":"saturation","Returntype":"int","Args":""},{"Uniquefunname":"void saturationChanged(int saturation)","Funname":"saturationChanged","Returntype":"void","Args":"int saturation"},{"Uniquefunname":"qreal scale()","Funname":"scale","Returntype":"qreal","Args":""},{"Uniquefunname":"void scaleChanged(qreal scale)","Funname":"scaleChanged","Returntype":"void","Args":"qreal scale"},{"Uniquefunname":"void setAspectRatioMode(Qt::AspectRatioMode mode)","Funname":"setAspectRatioMode","Returntype":"void","Args":"Qt::AspectRatioMode mode"},{"Uniquefunname":"void setBrightness(int brightness)","Funname":"setBrightness","Returntype":"void","Args":"int brightness"},{"Uniquefunname":"void setContrast(int contrast)","Funname":"setContrast","Returntype":"void","Args":"int contrast"},{"Uniquefunname":"void setHue(int hue)","Funname":"setHue","Returntype":"void","Args":"int hue"},{"Uniquefunname":"void setMirroredHorizontal(bool mirroredHorizontal)","Funname":"setMirroredHorizontal","Returntype":"void","Args":"bool mirroredHorizontal"},{"Uniquefunname":"void setMirroredVertical(bool mirroredVertical)","Funname":"setMirroredVertical","Returntype":"void","Args":"bool mirroredVertical"},{"Uniquefunname":"void setRound(bool round)","Funname":"setRound","Returntype":"void","Args":"bool round"},{"Uniquefunname":"void setSaturation(int saturation)","Funname":"setSaturation","Returntype":"void","Args":"int saturation"},{"Uniquefunname":"void setScale(qreal scale)","Funname":"setScale","Returntype":"void","Args":"qreal scale"},{"Uniquefunname":"public Q_SLOTS setSource(QCamera * source)","Funname":"setSource","Returntype":"public Q_SLOTS","Args":"QCamera * source"},{"Uniquefunname":"void setSource(QMediaPlayer * source)","Funname":"setSource","Returntype":"void","Args":"QMediaPlayer * source"},{"Uniquefunname":"void setSourceVideoPixelRatio(const qreal ratio)","Funname":"setSourceVideoPixelRatio","Returntype":"void","Args":"const qreal ratio"},{"Uniquefunname":"qreal sourceVideoPixelRatio()","Funname":"sourceVideoPixelRatio","Returntype":"qreal","Args":""}],"Records":[{"Name":"macro","Fields":["DVIDEOWIDGET_H"]}]}
{"Filepath":"src/widgets/dwarningbutton.h","Functions":[{"Uniquefunname":"protected initStyleOption(QStyleOptionButton * option)","Funname":"initStyleOption","Returntype":"protected","Args":"QStyleOptionButton * option"},{"Uniquefunname":"void paintEvent(QPaintEvent * e)","Funname":"paintEvent","Returntype":"void","Args":"QPaintEvent * e"}],"Records":[{"Name":"macro","Fields":["DWARNINGBUTTON_H"]}]}
{"Filepath":"src/widgets/dwaterprogress.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(int value READ value WRITE setValue NOTIFY valueChanged)","Funname":"Q_PROPERTY","Returntype":"Q_OBJECT","Args":"int value READ value WRITE setValue NOTIFY valueChanged"},{"Uniquefunname":"void changeEvent(QEvent * e)","Funname":"changeEvent","Returntype":"void","Args":"QEvent * e"},{"Uniquefunname":"protected paintEvent(QPaintEvent *)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent *"},{"Uniquefunname":"void setTextVisible(bool visible)","Funname":"setTextVisible","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void setValue(int value)","Funname":"setValue","Returntype":"void","Args":"int value"},{"Uniquefunname":"public Q_SLOTS start()","Funname":"start","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"void stop()","Funname":"stop","Returntype":"void","Args":""},{"Uniquefunname":"int value()","Funname":"value","Returntype":"int","Args":""},{"Uniquefunname":"Q_SIGNALS valueChanged()","Funname":"valueChanged","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":" ~DWaterProgress()","Funname":"~DWaterProgress","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DWATERPROGRESS_H"]}]}
{"Filepath":"src/widgets/dwidgetstype.h","Functions":null,"Records":[{"Name":"macro","Fields":["DWIDGETSTYPE_H"]}]}
{"Filepath":"src/widgets/dwindowclosebutton.h","Functions":[{"Uniquefunname":"protected initStyleOption(DStyleOptionButton * option)","Funname":"initStyleOption","Returntype":"protected","Args":"DStyleOptionButton * option"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DWINDOWCLOSEBUTTON_H"]}]}
{"Filepath":"src/widgets/dwindowmaxbutton.h","Functions":[{"Uniquefunname":"    Q_PROPERTY(bool isMaximized READ isMaximized WRITE setMaximized NOTIFY maximizedChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"bool isMaximized READ isMaximized WRITE setMaximized NOTIFY maximizedChanged"},{"Uniquefunname":"protected initStyleOption(DStyleOptionButton * option)","Funname":"initStyleOption","Returntype":"protected","Args":"DStyleOptionButton * option"},{"Uniquefunname":"Q_SIGNALS maximizedChanged(bool isMaximized)","Funname":"maximizedChanged","Returntype":"Q_SIGNALS","Args":"bool isMaximized"},{"Uniquefunname":"public Q_SLOTS setMaximized(bool isMaximized)","Funname":"setMaximized","Returntype":"public Q_SLOTS","Args":"bool isMaximized"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DWINDOWMAXBUTTON_H"]}]}
{"Filepath":"src/widgets/dwindowminbutton.h","Functions":[{"Uniquefunname":"protected initStyleOption(DStyleOptionButton * option)","Funname":"initStyleOption","Returntype":"protected","Args":"DStyleOptionButton * option"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DWINDOWMINBUTTON_H"]}]}
{"Filepath":"src/widgets/dwindowoptionbutton.h","Functions":[{"Uniquefunname":"protected initStyleOption(DStyleOptionButton * option)","Funname":"initStyleOption","Returntype":"protected","Args":"DStyleOptionButton * option"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DWINDOWOPTIONBUTTON_H"]}]}
{"Filepath":"src/widgets/dwindowquitfullbutton.h","Functions":[{"Uniquefunname":"protected initStyleOption(DStyleOptionButton * option)","Funname":"initStyleOption","Returntype":"protected","Args":"DStyleOptionButton * option"},{"Uniquefunname":"QSize sizeHint()","Funname":"sizeHint","Returntype":"QSize","Args":""}],"Records":[{"Name":"macro","Fields":["DWINDOWQUITFULLBUTTON_H"]}]}
{"Filepath":"src/widgets/private/daboutdialog_p.h","Functions":[{"Uniquefunname":"public DAboutDialogPrivate(DAboutDialog * qq)","Funname":"DAboutDialogPrivate","Returntype":"public","Args":"DAboutDialog * qq"},{"Uniquefunname":"void _q_onLinkActivated(const QString \u0026 link)","Funname":"_q_onLinkActivated","Returntype":"void","Args":"const QString \u0026 link"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void loadDistributionInfo()","Funname":"loadDistributionInfo","Returntype":"void","Args":""},{"Uniquefunname":"QPixmap loadPixmap(const QString \u0026 file)","Funname":"loadPixmap","Returntype":"QPixmap","Args":"const QString \u0026 file"},{"Uniquefunname":"void updateAcknowledgementLabel()","Funname":"updateAcknowledgementLabel","Returntype":"void","Args":""},{"Uniquefunname":"void updateWebsiteLabel()","Funname":"updateWebsiteLabel","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DABOUTDIALOG_P_H"]}]}
{"Filepath":"src/widgets/private/dabstractdialogprivate_p.h","Functions":[{"Uniquefunname":"protected DAbstractDialogPrivate(DAbstractDialog * qq)","Funname":"DAbstractDialogPrivate","Returntype":"protected","Args":"DAbstractDialog * qq"},{"Uniquefunname":"QRect getParentGeometry()","Funname":"getParentGeometry","Returntype":"QRect","Args":""},{"Uniquefunname":"private init(bool blurIfPossible)","Funname":"init","Returntype":"private","Args":"bool blurIfPossible"}],"Records":[{"Name":"macro","Fields":["DABSTRACTDIALOG_P_H"]}]}
{"Filepath":"src/widgets/private/dalertcontrol_p.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PUBLIC(DAlertControl)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"DAlertControl"},{"Uniquefunname":"void updateTooltipPos()","Funname":"updateTooltipPos","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DALERTCONTROL_P_H"]}]}
{"Filepath":"src/widgets/private/dapplication_p.h","Functions":[{"Uniquefunname":"    D_DECLARE_PUBLIC(DApplication)","Funname":"D_DECLARE_PUBLIC","Returntype":"","Args":"DApplication"},{"Uniquefunname":"void _q_onNewInstanceStarted()","Funname":"_q_onNewInstanceStarted","Returntype":"void","Args":""},{"Uniquefunname":"bool isUserManualExists()","Funname":"isUserManualExists","Returntype":"bool","Args":""},{"Uniquefunname":"bool loadDtkTranslator(QList\u003cQLocale\u003e localeFallback)","Funname":"loadDtkTranslator","Returntype":"bool","Args":"QList\u003cQLocale\u003e localeFallback"},{"Uniquefunname":"bool loadTranslator(QList\u003cDPathBuf\u003e translateDirs,const QString \u0026 name,QList\u003cQLocale\u003e localeFallback)","Funname":"loadTranslator","Returntype":"bool","Args":"QList\u003cDPathBuf\u003e translateDirs,const QString \u0026 name,QList\u003cQLocale\u003e localeFallback"},{"Uniquefunname":"bool setSingleInstanceByDbus(const QString \u0026 key)","Funname":"setSingleInstanceByDbus","Returntype":"bool","Args":"const QString \u0026 key"},{"Uniquefunname":"bool setSingleInstanceBySemaphore(const QString \u0026 key)","Funname":"setSingleInstanceBySemaphore","Returntype":"bool","Args":"const QString \u0026 key"},{"Uniquefunname":"D_DECL_DEPRECATED void setTheme(const QString \u0026 theme)","Funname":"setTheme","Returntype":"D_DECL_DEPRECATED void","Args":"const QString \u0026 theme"},{"Uniquefunname":"D_DECL_DEPRECATED QString theme()","Funname":"theme","Returntype":"D_DECL_DEPRECATED QString","Args":""},{"Uniquefunname":" ~DApplicationPrivate()","Funname":"~DApplicationPrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DAPPLICATION_P_H"]}]}
{"Filepath":"src/widgets/private/darrowrectangle_p.h","Functions":[{"Uniquefunname":"    D_DECLARE_PUBLIC(DArrowRectangle)","Funname":"D_DECLARE_PUBLIC","Returntype":"","Args":"DArrowRectangle"},{"Uniquefunname":"const QRect currentScreenRect(const int x,const int y)","Funname":"currentScreenRect","Returntype":"const QRect","Args":"const int x,const int y"},{"Uniquefunname":"QPainterPath getBottomCornerPath()","Funname":"getBottomCornerPath","Returntype":"QPainterPath","Args":""},{"Uniquefunname":"QPainterPath getLeftCornerPath()","Funname":"getLeftCornerPath","Returntype":"QPainterPath","Args":""},{"Uniquefunname":"QPainterPath getRightCornerPath()","Funname":"getRightCornerPath","Returntype":"QPainterPath","Args":""},{"Uniquefunname":"QPainterPath getTopCornerPath()","Funname":"getTopCornerPath","Returntype":"QPainterPath","Args":""},{"Uniquefunname":"void horizontalMove(int x,int y)","Funname":"horizontalMove","Returntype":"void","Args":"int x,int y"},{"Uniquefunname":"void init(DArrowRectangle::FloatMode floatMode)","Funname":"init","Returntype":"void","Args":"DArrowRectangle::FloatMode floatMode"},{"Uniquefunname":"void paintEvent(QPaintEvent * e)","Funname":"paintEvent","Returntype":"void","Args":"QPaintEvent * e"},{"Uniquefunname":"bool radiusEnabled()","Funname":"radiusEnabled","Returntype":"bool","Args":""},{"Uniquefunname":"void resizeEvent(QResizeEvent * e)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * e"},{"Uniquefunname":"void resizeWithContent()","Funname":"resizeWithContent","Returntype":"void","Args":""},{"Uniquefunname":"void setContent(QWidget * content)","Funname":"setContent","Returntype":"void","Args":"QWidget * content"},{"Uniquefunname":"virtual void show(int x,int y)","Funname":"show","Returntype":"virtual void","Args":"int x,int y"},{"Uniquefunname":"void updateClipPath()","Funname":"updateClipPath","Returntype":"void","Args":""},{"Uniquefunname":"void verticalMove(int x,int y)","Funname":"verticalMove","Returntype":"void","Args":"int x,int y"}],"Records":[{"Name":"macro","Fields":["DARROWRECTANGLE_P_H"]}]}
{"Filepath":"src/widgets/private/dblureffectwidget_p.h","Functions":[{"Uniquefunname":"public DBlurEffectWidgetPrivate(DBlurEffectWidget * qq)","Funname":"DBlurEffectWidgetPrivate","Returntype":"public","Args":"DBlurEffectWidget * qq"},{"Uniquefunname":"void addToBlurEffectWidgetHash()","Funname":"addToBlurEffectWidgetHash","Returntype":"void","Args":""},{"Uniquefunname":"QColor getMaskColor(const QColor \u0026 baseColor)","Funname":"getMaskColor","Returntype":"QColor","Args":"const QColor \u0026 baseColor"},{"Uniquefunname":"quint8 getMaskColorAlpha()","Funname":"getMaskColorAlpha","Returntype":"quint8","Args":""},{"Uniquefunname":"bool isBehindWindowBlendMode()","Funname":"isBehindWindowBlendMode","Returntype":"bool","Args":""},{"Uniquefunname":"bool isFull()","Funname":"isFull","Returntype":"bool","Args":""},{"Uniquefunname":"void removeFromBlurEffectWidgetHash()","Funname":"removeFromBlurEffectWidgetHash","Returntype":"void","Args":""},{"Uniquefunname":"void resetSourceImage()","Funname":"resetSourceImage","Returntype":"void","Args":""},{"Uniquefunname":"void setMaskAlpha(const quint8 alpha)","Funname":"setMaskAlpha","Returntype":"void","Args":"const quint8 alpha"},{"Uniquefunname":"void setMaskColor(const QColor \u0026 color)","Funname":"setMaskColor","Returntype":"void","Args":"const QColor \u0026 color"},{"Uniquefunname":"bool updateWindowBlurArea()","Funname":"updateWindowBlurArea","Returntype":"bool","Args":""},{"Uniquefunname":"bool updateWindowBlurArea(QWidget * topLevelWidget)","Funname":"updateWindowBlurArea","Returntype":"bool","Args":"QWidget * topLevelWidget"}],"Records":[{"Name":"macro","Fields":["DBLUREFFECTWIDGET_P_H"]}]}
{"Filepath":"src/widgets/private/dboxwidget_p.h","Functions":[{"Uniquefunname":" DBoxWidgetPrivate(DBoxWidget * qq)","Funname":"DBoxWidgetPrivate","Returntype":"","Args":"DBoxWidget * qq"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DBOXWIDGET_P_H"]}]}
{"Filepath":"src/widgets/private/dbuttonbox_p.h","Functions":[{"Uniquefunname":"public DButtonBoxPrivate(DButtonBox * qq)","Funname":"DButtonBoxPrivate","Returntype":"public","Args":"DButtonBox * qq"},{"Uniquefunname":"DStyleOptionButtonBoxButton getButtonPosition(const DButtonBoxButton * button)","Funname":"getButtonPosition","Returntype":"DStyleOptionButtonBoxButton","Args":"const DButtonBoxButton * button"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DBUTTONBOX_P_H"]}]}
{"Filepath":"src/widgets/private/dcircleprogress_p.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PUBLIC(DCircleProgress)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"DCircleProgress"},{"Uniquefunname":"private paint(QPainter * painter)","Funname":"paint","Returntype":"private","Args":"QPainter * painter"}],"Records":[{"Name":"macro","Fields":["DCIRCLEPROGRESS_P_H"]}]}
{"Filepath":"src/widgets/private/ddialog_p.h","Functions":[{"Uniquefunname":"protected DDialogPrivate(DDialog * qq)","Funname":"DDialogPrivate","Returntype":"protected","Args":"DDialog * qq"},{"Uniquefunname":"void _q_defaultButtonTriggered()","Funname":"_q_defaultButtonTriggered","Returntype":"void","Args":""},{"Uniquefunname":"void _q_onButtonClicked()","Funname":"_q_onButtonClicked","Returntype":"void","Args":""},{"Uniquefunname":"QString elideString(QString str,const QFontMetrics \u0026 fm,int width)","Funname":"elideString","Returntype":"QString","Args":"QString str,const QFontMetrics \u0026 fm,int width"},{"Uniquefunname":"QBoxLayout * getContentLayout()","Funname":"getContentLayout","Returntype":"QBoxLayout *","Args":""},{"Uniquefunname":"const QScreen * getScreen()","Funname":"getScreen","Returntype":"const QScreen *","Args":""},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"QMap\u003cint,QString\u003e scanTags(const QString origin)","Funname":"scanTags","Returntype":"QMap\u003cint,QString\u003e","Args":"const QString origin"},{"Uniquefunname":"void setSpacer(int height)","Funname":"setSpacer","Returntype":"void","Args":"int height"},{"Uniquefunname":"QString trimTag(QString origin)","Funname":"trimTag","Returntype":"QString","Args":"QString origin"},{"Uniquefunname":"void updateSize()","Funname":"updateSize","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DDIALOG_P_H"]}]}
{"Filepath":"src/widgets/private/ddrawer_p.h","Functions":[{"Uniquefunname":"public DDrawerPrivate(DDrawer * qq)","Funname":"DDrawerPrivate","Returntype":"public","Args":"DDrawer * qq"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":" ~DDrawerPrivate()","Funname":"~DDrawerPrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DDRAWER_P_H"]}]}
{"Filepath":"src/widgets/private/dfilechooseredit_p.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PUBLIC(DFileChooserEdit)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"DFileChooserEdit"},{"Uniquefunname":"public _q_showFileChooserDialog()","Funname":"_q_showFileChooserDialog","Returntype":"public","Args":""},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DFILECHOOSEREDIT_P_H"]}]}
{"Filepath":"src/widgets/private/dfloatingmessage_p.h","Functions":[{"Uniquefunname":"public DFloatingMessagePrivate(DFloatingMessage * qq)","Funname":"DFloatingMessagePrivate","Returntype":"public","Args":"DFloatingMessage * qq"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":" ~DFloatingMessagePrivate()","Funname":"~DFloatingMessagePrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DFLOATINGMESSAGE_P_H"]}]}
{"Filepath":"src/widgets/private/dfloatingwidget_p.h","Functions":[{"Uniquefunname":"public DFloatingWidgetPrivate(DFloatingWidget * qq)","Funname":"DFloatingWidgetPrivate","Returntype":"public","Args":"DFloatingWidget * qq"},{"Uniquefunname":"void adjustPalette()","Funname":"adjustPalette","Returntype":"void","Args":""},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":" ~DFloatingWidgetPrivate()","Funname":"~DFloatingWidgetPrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DFLOATINGWIDGET_P_H"]}]}
{"Filepath":"src/widgets/private/dflowlayout_p.h","Functions":[{"Uniquefunname":" DFlowLayoutPrivate(DFlowLayout * qq)","Funname":"DFlowLayoutPrivate","Returntype":"","Args":"DFlowLayout * qq"},{"Uniquefunname":"QSize doLayout(const QRect \u0026 rect,bool testOnly)","Funname":"doLayout","Returntype":"QSize","Args":"const QRect \u0026 rect,bool testOnly"}],"Records":[{"Name":"macro","Fields":["DFLOWLAYOUT_P_H"]}]}
{"Filepath":"src/widgets/private/dframe_p.h","Functions":[{"Uniquefunname":"public DFramePrivate(DFrame * qq)","Funname":"DFramePrivate","Returntype":"public","Args":"DFrame * qq"}],"Records":[{"Name":"macro","Fields":["DFRAME_P_H"]}]}
{"Filepath":"src/widgets/private/diconbutton_p.h","Functions":[{"Uniquefunname":"public DIconButtonPrivate(DIconButton * qq)","Funname":"DIconButtonPrivate","Returntype":"public","Args":"DIconButton * qq"}],"Records":[{"Name":"macro","Fields":["DICONBUTTON_P_H"]}]}
{"Filepath":"src/widgets/private/dimagebutton_p.h","Functions":[{"Uniquefunname":"public DImageButtonPrivate(DImageButton * qq)","Funname":"DImageButtonPrivate","Returntype":"public","Args":"DImageButton * qq"},{"Uniquefunname":"QPixmap loadPixmap(const QString \u0026 path)","Funname":"loadPixmap","Returntype":"QPixmap","Args":"const QString \u0026 path"},{"Uniquefunname":"void setState(DImageButton::State state)","Funname":"setState","Returntype":"void","Args":"DImageButton::State state"},{"Uniquefunname":"void updateIcon()","Funname":"updateIcon","Returntype":"void","Args":""},{"Uniquefunname":" ~DImageButtonPrivate()","Funname":"~DImageButtonPrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DIMAGEBUTTON_P_H"]}]}
{"Filepath":"src/widgets/private/dinputdialog_p.h","Functions":[{"Uniquefunname":" DInputDialogPrivate(DInputDialog * qq)","Funname":"DInputDialogPrivate","Returntype":"","Args":"DInputDialog * qq"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DINPUTDIALOG_P_H"]}]}
{"Filepath":"src/widgets/private/dipv4lineedit_p.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PUBLIC(DIpv4LineEdit)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"DIpv4LineEdit"},{"Uniquefunname":"void _q_setIpLineEditText(const QString \u0026 text)","Funname":"_q_setIpLineEditText","Returntype":"void","Args":"const QString \u0026 text"},{"Uniquefunname":"void _q_updateLineEditText()","Funname":"_q_updateLineEditText","Returntype":"void","Args":""},{"Uniquefunname":"QLineEdit * getEdit()","Funname":"getEdit","Returntype":"QLineEdit *","Args":""},{"Uniquefunname":"QLabel * getLabel()","Funname":"getLabel","Returntype":"QLabel *","Args":""},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void setFocus(bool focus)","Funname":"setFocus","Returntype":"void","Args":"bool focus"}],"Records":[{"Name":"macro","Fields":["DIPV4LINEEDIT_P_H"]}]}
{"Filepath":"src/widgets/private/dkeysequenceedit_p.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PUBLIC(DKeySequenceEdit)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"DKeySequenceEdit"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"QString replaceWriting(QString writing)","Funname":"replaceWriting","Returntype":"QString","Args":"QString writing"}],"Records":[{"Name":"macro","Fields":["DKEYSEQUENCEEDIT_P_H"]}]}
{"Filepath":"src/widgets/private/dlabel_p.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PUBLIC(DLabel)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"DLabel"},{"Uniquefunname":"QRectF documentRect(QLabelPrivate * d)","Funname":"documentRect","Returntype":"QRectF","Args":"QLabelPrivate * d"},{"Uniquefunname":"void ensureTextLayouted(QLabelPrivate * d)","Funname":"ensureTextLayouted","Returntype":"void","Args":"QLabelPrivate * d"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"QRectF layoutRect(QLabelPrivate * d)","Funname":"layoutRect","Returntype":"QRectF","Args":"QLabelPrivate * d"},{"Uniquefunname":"Qt textDirection(QLabelPrivate * d)","Funname":"textDirection","Returntype":"Qt","Args":"QLabelPrivate * d"}],"Records":[{"Name":"macro","Fields":["DLABEL_P_H"]}]}
{"Filepath":"src/widgets/private/dlineedit_p.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PUBLIC(DLineEdit)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"DLineEdit"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void updateTooltipPos()","Funname":"updateTooltipPos","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DLINEEDIT_P_H"]}]}
{"Filepath":"src/widgets/private/dlistview_p.h","Functions":[{"Uniquefunname":" DListViewPrivate(DListView * qq)","Funname":"DListViewPrivate","Returntype":"","Args":"DListView * qq"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void onOrientationChanged()","Funname":"onOrientationChanged","Returntype":"void","Args":""},{"Uniquefunname":" ~DListViewPrivate()","Funname":"~DListViewPrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DLISTVIEW_P_H"]}]}
{"Filepath":"src/widgets/private/dloadingindicator_p.h","Functions":[{"Uniquefunname":" DLoadingIndicatorPrivate(DLoadingIndicator * qq)","Funname":"DLoadingIndicatorPrivate","Returntype":"","Args":"DLoadingIndicator * qq"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void setLoadingItem(QGraphicsItem * item)","Funname":"setLoadingItem","Returntype":"void","Args":"QGraphicsItem * item"}],"Records":[{"Name":"macro","Fields":["DLOADINGINDICATOR_P"]}]}
{"Filepath":"src/widgets/private/dmainwindow_p.h","Functions":[{"Uniquefunname":"public DMainWindowPrivate(DMainWindow * qq)","Funname":"DMainWindowPrivate","Returntype":"public","Args":"DMainWindow * qq"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void updateTitleShadowGeometry()","Funname":"updateTitleShadowGeometry","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DMAINWINDOW_P_H"]}]}
{"Filepath":"src/widgets/private/dmpriscontrol_p.h","Functions":[{"Uniquefunname":"    D_DECLARE_PUBLIC(DMPRISControl)","Funname":"D_DECLARE_PUBLIC","Returntype":"","Args":"DMPRISControl"},{"Uniquefunname":"void _q_loadMPRISPath(const QString \u0026 path)","Funname":"_q_loadMPRISPath","Returntype":"void","Args":"const QString \u0026 path"},{"Uniquefunname":"void _q_onCanControlChanged(bool canControl)","Funname":"_q_onCanControlChanged","Returntype":"void","Args":"bool canControl"},{"Uniquefunname":"void _q_onMetaDataChanged()","Funname":"_q_onMetaDataChanged","Returntype":"void","Args":""},{"Uniquefunname":"void _q_onNextClicked()","Funname":"_q_onNextClicked","Returntype":"void","Args":""},{"Uniquefunname":"void _q_onPauseClicked()","Funname":"_q_onPauseClicked","Returntype":"void","Args":""},{"Uniquefunname":"void _q_onPlayClicked()","Funname":"_q_onPlayClicked","Returntype":"void","Args":""},{"Uniquefunname":"void _q_onPlaybackStatusChanged()","Funname":"_q_onPlaybackStatusChanged","Returntype":"void","Args":""},{"Uniquefunname":"public Q_SLOTS _q_onPrevClicked()","Funname":"_q_onPrevClicked","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"void _q_removeMPRISPath(const QString \u0026 path)","Funname":"_q_removeMPRISPath","Returntype":"void","Args":"const QString \u0026 path"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DMPRISCONTROL_P_H"]}]}
{"Filepath":"src/widgets/private/dpageindicator_p.h","Functions":[{"Uniquefunname":"    D_DECLARE_PUBLIC(DPageIndicator)","Funname":"D_DECLARE_PUBLIC","Returntype":"","Args":"DPageIndicator"},{"Uniquefunname":"void nextPage()","Funname":"nextPage","Returntype":"void","Args":""},{"Uniquefunname":"void previousPage()","Funname":"previousPage","Returntype":"void","Args":""},{"Uniquefunname":"void setCurrentPage(const int index)","Funname":"setCurrentPage","Returntype":"void","Args":"const int index"},{"Uniquefunname":"void setPageCount(const int count)","Funname":"setPageCount","Returntype":"void","Args":"const int count"}],"Records":[{"Name":"macro","Fields":["DPAGEINDICATOR_P_H"]}]}
{"Filepath":"src/widgets/private/dpasswordedit_p.h","Functions":[{"Uniquefunname":"public DPasswordEditPrivate(DPasswordEdit * q)","Funname":"DPasswordEditPrivate","Returntype":"public","Args":"DPasswordEdit * q"},{"Uniquefunname":"void _q_toggleEchoMode()","Funname":"_q_toggleEchoMode","Returntype":"void","Args":""},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DPASSWORDEDIT_P_H"]}]}
{"Filepath":"src/widgets/private/dpicturesequenceview_p.h","Functions":[{"Uniquefunname":"    D_DECLARE_PUBLIC(DPictureSequenceView)","Funname":"D_DECLARE_PUBLIC","Returntype":"","Args":"DPictureSequenceView"},{"Uniquefunname":"public _q_refreshPicture()","Funname":"_q_refreshPicture","Returntype":"public","Args":""},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"QPixmap loadPixmap(const QString \u0026 path)","Funname":"loadPixmap","Returntype":"QPixmap","Args":"const QString \u0026 path"},{"Uniquefunname":"void play()","Funname":"play","Returntype":"void","Args":""},{"Uniquefunname":" ~DPictureSequenceViewPrivate()","Funname":"~DPictureSequenceViewPrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DPICTURESEQUENCEVIEW_P_H"]}]}
{"Filepath":"src/widgets/private/dprintpreviewdialog_p.h","Functions":[{"Uniquefunname":"explicit DPrintPreviewDialogPrivate(DPrintPreviewDialog * qq)","Funname":"DPrintPreviewDialogPrivate","Returntype":"explicit","Args":"DPrintPreviewDialog * qq"},{"Uniquefunname":"void _q_ColorModeChange(int index)","Funname":"_q_ColorModeChange","Returntype":"void","Args":"int index"},{"Uniquefunname":"void _q_checkStateChanged(int state)","Funname":"_q_checkStateChanged","Returntype":"void","Args":"int state"},{"Uniquefunname":"void _q_colorButtonCliked(bool cliked)","Funname":"_q_colorButtonCliked","Returntype":"void","Args":"bool cliked"},{"Uniquefunname":"void _q_currentPageSpinChanged(int value)","Funname":"_q_currentPageSpinChanged","Returntype":"void","Args":"int value"},{"Uniquefunname":"void _q_customPagesFinished()","Funname":"_q_customPagesFinished","Returntype":"void","Args":""},{"Uniquefunname":"void _q_customTextWatermarkFinished()","Funname":"_q_customTextWatermarkFinished","Returntype":"void","Args":""},{"Uniquefunname":"void _q_marginEditFinished()","Funname":"_q_marginEditFinished","Returntype":"void","Args":""},{"Uniquefunname":"void _q_marginspinChanged(double)","Funname":"_q_marginspinChanged","Returntype":"void","Args":"double"},{"Uniquefunname":"void _q_orientationChanged(int index)","Funname":"_q_orientationChanged","Returntype":"void","Args":"int index"},{"Uniquefunname":"void _q_pageMarginChanged(int index)","Funname":"_q_pageMarginChanged","Returntype":"void","Args":"int index"},{"Uniquefunname":"void _q_pagePersheetComboIndexChanged(int index)","Funname":"_q_pagePersheetComboIndexChanged","Returntype":"void","Args":"int index"},{"Uniquefunname":"void _q_pageRangeChanged(int index)","Funname":"_q_pageRangeChanged","Returntype":"void","Args":"int index"},{"Uniquefunname":"void _q_printOrderComboIndexChanged(int index)","Funname":"_q_printOrderComboIndexChanged","Returntype":"void","Args":"int index"},{"Uniquefunname":"void _q_printerChanged(int index)","Funname":"_q_printerChanged","Returntype":"void","Args":"int index"},{"Uniquefunname":"void _q_selectColorButton(QColor color)","Funname":"_q_selectColorButton","Returntype":"void","Args":"QColor color"},{"Uniquefunname":"void _q_spinboxValueEmptyChecked(const QString \u0026)","Funname":"_q_spinboxValueEmptyChecked","Returntype":"void","Args":"const QString \u0026"},{"Uniquefunname":"void _q_startPrint(bool clicked)","Funname":"_q_startPrint","Returntype":"void","Args":"bool clicked"},{"Uniquefunname":"void _q_textWaterMarkModeChanged(int index)","Funname":"_q_textWaterMarkModeChanged","Returntype":"void","Args":"int index"},{"Uniquefunname":"void adjustMargins()","Funname":"adjustMargins","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cint\u003e checkDuplication(QVector\u003cint\u003e data)","Funname":"checkDuplication","Returntype":"QVector\u003cint\u003e","Args":"QVector\u003cint\u003e data"},{"Uniquefunname":"void customPictureWatermarkChoosed(const QString \u0026 filename)","Funname":"customPictureWatermarkChoosed","Returntype":"void","Args":"const QString \u0026 filename"},{"Uniquefunname":"void disablePrintSettings()","Funname":"disablePrintSettings","Returntype":"void","Args":""},{"Uniquefunname":"void initWaterMarkui()","Funname":"initWaterMarkui","Returntype":"void","Args":""},{"Uniquefunname":"void initWaterSettings()","Funname":"initWaterSettings","Returntype":"void","Args":""},{"Uniquefunname":"void initadvanceui()","Funname":"initadvanceui","Returntype":"void","Args":""},{"Uniquefunname":"void initbasicui()","Funname":"initbasicui","Returntype":"void","Args":""},{"Uniquefunname":"void initconnections()","Funname":"initconnections","Returntype":"void","Args":""},{"Uniquefunname":"void initdata()","Funname":"initdata","Returntype":"void","Args":""},{"Uniquefunname":"void initleft(QVBoxLayout * layout)","Funname":"initleft","Returntype":"void","Args":"QVBoxLayout * layout"},{"Uniquefunname":"void initright(QVBoxLayout * layout)","Funname":"initright","Returntype":"void","Args":"QVBoxLayout * layout"},{"Uniquefunname":"void initui()","Funname":"initui","Returntype":"void","Args":""},{"Uniquefunname":"void judgeSupportedAttributes(const QString \u0026 lastPaperSize)","Funname":"judgeSupportedAttributes","Returntype":"void","Args":"const QString \u0026 lastPaperSize"},{"Uniquefunname":"void marginsLayout(bool adapted)","Funname":"marginsLayout","Returntype":"void","Args":"bool adapted"},{"Uniquefunname":"void marginsUpdate(bool isPrinterChanged)","Funname":"marginsUpdate","Returntype":"void","Args":"bool isPrinterChanged"},{"Uniquefunname":"void pageRangeError(TipsNum tipNum)","Funname":"pageRangeError","Returntype":"void","Args":"TipsNum tipNum"},{"Uniquefunname":"void setEnable(const int \u0026 value,DComboBox * combox)","Funname":"setEnable","Returntype":"void","Args":"const int \u0026 value,DComboBox * combox"},{"Uniquefunname":"void setMininumMargins()","Funname":"setMininumMargins","Returntype":"void","Args":""},{"Uniquefunname":"void setPageIsLegal(bool islegal)","Funname":"setPageIsLegal","Returntype":"void","Args":"bool islegal"},{"Uniquefunname":"void setPageLayoutEnable(const bool \u0026 checked)","Funname":"setPageLayoutEnable","Returntype":"void","Args":"const bool \u0026 checked"},{"Uniquefunname":"void setScaling(int index)","Funname":"setScaling","Returntype":"void","Args":"int index"},{"Uniquefunname":"void setTurnPageBtnStatus()","Funname":"setTurnPageBtnStatus","Returntype":"void","Args":""},{"Uniquefunname":"void setfrmaeback(DFrame * frame)","Funname":"setfrmaeback","Returntype":"void","Args":"DFrame * frame"},{"Uniquefunname":"void setupPrinter()","Funname":"setupPrinter","Returntype":"void","Args":""},{"Uniquefunname":"void showadvancesetting()","Funname":"showadvancesetting","Returntype":"void","Args":""},{"Uniquefunname":"void startup()","Funname":"startup","Returntype":"void","Args":""},{"Uniquefunname":"void themeTypeChange(DGuiApplicationHelper::ColorType themeType)","Funname":"themeTypeChange","Returntype":"void","Args":"DGuiApplicationHelper::ColorType themeType"},{"Uniquefunname":"void tipSelected(TipsNum tipNum)","Funname":"tipSelected","Returntype":"void","Args":"TipsNum tipNum"},{"Uniquefunname":"void waterMarkBtnClicked(bool isClicked)","Funname":"waterMarkBtnClicked","Returntype":"void","Args":"bool isClicked"},{"Uniquefunname":"void watermarkTypeChoosed(int index)","Funname":"watermarkTypeChoosed","Returntype":"void","Args":"int index"}],"Records":[{"Name":"enum:TipsNum","Fields":["CommaTip","FormatTip","MaxTip","NullTip"]},{"Name":"macro","Fields":["DPRINTPREVIEWDIALOG_P_H"]},{"Name":"enum:WaterMarkType","Fields":["Type_Image","Type_None","Type_Text"]}]}
{"Filepath":"src/widgets/private/dprintpreviewwidget_p.h","Functions":[{"Uniquefunname":"explicit DPrintPreviewWidgetPrivate(DPrintPreviewWidget * qq)","Funname":"DPrintPreviewWidgetPrivate","Returntype":"explicit","Args":"DPrintPreviewWidget * qq"},{"Uniquefunname":"public NumberItem(QVector\u003cint\u003e _pageNumberVector,QVector\u003cQPointF\u003e _numberPointVector,QRect _pageRect)","Funname":"NumberItem","Returntype":"public","Args":"QVector\u003cint\u003e _pageNumberVector,QVector\u003cQPointF\u003e _numberPointVector,QRect _pageRect"},{"Uniquefunname":"    NumberUpData(DPrintPreviewWidgetPrivate *parent)","Funname":"NumberUpData","Returntype":"","Args":"DPrintPreviewWidgetPrivate * parent"},{"Uniquefunname":"public NumberUpData::NumberItem(QVector\u003cint\u003e _pageNumberVector,QVector\u003cQPointF\u003e _numberPointVector,QRect _pageRect)","Funname":"NumberUpData::NumberItem","Returntype":"public","Args":"QVector\u003cint\u003e _pageNumberVector,QVector\u003cQPointF\u003e _numberPointVector,QRect _pageRect"},{"Uniquefunname":"    NumberUpData(DPrintPreviewWidgetPrivate *parent)","Funname":"NumberUpData::NumberUpData","Returntype":"","Args":"DPrintPreviewWidgetPrivate * parent"},{"Uniquefunname":"QRectF NumberUpData::boundingRect()","Funname":"NumberUpData::boundingRect","Returntype":"QRectF","Args":""},{"Uniquefunname":"    void copyWaterMarkProperties()","Funname":"NumberUpData::copyWaterMarkProperties","Returntype":"void","Args":""},{"Uniquefunname":"void NumberUpData::paint(QPainter * painter,const QStyleOptionGraphicsItem * item,QWidget * widget)","Funname":"NumberUpData::paint","Returntype":"void","Args":"QPainter * painter,const QStyleOptionGraphicsItem * item,QWidget * widget"},{"Uniquefunname":"    void resetData()","Funname":"NumberUpData::resetData","Returntype":"void","Args":""},{"Uniquefunname":"        inline void setNumberPositon(const QVector\u003cQPointF\u003e \u0026numberPos)","Funname":"NumberUpData::setNumberPositon","Returntype":"void","Args":"const QVector\u003cQPointF\u003e \u0026 numberPos"},{"Uniquefunname":"        inline void setPageNumbers(const QVector\u003cint\u003e \u0026pageNumber)","Funname":"NumberUpData::setPageNumbers","Returntype":"void","Args":"const QVector\u003cint\u003e \u0026 pageNumber"},{"Uniquefunname":"        void setRect(const QRectF \u0026rect)","Funname":"NumberUpData::setRect","Returntype":"void","Args":"const QRectF \u0026 rect"},{"Uniquefunname":"    void setWaterMarkOriginProperties(WaterMark *wm)","Funname":"NumberUpData::setWaterMarkOriginProperties","Returntype":"void","Args":"WaterMark * wm"},{"Uniquefunname":"    void setWaterMarkProperty(T outFunction)","Funname":"NumberUpData::setWaterMarkProperty","Returntype":"template\u003ctypename T\u003e void","Args":"T outFunction"},{"Uniquefunname":"    void setWaterMarksScale(qreal scale)","Funname":"NumberUpData::setWaterMarksScale","Returntype":"void","Args":"qreal scale"},{"Uniquefunname":"    QVector\u003cQPointF\u003e updatePositions(const qreal \u0026scale)","Funname":"NumberUpData::updatePositions","Returntype":"QVector\u003cQPointF\u003e","Args":"const qreal \u0026 scale"},{"Uniquefunname":"    void updateWaterMarks()","Funname":"NumberUpData::updateWaterMarks","Returntype":"void","Args":""},{"Uniquefunname":"    ~NumberUpData()","Funname":"NumberUpData::~NumberUpData","Returntype":"","Args":""},{"Uniquefunname":"    PageItem(int _pageNum, const QPicture *_pagePicture, QSize _paperSize, QRect _pageRect)","Funname":"PageItem","Returntype":"public","Args":"int _pageNum,const QPicture * _pagePicture,QSize _paperSize,QRect _pageRect"},{"Uniquefunname":"DWIDGET_END_NAMESPACE Q_DECLARE_TYPEINFO(DTK_WIDGET_NAMESPACE::DPrintPreviewWidgetPrivate::NumberUpData::WaterMarkProperty,Q_PRIMITIVE_TYPE)","Funname":"Q_DECLARE_TYPEINFO","Returntype":"DWIDGET_END_NAMESPACE","Args":"DTK_WIDGET_NAMESPACE::DPrintPreviewWidgetPrivate::NumberUpData::WaterMarkProperty,Q_PRIMITIVE_TYPE"},{"Uniquefunname":"void asynPrint(const QPointF \u0026 leftTop,const QRect \u0026 pageRect,const QVector\u003cint\u003e \u0026 pageVector)","Funname":"asynPrint","Returntype":"void","Args":"const QPointF \u0026 leftTop,const QRect \u0026 pageRect,const QVector\u003cint\u003e \u0026 pageVector"},{"Uniquefunname":"QRectF boundingRect()","Funname":"boundingRect","Returntype":"QRectF","Args":""},{"Uniquefunname":"QRectF boundingRect()","Funname":"boundingRect","Returntype":"QRectF","Args":""},{"Uniquefunname":"void calculateCurrentNumberPage()","Funname":"calculateCurrentNumberPage","Returntype":"void","Args":""},{"Uniquefunname":"void calculateNumberPagePosition()","Funname":"calculateNumberPagePosition","Returntype":"void","Args":""},{"Uniquefunname":"void calculateNumberPageScale()","Funname":"calculateNumberPageScale","Returntype":"void","Args":""},{"Uniquefunname":"void calculateNumberUpPage()","Funname":"calculateNumberUpPage","Returntype":"void","Args":""},{"Uniquefunname":"void changeEvent(QEvent * e)","Funname":"changeEvent","Returntype":"void","Args":"QEvent * e"},{"Uniquefunname":"    void copyWaterMarkProperties()","Funname":"copyWaterMarkProperties","Returntype":"void","Args":""},{"Uniquefunname":"void displayWaterMarkItem()","Funname":"displayWaterMarkItem","Returntype":"void","Args":""},{"Uniquefunname":"void drawNumberUpPictures(QPainter * painter)","Funname":"drawNumberUpPictures","Returntype":"void","Args":"QPainter * painter"},{"Uniquefunname":"void fitView()","Funname":"fitView","Returntype":"void","Args":""},{"Uniquefunname":"QByteArray foundColorModelByCups()","Funname":"foundColorModelByCups","Returntype":"QByteArray","Args":""},{"Uniquefunname":"void generatePreview()","Funname":"generatePreview","Returntype":"void","Args":""},{"Uniquefunname":"void generatePreviewPicture()","Funname":"generatePreviewPicture","Returntype":"void","Args":""},{"Uniquefunname":"QImage generateWaterMarkImage()","Funname":"generateWaterMarkImage","Returntype":"QImage","Args":""},{"Uniquefunname":"QFont getFont()","Funname":"getFont","Returntype":"QFont","Args":""},{"Uniquefunname":"Type getType()","Funname":"getType","Returntype":"Type","Args":""},{"Uniquefunname":"protected grayscalePaint(const QPicture \u0026 picture)","Funname":"grayscalePaint","Returntype":"protected","Args":"const QPicture \u0026 picture"},{"Uniquefunname":"QImage imageGrayscale(const QImage * origin)","Funname":"imageGrayscale","Returntype":"QImage","Args":"const QImage * origin"},{"Uniquefunname":"D_DECL_DEPRECATED void impositionPages()","Funname":"impositionPages","Returntype":"D_DECL_DEPRECATED void","Args":""},{"Uniquefunname":"int impositionPages(DPrintPreviewWidget::Imposition im)","Funname":"impositionPages","Returntype":"int","Args":"DPrintPreviewWidget::Imposition im"},{"Uniquefunname":"int index2page(int index)","Funname":"index2page","Returntype":"int","Args":"int index"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"protected itemClipPath()","Funname":"itemClipPath","Returntype":"protected","Args":""},{"Uniquefunname":"QPolygonF itemMaxPolygon()","Funname":"itemMaxPolygon","Returntype":"QPolygonF","Args":""},{"Uniquefunname":"protected mousePressEvent(QMouseEvent * e)","Funname":"mousePressEvent","Returntype":"protected","Args":"QMouseEvent * e"},{"Uniquefunname":"void mouseReleaseEvent(QMouseEvent * e)","Funname":"mouseReleaseEvent","Returntype":"void","Args":"QMouseEvent * e"},{"Uniquefunname":"private Q_SLOTS onThemeTypeChanged(DGuiApplicationHelper::ColorType themeType)","Funname":"onThemeTypeChanged","Returntype":"private Q_SLOTS","Args":"DGuiApplicationHelper::ColorType themeType"},{"Uniquefunname":"int page2index(int page)","Funname":"page2index","Returntype":"int","Args":"int page"},{"Uniquefunname":"int pageNumber()","Funname":"pageNumber","Returntype":"int","Args":""},{"Uniquefunname":"int pagesCount()","Funname":"pagesCount","Returntype":"int","Args":""},{"Uniquefunname":"void paint(QPainter * painter,const QStyleOptionGraphicsItem * item,QWidget * widget)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QStyleOptionGraphicsItem * item,QWidget * widget"},{"Uniquefunname":"void paint(QPainter * painter,const QStyleOptionGraphicsItem * item,QWidget * widget)","Funname":"paint","Returntype":"void","Args":"QPainter * painter,const QStyleOptionGraphicsItem * item,QWidget * widget"},{"Uniquefunname":"void populateScene()","Funname":"populateScene","Returntype":"void","Args":""},{"Uniquefunname":"void printAsImage(const QSize \u0026 paperSize,QVector\u003cint\u003e \u0026 pageVector)","Funname":"printAsImage","Returntype":"void","Args":"const QSize \u0026 paperSize,QVector\u003cint\u003e \u0026 pageVector"},{"Uniquefunname":"void printByCups()","Funname":"printByCups","Returntype":"void","Args":""},{"Uniquefunname":"void printMultiPageDrawUtil(QPainter * painter,const QPointF \u0026 leftTop,const QImage \u0026 waterImage)","Funname":"printMultiPageDrawUtil","Returntype":"void","Args":"QPainter * painter,const QPointF \u0026 leftTop,const QImage \u0026 waterImage"},{"Uniquefunname":"void printSinglePageDrawUtil(QPainter * painter,const QSize \u0026 translateSize,const QPointF \u0026 leftTop,const QImage \u0026 waterImage,const QPicture * picture)","Funname":"printSinglePageDrawUtil","Returntype":"void","Args":"QPainter * painter,const QSize \u0026 translateSize,const QPointF \u0026 leftTop,const QImage \u0026 waterImage,const QPicture * picture"},{"Uniquefunname":"PrintOptions printerOptions()","Funname":"printerOptions","Returntype":"PrintOptions","Args":""},{"Uniquefunname":"void releaseImpositionData()","Funname":"releaseImpositionData","Returntype":"void","Args":""},{"Uniquefunname":"QVector\u003cint\u003e requestPages(int page)","Funname":"requestPages","Returntype":"QVector\u003cint\u003e","Args":"int page"},{"Uniquefunname":"    void resetData()","Funname":"resetData","Returntype":"void","Args":""},{"Uniquefunname":"void resizeEvent(QResizeEvent * e)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * e"},{"Uniquefunname":"Q_SIGNALS resized()","Funname":"resized","Returntype":"Q_SIGNALS","Args":""},{"Uniquefunname":"    inline void setBoundingRect(const QRectF \u0026rect)","Funname":"setBoundingRect","Returntype":"void","Args":"const QRectF \u0026 rect"},{"Uniquefunname":" setCacheMode(DeviceCoordinateCache)","Funname":"setCacheMode","Returntype":"","Args":"DeviceCoordinateCache"},{"Uniquefunname":"    inline void setColor(const QColor \u0026c)","Funname":"setColor","Returntype":"void","Args":"const QColor \u0026 c"},{"Uniquefunname":"void setCurrentPage(int page)","Funname":"setCurrentPage","Returntype":"void","Args":"int page"},{"Uniquefunname":"    inline void setCurrentPageNumber(int page)","Funname":"setCurrentPageNumber","Returntype":"void","Args":"int page"},{"Uniquefunname":"    inline void setFont(const QFont \u0026f)","Funname":"setFont","Returntype":"void","Args":"const QFont \u0026 f"},{"Uniquefunname":"void setImage(const QImage \u0026 img)","Funname":"setImage","Returntype":"void","Args":"const QImage \u0026 img"},{"Uniquefunname":"    inline void setLayoutType(Layout l)","Funname":"setLayoutType","Returntype":"void","Args":"Layout l"},{"Uniquefunname":"        inline void setNumberPositon(const QVector\u003cQPointF\u003e \u0026numberPos)","Funname":"setNumberPositon","Returntype":"void","Args":"const QVector\u003cQPointF\u003e \u0026 numberPos"},{"Uniquefunname":"void setNumberUpScale(const qreal \u0026 value)","Funname":"setNumberUpScale","Returntype":"void","Args":"const qreal \u0026 value"},{"Uniquefunname":"        inline void setPageNumbers(const QVector\u003cint\u003e \u0026pageNumber)","Funname":"setPageNumbers","Returntype":"void","Args":"const QVector\u003cint\u003e \u0026 pageNumber"},{"Uniquefunname":"void setPageRangeAll()","Funname":"setPageRangeAll","Returntype":"void","Args":""},{"Uniquefunname":"        void setRect(const QRectF \u0026rect)","Funname":"setRect","Returntype":"void","Args":"const QRectF \u0026 rect"},{"Uniquefunname":"    void setRect(const QRectF \u0026rect)","Funname":"setRect","Returntype":"void","Args":"const QRectF \u0026 rect"},{"Uniquefunname":"    inline void setScaleFactor(qreal scale)","Funname":"setScaleFactor","Returntype":"void","Args":"qreal scale"},{"Uniquefunname":"    inline void setText(const QString str)","Funname":"setText","Returntype":"void","Args":"const QString str"},{"Uniquefunname":"    inline void setType(Type t)","Funname":"setType","Returntype":"void","Args":"Type t"},{"Uniquefunname":"void setVisible(bool isVisible)","Funname":"setVisible","Returntype":"void","Args":"bool isVisible"},{"Uniquefunname":"    void setWaterMarkOriginProperties(WaterMark *wm)","Funname":"setWaterMarkOriginProperties","Returntype":"void","Args":"WaterMark * wm"},{"Uniquefunname":"    void setWaterMarkProperty(T outFunction)","Funname":"setWaterMarkProperty","Returntype":"template\u003ctypename T\u003e void","Args":"T outFunction"},{"Uniquefunname":"    void setWaterMarksScale(qreal scale)","Funname":"setWaterMarksScale","Returntype":"void","Args":"qreal scale"},{"Uniquefunname":"void showEvent(QShowEvent * e)","Funname":"showEvent","Returntype":"void","Args":"QShowEvent * e"},{"Uniquefunname":"void syncPrint(const QPointF \u0026 leftTop,const QRect \u0026 pageRect,const QVector\u003cint\u003e \u0026 pageVector)","Funname":"syncPrint","Returntype":"void","Args":"const QPointF \u0026 leftTop,const QRect \u0026 pageRect,const QVector\u003cint\u003e \u0026 pageVector"},{"Uniquefunname":"int targetPage(int page)","Funname":"targetPage","Returntype":"int","Args":"int page"},{"Uniquefunname":"void updateGrayContent()","Funname":"updateGrayContent","Returntype":"void","Args":""},{"Uniquefunname":"void updateNumberUpContent()","Funname":"updateNumberUpContent","Returntype":"void","Args":""},{"Uniquefunname":"void updatePageByPagePrintVector(QVector\u003cint\u003e \u0026 pageVector,QList\u003cconst QPicture * \u003e \u0026 pictures)","Funname":"updatePageByPagePrintVector","Returntype":"void","Args":"QVector\u003cint\u003e \u0026 pageVector,QList\u003cconst QPicture * \u003e \u0026 pictures"},{"Uniquefunname":"void updatePicture(QPainter * painter,bool isPreview)","Funname":"updatePicture","Returntype":"void","Args":"QPainter * painter,bool isPreview"},{"Uniquefunname":"    QVector\u003cQPointF\u003e updatePositions(const qreal \u0026scale)","Funname":"updatePositions","Returntype":"QVector\u003cQPointF\u003e","Args":"const qreal \u0026 scale"},{"Uniquefunname":"    void updateWaterMarks()","Funname":"updateWaterMarks","Returntype":"void","Args":""},{"Uniquefunname":"void wheelEvent(QWheelEvent * e)","Funname":"wheelEvent","Returntype":"void","Args":"QWheelEvent * e"},{"Uniquefunname":"    ~NumberUpData()","Funname":"~NumberUpData","Returntype":"","Args":""}],"Records":[{"Name":"enum:Layout","Fields":["Center","Tiled"]},{"Name":"macro","Fields":["DPRINTPREVIEWWIDGET_P_H","NUMBERUP_SCALE_RATIO","NUMBERUP_SPACE_SCALE_RATIO","PREVIEW_ENLARGE_RATIO","PREVIEW_NARROW_RATIO","PREVIEW_SCALEBUTTON_MARGIN","PREVIEW_WATER_COUNT_HEIGHT","PREVIEW_WATER_COUNT_SPACE","PREVIEW_WATER_COUNT_WIDTH","PREVIEW_WIDGET_MARGIN_RATIO"]},{"Name":"enum:Type","Fields":["Image","None","Text"]},{"Name":"struct:NumberUpData::WaterMarkProperty","Fields":["QColor NumberUpData::WaterMarkProperty::color","QFont NumberUpData::WaterMarkProperty::font","QImage NumberUpData::WaterMarkProperty::grayImage","WaterMark::Layout NumberUpData::WaterMarkProperty::layout","qreal NumberUpData::WaterMarkProperty::opacity","qreal NumberUpData::WaterMarkProperty::rotation","qreal NumberUpData::WaterMarkProperty::scale","QImage NumberUpData::WaterMarkProperty::sourceImage","QString NumberUpData::WaterMarkProperty::text","WaterMark::Type NumberUpData::WaterMarkProperty::type"]},{"Name":"struct:NumberUpData","Fields":["int NumberUpData::columnCount","bool NumberUpData::needRecreateWater","NumberItem * NumberUpData::numberItem","QVector\u003cQPointF\u003e NumberUpData::numberPointVector","QVector\u003cint\u003e NumberUpData::numberVector","QPointF NumberUpData::pageStartPoint","QVector\u003cQPointF\u003e NumberUpData::paintPoints","DPrintPreviewWidgetPrivate * NumberUpData::parent","QVector\u003cQPair\u003cint,const QPicture * \u003e\u003e NumberUpData::previewPictures","int NumberUpData::rowCount","qreal NumberUpData::scaleRatio","QList\u003cWaterMark * \u003e NumberUpData::waterList","QGraphicsRectItem * NumberUpData::waterParentItem","WaterMarkProperty * NumberUpData::waterProperty"]},{"Name":"enum:RefreshMode","Fields":["RefreshDelay","RefreshImmediately"]}]}
{"Filepath":"src/widgets/private/dsearchcombobox_p.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PUBLIC(DSearchComboBox)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"DSearchComboBox"}],"Records":[{"Name":"macro","Fields":["DSEARCHCOMBOBOX_P_H"]}]}
{"Filepath":"src/widgets/private/dsearchedit_p.h","Functions":[{"Uniquefunname":"public DSearchEditPrivate(DSearchEdit * q)","Funname":"DSearchEditPrivate","Returntype":"public","Args":"DSearchEdit * q"},{"Uniquefunname":"void _q_clearFocus()","Funname":"_q_clearFocus","Returntype":"void","Args":""},{"Uniquefunname":"void _q_onVoiceActionTrigger(bool checked)","Funname":"_q_onVoiceActionTrigger","Returntype":"void","Args":"bool checked"},{"Uniquefunname":"void _q_toEditMode(bool focus)","Funname":"_q_toEditMode","Returntype":"void","Args":"bool focus"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":" ~DSearchEditPrivate()","Funname":"~DSearchEditPrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DSEARCHEDIT_P_H"]}]}
{"Filepath":"src/widgets/private/dslider_p.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PUBLIC(DSlider)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"DSlider"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void updtateTool(int value)","Funname":"updtateTool","Returntype":"void","Args":"int value"}],"Records":[{"Name":"macro","Fields":["DSLIDER_P_H"]}]}
{"Filepath":"src/widgets/private/dspinbox_p.h","Functions":[{"Uniquefunname":" DDoubleSpinBoxPrivate(DDoubleSpinBox * parent)","Funname":"DDoubleSpinBoxPrivate","Returntype":"","Args":"DDoubleSpinBox * parent"},{"Uniquefunname":" DSpinBoxPrivate(DSpinBox * parent)","Funname":"DSpinBoxPrivate","Returntype":"","Args":"DSpinBox * parent"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DSPINBOX_P_H"]}]}
{"Filepath":"src/widgets/private/dstackwidget_p.h","Functions":[{"Uniquefunname":" DAbstractStackWidgetTransitionPrivate(DAbstractStackWidgetTransition * qq)","Funname":"DAbstractStackWidgetTransitionPrivate","Returntype":"","Args":"DAbstractStackWidgetTransition * qq"},{"Uniquefunname":" DStackWidgetPrivate(DStackWidget * qq)","Funname":"DStackWidgetPrivate","Returntype":"","Args":"DStackWidget * qq"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void setCurrentIndex(int index)","Funname":"setCurrentIndex","Returntype":"void","Args":"int index"},{"Uniquefunname":" ~DAbstractStackWidgetTransitionPrivate()","Funname":"~DAbstractStackWidgetTransitionPrivate","Returntype":"","Args":""},{"Uniquefunname":" ~DStackWidgetPrivate()","Funname":"~DStackWidgetPrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DSTACKWIDGET_P_H"]}]}
{"Filepath":"src/widgets/private/dswitchbutton_p.h","Functions":[{"Uniquefunname":"public DSwitchButtonPrivate(DSwitchButton * qq)","Funname":"DSwitchButtonPrivate","Returntype":"public","Args":"DSwitchButton * qq"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":" ~DSwitchButtonPrivate()","Funname":"~DSwitchButtonPrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DSWITCHBUTTON_P_H"]}]}
{"Filepath":"src/widgets/private/dthemehelper.h","Functions":[{"Uniquefunname":"QString themeToQss(QString theme)","Funname":"themeToQss","Returntype":"QString","Args":"QString theme"},{"Uniquefunname":"QString trimThemeContents(QString qss)","Funname":"trimThemeContents","Returntype":"QString","Args":"QString qss"}],"Records":[{"Name":"macro","Fields":["DTHEMEHELPER_H"]}]}
{"Filepath":"src/widgets/private/dtickeffect_p.h","Functions":[{"Uniquefunname":"public DTickEffectPrivate(DTickEffect * qq)","Funname":"DTickEffectPrivate","Returntype":"public","Args":"DTickEffect * qq"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void initDirection()","Funname":"initDirection","Returntype":"void","Args":""},{"Uniquefunname":" ~DTickEffectPrivate()","Funname":"~DTickEffectPrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DTICKEFFECTPRIVATE_H"]}]}
{"Filepath":"src/widgets/private/dtiplabel_p.h","Functions":[{"Uniquefunname":"    Q_DECLARE_PUBLIC(DTipLabel)","Funname":"Q_DECLARE_PUBLIC","Returntype":"","Args":"DTipLabel"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DTIPLABEL_P_H"]}]}
{"Filepath":"src/widgets/private/keyboardmonitor/dkeyboardmonitor.h","Functions":[{"Uniquefunname":"private DKeyboardMonitor()","Funname":"DKeyboardMonitor","Returntype":"private","Args":""},{"Uniquefunname":"Q_SIGNALS capslockStatusChanged(bool on)","Funname":"capslockStatusChanged","Returntype":"Q_SIGNALS","Args":"bool on"},{"Uniquefunname":"Q_OBJECT public instance()","Funname":"instance","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"bool isCapslockOn()","Funname":"isCapslockOn","Returntype":"bool","Args":""},{"Uniquefunname":"bool isNumlockOn()","Funname":"isNumlockOn","Returntype":"bool","Args":""},{"Uniquefunname":"int listen(Display * display)","Funname":"listen","Returntype":"int","Args":"Display * display"},{"Uniquefunname":"void numlockStatusChanged(bool on)","Funname":"numlockStatusChanged","Returntype":"void","Args":"bool on"},{"Uniquefunname":"protected run()","Funname":"run","Returntype":"protected","Args":""},{"Uniquefunname":"bool setNumlockStatus(const bool \u0026 on)","Funname":"setNumlockStatus","Returntype":"bool","Args":"const bool \u0026 on"}],"Records":[{"Name":"macro","Fields":["KEYBOARDMONITOR_H"]}]}
{"Filepath":"src/widgets/private/mpris/dbusinterface.h","Functions":[{"Uniquefunname":"    inline QDBusPendingReply\u003c\u003e AddMatch(const QString \u0026in0)","Funname":"AddMatch","Returntype":"public Q_SLOTS","Args":"const QString \u0026 in0"},{"Uniquefunname":"    inline QDBusPendingReply\u003cQByteArray\u003e GetAdtAuditSessionData(const QString \u0026in0)","Funname":"GetAdtAuditSessionData","Returntype":"QDBusPendingReply\u003cQByteArray\u003e","Args":"const QString \u0026 in0"},{"Uniquefunname":"    inline QDBusPendingReply\u003cQByteArray\u003e GetConnectionSELinuxSecurityContext(const QString \u0026in0)","Funname":"GetConnectionSELinuxSecurityContext","Returntype":"QDBusPendingReply\u003cQByteArray\u003e","Args":"const QString \u0026 in0"},{"Uniquefunname":"    inline QDBusPendingReply\u003cuint\u003e GetConnectionUnixProcessID(const QString \u0026in0)","Funname":"GetConnectionUnixProcessID","Returntype":"QDBusPendingReply\u003cuint\u003e","Args":"const QString \u0026 in0"},{"Uniquefunname":"    inline QDBusPendingReply\u003cuint\u003e GetConnectionUnixUser(const QString \u0026in0)","Funname":"GetConnectionUnixUser","Returntype":"QDBusPendingReply\u003cuint\u003e","Args":"const QString \u0026 in0"},{"Uniquefunname":"    inline QDBusPendingReply\u003cQString\u003e GetId()","Funname":"GetId","Returntype":"QDBusPendingReply\u003cQString\u003e","Args":""},{"Uniquefunname":"    inline QDBusPendingReply\u003cQString\u003e GetNameOwner(const QString \u0026in0)","Funname":"GetNameOwner","Returntype":"QDBusPendingReply\u003cQString\u003e","Args":"const QString \u0026 in0"},{"Uniquefunname":"    inline QDBusPendingReply\u003cQString\u003e Hello()","Funname":"Hello","Returntype":"QDBusPendingReply\u003cQString\u003e","Args":""},{"Uniquefunname":"    inline QDBusPendingReply\u003cQStringList\u003e ListActivatableNames()","Funname":"ListActivatableNames","Returntype":"QDBusPendingReply\u003cQStringList\u003e","Args":""},{"Uniquefunname":"    inline QDBusPendingReply\u003cQStringList\u003e ListNames()","Funname":"ListNames","Returntype":"QDBusPendingReply\u003cQStringList\u003e","Args":""},{"Uniquefunname":"    inline QDBusPendingReply\u003cQStringList\u003e ListQueuedOwners(const QString \u0026in0)","Funname":"ListQueuedOwners","Returntype":"QDBusPendingReply\u003cQStringList\u003e","Args":"const QString \u0026 in0"},{"Uniquefunname":"Q_SIGNALS NameAcquired(const QString \u0026 in0)","Funname":"NameAcquired","Returntype":"Q_SIGNALS","Args":"const QString \u0026 in0"},{"Uniquefunname":"    inline QDBusPendingReply\u003cbool\u003e NameHasOwner(const QString \u0026in0)","Funname":"NameHasOwner","Returntype":"QDBusPendingReply\u003cbool\u003e","Args":"const QString \u0026 in0"},{"Uniquefunname":"void NameLost(const QString \u0026 in0)","Funname":"NameLost","Returntype":"void","Args":"const QString \u0026 in0"},{"Uniquefunname":"void NameOwnerChanged(const QString \u0026 in0,const QString \u0026 in1,const QString \u0026 in2)","Funname":"NameOwnerChanged","Returntype":"void","Args":"const QString \u0026 in0,const QString \u0026 in1,const QString \u0026 in2"},{"Uniquefunname":"    inline QDBusPendingReply\u003cuint\u003e ReleaseName(const QString \u0026in0)","Funname":"ReleaseName","Returntype":"QDBusPendingReply\u003cuint\u003e","Args":"const QString \u0026 in0"},{"Uniquefunname":"    inline QDBusPendingReply\u003c\u003e ReloadConfig()","Funname":"ReloadConfig","Returntype":"QDBusPendingReply\u003c\u003e","Args":""},{"Uniquefunname":"    inline QDBusPendingReply\u003c\u003e RemoveMatch(const QString \u0026in0)","Funname":"RemoveMatch","Returntype":"QDBusPendingReply\u003c\u003e","Args":"const QString \u0026 in0"},{"Uniquefunname":"    inline QDBusPendingReply\u003cuint\u003e RequestName(const QString \u0026in0, uint in1)","Funname":"RequestName","Returntype":"QDBusPendingReply\u003cuint\u003e","Args":"const QString \u0026 in0,uint in1"},{"Uniquefunname":"    inline QDBusPendingReply\u003cuint\u003e StartServiceByName(const QString \u0026in0, uint in1)","Funname":"StartServiceByName","Returntype":"QDBusPendingReply\u003cuint\u003e","Args":"const QString \u0026 in0,uint in1"},{"Uniquefunname":"    Q_SLOT void __propertyChanged__(const QDBusMessage\u0026 msg)","Funname":"__propertyChanged__","Returntype":"Q_OBJECT Q_SLOT void","Args":"const QDBusMessage \u0026 msg"},{"Uniquefunname":"    static inline const char *staticInterfaceName()","Funname":"staticInterfaceName","Returntype":"public","Args":""},{"Uniquefunname":" ~DBusInterface()","Funname":"~DBusInterface","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DBUSINTERFACE_H"]}]}
{"Filepath":"src/widgets/private/mpris/dbusmpris.h","Functions":[{"Uniquefunname":"void CanControlChanged(bool value)","Funname":"CanControlChanged","Returntype":"void","Args":"bool value"},{"Uniquefunname":"void CanGoNextChanged(bool value)","Funname":"CanGoNextChanged","Returntype":"void","Args":"bool value"},{"Uniquefunname":"void CanGoPreviousChanged(bool value)","Funname":"CanGoPreviousChanged","Returntype":"void","Args":"bool value"},{"Uniquefunname":"void CanPauseChanged(bool value)","Funname":"CanPauseChanged","Returntype":"void","Args":"bool value"},{"Uniquefunname":"void CanPlayChanged(bool value)","Funname":"CanPlayChanged","Returntype":"void","Args":"bool value"},{"Uniquefunname":"void CanSeekChanged(bool value)","Funname":"CanSeekChanged","Returntype":"void","Args":"bool value"},{"Uniquefunname":"void LoopStatusChanged(const QString \u0026 value)","Funname":"LoopStatusChanged","Returntype":"void","Args":"const QString \u0026 value"},{"Uniquefunname":"void MaximumRateChanged(double value)","Funname":"MaximumRateChanged","Returntype":"void","Args":"double value"},{"Uniquefunname":"void MetadataChanged(const QVariantMap \u0026 value)","Funname":"MetadataChanged","Returntype":"void","Args":"const QVariantMap \u0026 value"},{"Uniquefunname":"void MinimumRateChanged(double value)","Funname":"MinimumRateChanged","Returntype":"void","Args":"double value"},{"Uniquefunname":"    inline QDBusPendingReply\u003c\u003e Next()","Funname":"Next","Returntype":"public Q_SLOTS","Args":""},{"Uniquefunname":"    inline QDBusPendingReply\u003c\u003e OpenUri(const QString \u0026Uri)","Funname":"OpenUri","Returntype":"QDBusPendingReply\u003c\u003e","Args":"const QString \u0026 Uri"},{"Uniquefunname":"    inline QDBusPendingReply\u003c\u003e Pause()","Funname":"Pause","Returntype":"QDBusPendingReply\u003c\u003e","Args":""},{"Uniquefunname":"    inline QDBusPendingReply\u003c\u003e Play()","Funname":"Play","Returntype":"QDBusPendingReply\u003c\u003e","Args":""},{"Uniquefunname":"    inline QDBusPendingReply\u003c\u003e PlayPause()","Funname":"PlayPause","Returntype":"QDBusPendingReply\u003c\u003e","Args":""},{"Uniquefunname":"void PlaybackStatusChanged(const QString \u0026 value)","Funname":"PlaybackStatusChanged","Returntype":"void","Args":"const QString \u0026 value"},{"Uniquefunname":"void PositionChanged(qlonglong value)","Funname":"PositionChanged","Returntype":"void","Args":"qlonglong value"},{"Uniquefunname":"    inline QDBusPendingReply\u003c\u003e Previous()","Funname":"Previous","Returntype":"QDBusPendingReply\u003c\u003e","Args":""},{"Uniquefunname":"    Q_PROPERTY(QString LoopStatus READ loopStatus WRITE setLoopStatus NOTIFY LoopStatusChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"QString LoopStatus READ loopStatus WRITE setLoopStatus NOTIFY LoopStatusChanged"},{"Uniquefunname":"    Q_PROPERTY(QString PlaybackStatus READ playbackStatus NOTIFY PlaybackStatusChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"QString PlaybackStatus READ playbackStatus NOTIFY PlaybackStatusChanged"},{"Uniquefunname":"    Q_PROPERTY(QVariantMap Metadata READ metadata NOTIFY MetadataChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"QVariantMap Metadata READ metadata NOTIFY MetadataChanged"},{"Uniquefunname":"    Q_PROPERTY(bool CanControl READ canControl NOTIFY CanControlChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"bool CanControl READ canControl NOTIFY CanControlChanged"},{"Uniquefunname":"    Q_PROPERTY(bool CanGoNext READ canGoNext NOTIFY CanGoNextChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"bool CanGoNext READ canGoNext NOTIFY CanGoNextChanged"},{"Uniquefunname":"    Q_PROPERTY(bool CanGoPrevious READ canGoPrevious NOTIFY CanGoPreviousChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"bool CanGoPrevious READ canGoPrevious NOTIFY CanGoPreviousChanged"},{"Uniquefunname":"    Q_PROPERTY(bool CanPause READ canPause NOTIFY CanPauseChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"bool CanPause READ canPause NOTIFY CanPauseChanged"},{"Uniquefunname":"    Q_PROPERTY(bool CanPlay READ canPlay NOTIFY CanPlayChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"bool CanPlay READ canPlay NOTIFY CanPlayChanged"},{"Uniquefunname":"    Q_PROPERTY(bool CanSeek READ canSeek NOTIFY CanSeekChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"bool CanSeek READ canSeek NOTIFY CanSeekChanged"},{"Uniquefunname":"    Q_PROPERTY(bool Shuffle READ shuffle WRITE setShuffle NOTIFY ShuffleChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"bool Shuffle READ shuffle WRITE setShuffle NOTIFY ShuffleChanged"},{"Uniquefunname":"    Q_PROPERTY(double MaximumRate READ maximumRate NOTIFY MaximumRateChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"double MaximumRate READ maximumRate NOTIFY MaximumRateChanged"},{"Uniquefunname":"    Q_PROPERTY(double MinimumRate READ minimumRate NOTIFY MinimumRateChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"double MinimumRate READ minimumRate NOTIFY MinimumRateChanged"},{"Uniquefunname":"    Q_PROPERTY(double Rate READ rate WRITE setRate NOTIFY RateChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"double Rate READ rate WRITE setRate NOTIFY RateChanged"},{"Uniquefunname":"    Q_PROPERTY(double Volume READ volume WRITE setVolume NOTIFY VolumeChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"double Volume READ volume WRITE setVolume NOTIFY VolumeChanged"},{"Uniquefunname":"    Q_PROPERTY(qlonglong Position READ position NOTIFY PositionChanged)","Funname":"Q_PROPERTY","Returntype":"","Args":"qlonglong Position READ position NOTIFY PositionChanged"},{"Uniquefunname":"void RateChanged(double value)","Funname":"RateChanged","Returntype":"void","Args":"double value"},{"Uniquefunname":"    inline QDBusPendingReply\u003c\u003e Seek(qlonglong Offset)","Funname":"Seek","Returntype":"QDBusPendingReply\u003c\u003e","Args":"qlonglong Offset"},{"Uniquefunname":"Q_SIGNALS Seeked(qlonglong Position)","Funname":"Seeked","Returntype":"Q_SIGNALS","Args":"qlonglong Position"},{"Uniquefunname":"    inline QDBusPendingReply\u003c\u003e SetPosition(const QDBusObjectPath \u0026TrackId, qlonglong Position)","Funname":"SetPosition","Returntype":"QDBusPendingReply\u003c\u003e","Args":"const QDBusObjectPath \u0026 TrackId,qlonglong Position"},{"Uniquefunname":"void ShuffleChanged(bool value)","Funname":"ShuffleChanged","Returntype":"void","Args":"bool value"},{"Uniquefunname":"    inline QDBusPendingReply\u003c\u003e Stop()","Funname":"Stop","Returntype":"QDBusPendingReply\u003c\u003e","Args":""},{"Uniquefunname":"void VolumeChanged(double value)","Funname":"VolumeChanged","Returntype":"void","Args":"double value"},{"Uniquefunname":"    Q_SLOT void __propertyChanged__(const QDBusMessage\u0026 msg)","Funname":"__propertyChanged__","Returntype":"Q_OBJECT Q_SLOT void","Args":"const QDBusMessage \u0026 msg"},{"Uniquefunname":"    inline void setLoopStatus(const QString \u0026value)","Funname":"setLoopStatus","Returntype":"void","Args":"const QString \u0026 value"},{"Uniquefunname":"    inline void setRate(double value)","Funname":"setRate","Returntype":"void","Args":"double value"},{"Uniquefunname":"    inline void setShuffle(bool value)","Funname":"setShuffle","Returntype":"void","Args":"bool value"},{"Uniquefunname":"    inline void setVolume(double value)","Funname":"setVolume","Returntype":"void","Args":"double value"},{"Uniquefunname":"    static inline const char *staticInterfaceName()","Funname":"staticInterfaceName","Returntype":"public","Args":""},{"Uniquefunname":" ~DBusMPRIS()","Funname":"~DBusMPRIS","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DBUSMPRIS_H"]}]}
{"Filepath":"src/widgets/private/mpris/dmprismonitor.h","Functions":[{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"Q_SIGNALS mprisAcquired(const QString \u0026 path)","Funname":"mprisAcquired","Returntype":"Q_SIGNALS","Args":"const QString \u0026 path"},{"Uniquefunname":"void mprisLost(const QString \u0026 path)","Funname":"mprisLost","Returntype":"void","Args":"const QString \u0026 path"},{"Uniquefunname":"private Q_SLOTS onNameOwnerChanged(const QString \u0026 name,const QString \u0026 oldOwner,const QString \u0026 newOwner)","Funname":"onNameOwnerChanged","Returntype":"private Q_SLOTS","Args":"const QString \u0026 name,const QString \u0026 oldOwner,const QString \u0026 newOwner"}],"Records":[{"Name":"macro","Fields":["DMPRISMONITOR_H"]}]}
{"Filepath":"src/widgets/private/settings/buttongroup.h","Functions":[{"Uniquefunname":"Q_SIGNALS buttonChecked(int id)","Funname":"buttonChecked","Returntype":"Q_SIGNALS","Args":"int id"},{"Uniquefunname":"void setButtons(const QStringList \u0026 texts)","Funname":"setButtons","Returntype":"void","Args":"const QStringList \u0026 texts"},{"Uniquefunname":"public Q_SLOTS setCheckedButton(int id)","Funname":"setCheckedButton","Returntype":"public Q_SLOTS","Args":"int id"},{"Uniquefunname":" ~ButtonGroup()","Funname":"~ButtonGroup","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/widgets/private/settings/combobox.h","Functions":[{"Uniquefunname":"void wheelEvent(QWheelEvent * e)","Funname":"wheelEvent","Returntype":"void","Args":"QWheelEvent * e"}],"Records":null}
{"Filepath":"src/widgets/private/settings/content.h","Functions":[{"Uniquefunname":"bool groupIsVisible(const QString \u0026 key)","Funname":"groupIsVisible","Returntype":"bool","Args":"const QString \u0026 key"},{"Uniquefunname":"private mouseMoveEvent(QMouseEvent * event)","Funname":"mouseMoveEvent","Returntype":"private","Args":"QMouseEvent * event"},{"Uniquefunname":"public Q_SLOTS onScrollToGroup(const QString \u0026 key)","Funname":"onScrollToGroup","Returntype":"public Q_SLOTS","Args":"const QString \u0026 key"},{"Uniquefunname":"void resizeEvent(QResizeEvent * event)","Funname":"resizeEvent","Returntype":"void","Args":"QResizeEvent * event"},{"Uniquefunname":"Q_SIGNALS scrollToGroup(const QString \u0026 key)","Funname":"scrollToGroup","Returntype":"Q_SIGNALS","Args":"const QString \u0026 key"},{"Uniquefunname":"void setGroupVisible(const QString \u0026 key,bool visible)","Funname":"setGroupVisible","Returntype":"void","Args":"const QString \u0026 key,bool visible"},{"Uniquefunname":"void updateSettings(const QByteArray \u0026 translateContext,QPointer\u003cDTK_CORE_NAMESPACE::DSettings\u003e settings)","Funname":"updateSettings","Returntype":"void","Args":"const QByteArray \u0026 translateContext,QPointer\u003cDTK_CORE_NAMESPACE::DSettings\u003e settings"},{"Uniquefunname":"DSettingsWidgetFactory * widgetFactory()","Funname":"widgetFactory","Returntype":"DSettingsWidgetFactory *","Args":""},{"Uniquefunname":" ~Content()","Funname":"~Content","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/widgets/private/settings/contenttitle.h","Functions":[{"Uniquefunname":"QLabel * label()","Funname":"label","Returntype":"QLabel *","Args":""},{"Uniquefunname":"void setSpacing(int width)","Funname":"setSpacing","Returntype":"void","Args":"int width"},{"Uniquefunname":"public Q_SLOTS setTitle(const QString \u0026 title)","Funname":"setTitle","Returntype":"public Q_SLOTS","Args":"const QString \u0026 title"},{"Uniquefunname":" ~ContentTitle()","Funname":"~ContentTitle","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/widgets/private/settings/navigation.h","Functions":[{"Uniquefunname":"bool groupIsVisible(const QString \u0026 key)","Funname":"groupIsVisible","Returntype":"bool","Args":"const QString \u0026 key"},{"Uniquefunname":"public Q_SLOTS onSelectGroup(const QString \u0026 key)","Funname":"onSelectGroup","Returntype":"public Q_SLOTS","Args":"const QString \u0026 key"},{"Uniquefunname":"Q_SIGNALS selectedGroup(const QString \u0026 key)","Funname":"selectedGroup","Returntype":"Q_SIGNALS","Args":"const QString \u0026 key"},{"Uniquefunname":"void setGroupVisible(const QString \u0026 key,bool visible)","Funname":"setGroupVisible","Returntype":"void","Args":"const QString \u0026 key,bool visible"},{"Uniquefunname":"void updateSettings(const QByteArray \u0026 translateContext,QPointer\u003cDTK_CORE_NAMESPACE::DSettings\u003e settings)","Funname":"updateSettings","Returntype":"void","Args":"const QByteArray \u0026 translateContext,QPointer\u003cDTK_CORE_NAMESPACE::DSettings\u003e settings"},{"Uniquefunname":" ~Navigation()","Funname":"~Navigation","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/widgets/private/settings/navigationdelegate.h","Functions":[{"Uniquefunname":"Q_OBJECT public NavigationDelegate(QAbstractItemView * parent)","Funname":"NavigationDelegate","Returntype":"Q_OBJECT public","Args":"QAbstractItemView * parent"},{"Uniquefunname":"void initStyleOption(QStyleOptionViewItem * option,const QModelIndex \u0026 index)","Funname":"initStyleOption","Returntype":"void","Args":"QStyleOptionViewItem * option,const QModelIndex \u0026 index"},{"Uniquefunname":"protected paint(QPainter * painter,const QStyleOptionViewItem \u0026 option,const QModelIndex \u0026 index)","Funname":"paint","Returntype":"protected","Args":"QPainter * painter,const QStyleOptionViewItem \u0026 option,const QModelIndex \u0026 index"},{"Uniquefunname":" ~NavigationDelegate()","Funname":"~NavigationDelegate","Returntype":"","Args":""}],"Records":[{"Name":"enum:NavLevel","Fields":["Level1","Level2","Level3","Split"]},{"Name":"enum:DataRole","Fields":["NavKeyRole","NavLevelRole"]}]}
{"Filepath":"src/widgets/private/settings/shortcutedit.h","Functions":[{"Uniquefunname":"virtual void focusInEvent(QFocusEvent * e)","Funname":"focusInEvent","Returntype":"virtual void","Args":"QFocusEvent * e"},{"Uniquefunname":"virtual void focusOutEvent(QFocusEvent * e)","Funname":"focusOutEvent","Returntype":"virtual void","Args":"QFocusEvent * e"},{"Uniquefunname":"virtual void keyPressEvent(QKeyEvent * e)","Funname":"keyPressEvent","Returntype":"virtual void","Args":"QKeyEvent * e"},{"Uniquefunname":"virtual void mouseDoubleClickEvent(QMouseEvent * event)","Funname":"mouseDoubleClickEvent","Returntype":"virtual void","Args":"QMouseEvent * event"},{"Uniquefunname":"void notifyShortcutChanged(Qt::KeyboardModifiers modifier,Qt::Key key)","Funname":"notifyShortcutChanged","Returntype":"void","Args":"Qt::KeyboardModifiers modifier,Qt::Key key"},{"Uniquefunname":"protected paintEvent(QPaintEvent *)","Funname":"paintEvent","Returntype":"protected","Args":"QPaintEvent *"},{"Uniquefunname":"void setShortCut(Qt::KeyboardModifiers modifier,Qt::Key key)","Funname":"setShortCut","Returntype":"void","Args":"Qt::KeyboardModifiers modifier,Qt::Key key"},{"Uniquefunname":"void setShortCut(const QString \u0026 sequenceString)","Funname":"setShortCut","Returntype":"void","Args":"const QString \u0026 sequenceString"},{"Uniquefunname":"Q_SIGNALS shortcutChanged(Qt::KeyboardModifiers modifier,Qt::Key key)","Funname":"shortcutChanged","Returntype":"Q_SIGNALS","Args":"Qt::KeyboardModifiers modifier,Qt::Key key"},{"Uniquefunname":"void shortcutStringChanged(const QString \u0026 sequenceString)","Funname":"shortcutStringChanged","Returntype":"void","Args":"const QString \u0026 sequenceString"},{"Uniquefunname":" ~ShortcutEdit()","Funname":"~ShortcutEdit","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/widgets/private/startupnotifications/startupnotificationmonitor.h","Functions":[{"Uniquefunname":"protected StartupNotificationMonitor()","Funname":"StartupNotificationMonitor","Returntype":"protected","Args":""},{"Uniquefunname":"Q_SIGNALS appStartup(QString id)","Funname":"appStartup","Returntype":"Q_SIGNALS","Args":"QString id"},{"Uniquefunname":"void appStartupCompleted(QString id)","Funname":"appStartupCompleted","Returntype":"void","Args":"QString id"},{"Uniquefunname":"Q_OBJECT public instance()","Funname":"instance","Returntype":"Q_OBJECT public","Args":""},{"Uniquefunname":"bool nativeEventFilter(const QByteArray \u0026 eventType,void * message,long * result)","Funname":"nativeEventFilter","Returntype":"bool","Args":"const QByteArray \u0026 eventType,void * message,long * result"},{"Uniquefunname":" ~StartupNotificationMonitor()","Funname":"~StartupNotificationMonitor","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["STARTUPNOTIFICATIONMONITOR_H"]}]}
